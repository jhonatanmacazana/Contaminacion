
AVR_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800100  00800100  00000336  2**0
                  ALLOC
  2 .stab         000007bc  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000183  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d4  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000047f  00000000  00000000  00000dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000247  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f2  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000214  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000183  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000063  00000000  00000000  00001ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00001e3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_18>
  4c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 31       	cpi	r26, 0x16	; 22
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  88:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <COswitchMode>:
/*****************************************************/
/*                  Sensor de CO                     */
/*****************************************************/

void COswitchMode(uint8_t modo)
{
  90:	1f 93       	push	r17
  92:	18 2f       	mov	r17, r24
	uint16_t CHECK_SUM = ~(1+SWITCH_COMMAND+modo)+1;
	USART_Transmit(START_BYTE);
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x01);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(SWITCH_COMMAND);
  a0:	88 e7       	ldi	r24, 0x78	; 120
  a2:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(modo);
  a6:	81 2f       	mov	r24, r17
  a8:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(CHECK_SUM);
  c4:	27 e8       	ldi	r18, 0x87	; 135
  c6:	3f ef       	ldi	r19, 0xFF	; 255
  c8:	82 2f       	mov	r24, r18
  ca:	81 1b       	sub	r24, r17
  cc:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
}
  d0:	1f 91       	pop	r17
  d2:	08 95       	ret

000000d4 <COgetData>:

uint16_t COgetData(void)
{
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	28 97       	sbiw	r28, 0x08	; 8
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	uint16_t CHECK_SUM = ~(1+COMMAND)+1;
	uint8_t Buff_CO[8];
	uint16_t c;
	
	/* Solicitud para recibir datos */
	USART_Transmit(START_BYTE);
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x01);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(COMMAND);
  fc:	86 e8       	ldi	r24, 0x86	; 134
  fe:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(0x00);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	USART_Transmit(CHECK_SUM);
 120:	89 e7       	ldi	r24, 0x79	; 121
 122:	0e 94 4a 01 	call	0x294	; 0x294 <USART_Transmit>
	
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
 126:	0e 94 38 01 	call	0x270	; 0x270 <USART_Receive>
 12a:	8f 3f       	cpi	r24, 0xFF	; 255
 12c:	e1 f7       	brne	.-8      	; 0x126 <COgetData+0x52>
	LED_OFF();
 12e:	5f 98       	cbi	0x0b, 7	; 11
 130:	8e 01       	movw	r16, r28
 132:	0f 5f       	subi	r16, 0xFF	; 255
 134:	1f 4f       	sbci	r17, 0xFF	; 255
	USART_Transmit(0x00);
	USART_Transmit(0x00);
	USART_Transmit(CHECK_SUM);
}

uint16_t COgetData(void)
 136:	0f 2e       	mov	r0, r31
 138:	f9 e0       	ldi	r31, 0x09	; 9
 13a:	ef 2e       	mov	r14, r31
 13c:	ff 24       	eor	r15, r15
 13e:	f0 2d       	mov	r31, r0
 140:	ec 0e       	add	r14, r28
 142:	fd 1e       	adc	r15, r29
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
	LED_OFF();
	for (uint8_t i= 0; i<8; i++)
	{
		Buff_CO[i] = USART_Receive();
 144:	0e 94 38 01 	call	0x270	; 0x270 <USART_Receive>
 148:	f8 01       	movw	r30, r16
 14a:	81 93       	st	Z+, r24
 14c:	8f 01       	movw	r16, r30
	USART_Transmit(CHECK_SUM);
	
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
	LED_OFF();
	for (uint8_t i= 0; i<8; i++)
 14e:	ee 15       	cp	r30, r14
 150:	ff 05       	cpc	r31, r15
 152:	c1 f7       	brne	.-16     	; 0x144 <COgetData+0x70>
	{
		Buff_CO[i] = USART_Receive();
	}
	c = 256*Buff_CO[1] + Buff_CO[2];
 154:	3a 81       	ldd	r19, Y+2	; 0x02
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	28 0f       	add	r18, r24
 15c:	31 1d       	adc	r19, r1
	return c;	
}
 15e:	82 2f       	mov	r24, r18
 160:	93 2f       	mov	r25, r19
 162:	28 96       	adiw	r28, 0x08	; 8
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	08 95       	ret

0000017c <main>:
#define LED_ON()		(PORTD |= (1<<7))
#define LED_OFF()		(PORTD &= ~(1<<7))

int main(void)
{
	USART_Init(MYUBRR);
 17c:	8f ec       	ldi	r24, 0xCF	; 207
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_Init>
	DDRD|= (1<<7);
 184:	57 9a       	sbi	0x0a, 7	; 10
	sei();
 186:	78 94       	sei
	
	COswitchMode(QA_MODE);
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 48 00 	call	0x90	; 0x90 <COswitchMode>

	while (1)
	{
		//USART_putString("Mi numero es: ");
		//USART_putNumber(500);
		LED_ON();
 18e:	5f 9a       	sbi	0x0b, 7	; 11
		Data_CO = COgetData();
 190:	0e 94 6a 00 	call	0xd4	; 0xd4 <COgetData>
 194:	90 93 15 01 	sts	0x0115, r25
 198:	80 93 14 01 	sts	0x0114, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	93 ed       	ldi	r25, 0xD3	; 211
 1a0:	a0 e3       	ldi	r26, 0x30	; 48
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	a0 40       	sbci	r26, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x26>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x30>
 1ac:	00 00       	nop
 1ae:	ef cf       	rjmp	.-34     	; 0x18e <main+0x12>

000001b0 <USART_Init>:
Returns:  none
*************************************************************************/
void USART_Init(unsigned int ubrr_val)
{
	/* Set the baud rate */
	UBRR0H = (uint8_t) (ubrr_val>>8);                  
 1b0:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t) ubrr_val;
 1b4:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable 2X Mode */ 
	UCSR0A = (1<<U2X0);
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 c0 00 	sts	0x00C0, r24
	
	/* Enable USART receiver and transmitter */
	UCSR0B = ((1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)); 
 1be:	88 e9       	ldi	r24, 0x98	; 152
 1c0:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8 data 1stop */
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Flush buffers */    
	USART_RxTail = 0;
 1ca:	10 92 0b 01 	sts	0x010B, r1
	USART_RxHead = 0;
 1ce:	10 92 0a 01 	sts	0x010A, r1
	USART_TxTail = 0;
 1d2:	10 92 01 01 	sts	0x0101, r1
	USART_TxHead = 0;
 1d6:	10 92 00 01 	sts	0x0100, r1
}
 1da:	08 95       	ret

000001dc <__vector_18>:
Interrupt Vector for the RX Mode.
If there are new unread data this ISR will execute. Saves the data and
change the index of the RX Buffer.
*************************************************************************/
ISR(USART_RX_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	uint8_t data;
	uint8_t tmphead;

	/* Read the received data */
	data = UDR0;                 
 1ee:	90 91 c6 00 	lds	r25, 0x00C6
	/* Calculate buffer index */
	tmphead = (USART_RxHead + 1) & USART_RX_BUFFER_MASK;
 1f2:	80 91 0a 01 	lds	r24, 0x010A
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	87 70       	andi	r24, 0x07	; 7
	/* Store new index */
	USART_RxHead = tmphead;
 1fa:	80 93 0a 01 	sts	0x010A, r24
	/* Store received data in buffer */
	USART_RxBuf[tmphead] = data; 
 1fe:	ec e0       	ldi	r30, 0x0C	; 12
 200:	f1 e0       	ldi	r31, 0x01	; 1
 202:	e8 0f       	add	r30, r24
 204:	f1 1d       	adc	r31, r1
 206:	90 83       	st	Z, r25
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_19>:
If the buffer of the UART is empty this ISR will execute. Check for new 
data to be sent and puts that into the buffer . Change the index of the 
TX Buffer.
*************************************************************************/
ISR(USART_UDRE_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	uint8_t tmptail;

	/* Check if all data is transmitted */
	if (USART_TxHead != USART_TxTail) 
 22c:	90 91 00 01 	lds	r25, 0x0100
 230:	80 91 01 01 	lds	r24, 0x0101
 234:	98 17       	cp	r25, r24
 236:	71 f0       	breq	.+28     	; 0x254 <__vector_19+0x3a>
	{
		/* Calculate buffer index */
		tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
 238:	80 91 01 01 	lds	r24, 0x0101
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	87 70       	andi	r24, 0x07	; 7
		/* Store new index */
		USART_TxTail = tmptail;      
 240:	80 93 01 01 	sts	0x0101, r24
		/* Start transmission */
		UDR0 = USART_TxBuf[tmptail];  
 244:	e2 e0       	ldi	r30, 0x02	; 2
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	e8 0f       	add	r30, r24
 24a:	f1 1d       	adc	r31, r1
 24c:	80 81       	ld	r24, Z
 24e:	80 93 c6 00 	sts	0x00C6, r24
 252:	05 c0       	rjmp	.+10     	; 0x25e <__vector_19+0x44>
	} else 
	{       
		/* Disable UDRE interrupt */
		UCSR0B &= ~(1<<UDRIE0);         
 254:	e1 ec       	ldi	r30, 0xC1	; 193
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	8f 7d       	andi	r24, 0xDF	; 223
 25c:	80 83       	st	Z, r24
	}
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <USART_Receive>:
uint8_t USART_Receive(void)
{
	uint8_t tmptail;
	
	/* Wait for incoming data */
	while (USART_RxHead == USART_RxTail);
 270:	90 91 0a 01 	lds	r25, 0x010A
 274:	80 91 0b 01 	lds	r24, 0x010B
 278:	98 17       	cp	r25, r24
 27a:	d1 f3       	breq	.-12     	; 0x270 <USART_Receive>
	/* Calculate buffer index */
	tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
 27c:	80 91 0b 01 	lds	r24, 0x010B
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	87 70       	andi	r24, 0x07	; 7
	/* Store new index */
	USART_RxTail = tmptail;                
 284:	80 93 0b 01 	sts	0x010B, r24
	/* Return data */
	return USART_RxBuf[tmptail];          
 288:	ec e0       	ldi	r30, 0x0C	; 12
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	e8 0f       	add	r30, r24
 28e:	f1 1d       	adc	r31, r1
}
 290:	80 81       	ld	r24, Z
 292:	08 95       	ret

00000294 <USART_Transmit>:
void USART_Transmit(uint8_t data)
{
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 294:	20 91 00 01 	lds	r18, 0x0100
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (tmphead == USART_TxTail);
 29c:	90 91 01 01 	lds	r25, 0x0101
 2a0:	29 17       	cp	r18, r25
 2a2:	e1 f3       	breq	.-8      	; 0x29c <USART_Transmit+0x8>
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
 2a4:	e2 e0       	ldi	r30, 0x02	; 2
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	e2 0f       	add	r30, r18
 2aa:	f1 1d       	adc	r31, r1
 2ac:	80 83       	st	Z, r24
	/* Store new index */
	USART_TxHead = tmphead;               
 2ae:	20 93 00 01 	sts	0x0100, r18
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);                    
 2b2:	e1 ec       	ldi	r30, 0xC1	; 193
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	80 83       	st	Z, r24
}
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
