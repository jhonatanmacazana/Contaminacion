
v4_CO2_MP_BT_MUX_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00000d06  00000d9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  008001fe  008001fe  00000e98  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  0000196f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003f4  00000000  00000000  00001b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001112  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000726  00000000  00000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000154e  00000000  00000000  0000379b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  00004cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000550  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000058f  00000000  00000000  0000555c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000156  00000000  00000000  00005aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000190  00000000  00000000  00005c41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__vector_18>
  4c:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3f       	cpi	r26, 0xFE	; 254
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	ae ef       	ldi	r26, 0xFE	; 254
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 81 06 	jmp	0xd02	; 0xd02 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

/* Nivel de bateria */
uint16_t bateria;

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	key = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 39 02 	sts	0x0239, r24
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:



int main(void)
{
  c4:	6f 92       	push	r6
  c6:	7f 92       	push	r7
  c8:	8f 92       	push	r8
  ca:	9f 92       	push	r9
  cc:	af 92       	push	r10
  ce:	bf 92       	push	r11
  d0:	cf 92       	push	r12
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
	/* Comunicación con sensores y BT */
	USART_Init(MYUBRR);		// Configura UART
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <USART_Init>
	MUX_INIT();				// Pines del Mux como salida
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	80 6e       	ori	r24, 0xE0	; 224
  ea:	8a b9       	out	0x0a, r24	; 10
	
	/* Interfaz: LCD & boton */
	I2C_Init();				// 10 kHz
  ec:	0e 94 5e 03 	call	0x6bc	; 0x6bc <I2C_Init>
	LCD_Init();				// LCD On. Cursor off
  f0:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_Init>
	button_Init();			// Int0. Boton como salida
  f4:	0e 94 9c 01 	call	0x338	; 0x338 <button_Init>
	
	/* Nivel de Batería */
	ADC_Init();				// Conversion ADC
  f8:	0e 94 4d 01 	call	0x29a	; 0x29a <ADC_Init>
	RGBLed_Init();			// Indicador
  fc:	0e 94 3a 04 	call	0x874	; 0x874 <RGBLed_Init>
	
	/* Control de tiempos */
	Timer_Init();
 100:	0e 94 b4 01 	call	0x368	; 0x368 <Timer_Init>
	/* Debug */
	LED_INIT();				// Led como salida
 104:	21 9a       	sbi	0x04, 1	; 4
	
	sei();					// Habilita IRQs
 106:	78 94       	sei

	/* Cambio de modo */
	MPswitchMode(PASSIVE_MODE);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 bb 04 	call	0x976	; 0x976 <MPswitchMode>
	COswitchMode(QA_MODE);
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 3a 05 	call	0xa74	; 0xa74 <COswitchMode>
	
	/* Mensajes iniciales por LCD */
	LCD_MensajeInicial();		// Inicializando...
 114:	0e 94 39 02 	call	0x472	; 0x472 <LCD_MensajeInicial>
	LCD_MensajeTiempo(4);		// Calentando. Tiempo restante en segundos
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_MensajeTiempo>
	
	/* Reinicia el control de timers para los dispositivos */
	setTime(TIMER_LCD, 0);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>
	setTime(TIMER_ADC, 0);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>
	setTime(TIMER_BT, 0);
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>
	setTime(TIMER_GLOBAL, 0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>
	
			/* CO2 */
			DATA_CO2 = CO2getData();
			
			/* MP */
			MPgetData(DATA_MP);
 148:	c1 e3       	ldi	r28, 0x31	; 49
 14a:	d2 e0       	ldi	r29, 0x02	; 2
			DATA_CO = COgetData();

			/* Bluetooth */
			if (conexion_bt == 1)
			{
				Flag_Ack = 1;
 14c:	11 e0       	ldi	r17, 0x01	; 1
				Mux_Channel(CHANNEL_BT);
				USART_Transmit(DATA_CO2>>8);
				USART_Transmit(DATA_CO2);
 14e:	0f 2e       	mov	r0, r31
 150:	f5 e3       	ldi	r31, 0x35	; 53
 152:	ef 2e       	mov	r14, r31
 154:	f2 e0       	ldi	r31, 0x02	; 2
 156:	ff 2e       	mov	r15, r31
 158:	f0 2d       	mov	r31, r0
				USART_Transmit(DATA_MP[0]);
				USART_Transmit(DATA_MP[1]);
 15a:	6e 01       	movw	r12, r28
 15c:	08 94       	sec
 15e:	c1 1c       	adc	r12, r1
 160:	d1 1c       	adc	r13, r1
				USART_Transmit(DATA_MP[2]);
 162:	aa 24       	eor	r10, r10
 164:	bb 24       	eor	r11, r11
 166:	68 94       	set
 168:	a1 f8       	bld	r10, 1
 16a:	ac 0e       	add	r10, r28
 16c:	bd 1e       	adc	r11, r29
				USART_Transmit(DATA_MP[3]);
 16e:	0f 2e       	mov	r0, r31
 170:	f3 e0       	ldi	r31, 0x03	; 3
 172:	8f 2e       	mov	r8, r31
 174:	99 24       	eor	r9, r9
 176:	f0 2d       	mov	r31, r0
 178:	8c 0e       	add	r8, r28
 17a:	9d 1e       	adc	r9, r29
				USART_Transmit(DATA_CO>>8);
				USART_Transmit(DATA_CO);
 17c:	0f 2e       	mov	r0, r31
 17e:	fe e2       	ldi	r31, 0x2E	; 46
 180:	6f 2e       	mov	r6, r31
 182:	f2 e0       	ldi	r31, 0x02	; 2
 184:	7f 2e       	mov	r7, r31
 186:	f0 2d       	mov	r31, r0
	setTime(TIMER_GLOBAL, 0);
	
	while (1) 
	{
		/* Sensores */
		if(key == 1)
 188:	80 91 39 02 	lds	r24, 0x0239
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	c9 f5       	brne	.+114    	; 0x202 <main+0x13e>
		{
			key = 0;
 190:	10 92 39 02 	sts	0x0239, r1
	
			/* CO2 */
			DATA_CO2 = CO2getData();
 194:	0e 94 63 04 	call	0x8c6	; 0x8c6 <CO2getData>
 198:	90 93 36 02 	sts	0x0236, r25
 19c:	80 93 35 02 	sts	0x0235, r24
			
			/* MP */
			MPgetData(DATA_MP);
 1a0:	ce 01       	movw	r24, r28
 1a2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MPgetData>
			
			/* CO */
			DATA_CO = COgetData();
 1a6:	0e 94 5f 05 	call	0xabe	; 0xabe <COgetData>
 1aa:	90 93 2f 02 	sts	0x022F, r25
 1ae:	80 93 2e 02 	sts	0x022E, r24

			/* Bluetooth */
			if (conexion_bt == 1)
 1b2:	80 91 25 02 	lds	r24, 0x0225
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	21 f5       	brne	.+72     	; 0x202 <main+0x13e>
			{
				Flag_Ack = 1;
 1ba:	10 93 30 02 	sts	0x0230, r17
				Mux_Channel(CHANNEL_BT);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 a3 01 	call	0x346	; 0x346 <Mux_Channel>
				USART_Transmit(DATA_CO2>>8);
 1c4:	80 91 36 02 	lds	r24, 0x0236
 1c8:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
				USART_Transmit(DATA_CO2);
 1cc:	f7 01       	movw	r30, r14
 1ce:	80 81       	ld	r24, Z
 1d0:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
				USART_Transmit(DATA_MP[0]);
 1d4:	88 81       	ld	r24, Y
 1d6:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
				USART_Transmit(DATA_MP[1]);
 1da:	f6 01       	movw	r30, r12
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
				USART_Transmit(DATA_MP[2]);
 1e2:	f5 01       	movw	r30, r10
 1e4:	80 81       	ld	r24, Z
 1e6:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
				USART_Transmit(DATA_MP[3]);
 1ea:	f4 01       	movw	r30, r8
 1ec:	80 81       	ld	r24, Z
 1ee:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
				USART_Transmit(DATA_CO>>8);
 1f2:	80 91 2f 02 	lds	r24, 0x022F
 1f6:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
				USART_Transmit(DATA_CO);
 1fa:	f3 01       	movw	r30, r6
 1fc:	80 81       	ld	r24, Z
 1fe:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
			}
		}
		
		
		/* Bateria */
		time_adc = getTime(TIMER_ADC);
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTime>
 208:	90 93 2d 02 	sts	0x022D, r25
 20c:	80 93 2c 02 	sts	0x022C, r24
		if (time_adc >= 60)
 210:	8c 33       	cpi	r24, 0x3C	; 60
 212:	91 05       	cpc	r25, r1
 214:	58 f1       	brcs	.+86     	; 0x26c <main+0x1a8>
		{
			ADC_Start();
 216:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ADC_Start>
			setTime(TIMER_ADC, 0);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>
			bateria = ADC_GetValue();
 224:	0e 94 86 01 	call	0x30c	; 0x30c <ADC_GetValue>
 228:	90 93 2b 02 	sts	0x022B, r25
 22c:	80 93 2a 02 	sts	0x022A, r24
			if (bateria >=850){ RGBLed_Color(GREEN);}
 230:	f3 e0       	ldi	r31, 0x03	; 3
 232:	82 35       	cpi	r24, 0x52	; 82
 234:	9f 07       	cpc	r25, r31
 236:	18 f0       	brcs	.+6      	; 0x23e <main+0x17a>
 238:	81 2f       	mov	r24, r17
 23a:	0e 94 41 04 	call	0x882	; 0x882 <RGBLed_Color>
			if ((bateria >=200)&(bateria<850)){ RGBLed_Color(YELLOW);}
 23e:	80 91 2a 02 	lds	r24, 0x022A
 242:	90 91 2b 02 	lds	r25, 0x022B
 246:	88 5c       	subi	r24, 0xC8	; 200
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	22 e0       	ldi	r18, 0x02	; 2
 24c:	8a 38       	cpi	r24, 0x8A	; 138
 24e:	92 07       	cpc	r25, r18
 250:	18 f4       	brcc	.+6      	; 0x258 <main+0x194>
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	0e 94 41 04 	call	0x882	; 0x882 <RGBLed_Color>
			if (bateria <200){ RGBLed_Color(RED);}
 258:	80 91 2a 02 	lds	r24, 0x022A
 25c:	90 91 2b 02 	lds	r25, 0x022B
 260:	88 3c       	cpi	r24, 0xC8	; 200
 262:	91 05       	cpc	r25, r1
 264:	18 f4       	brcc	.+6      	; 0x26c <main+0x1a8>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 41 04 	call	0x882	; 0x882 <RGBLed_Color>
		}
		
		/* LCD */
		LCD_MensajePrincipal();
 26c:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_MensajePrincipal>
		
		/* Mensaje por desconexion */
		time_bt = getTime(TIMER_BT);
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTime>
 276:	90 93 29 02 	sts	0x0229, r25
 27a:	80 93 28 02 	sts	0x0228, r24
		if (time_bt == 20)
 27e:	84 31       	cpi	r24, 0x14	; 20
 280:	91 05       	cpc	r25, r1
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x1c2>
 284:	81 cf       	rjmp	.-254    	; 0x188 <main+0xc4>
		{
			setTime(TIMER_BT, 0);
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>
			LCD_MensajeConexion(conexion_bt);		// Muestra mensaje por 3 segundos
 290:	80 91 25 02 	lds	r24, 0x0225
 294:	0e 94 33 03 	call	0x666	; 0x666 <LCD_MensajeConexion>
 298:	77 cf       	rjmp	.-274    	; 0x188 <main+0xc4>

0000029a <ADC_Init>:
Returns:  none
*************************************************************************/
void ADC_Init(void)
{
	/* Voltage Reference = AVCC */
	ADMUX |= (1<<REFS0)|(ADC_CHANNEL<<MUX0);
 29a:	ec e7       	ldi	r30, 0x7C	; 124
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	81 64       	ori	r24, 0x41	; 65
 2a2:	80 83       	st	Z, r24
	#if ADC_MODE == EIGHTBIT
	ADMUX |= (1<<ADLAR); 	// Adjust the bits to the left
	#endif

	/* ADC Enable, ADC Interrupt Enable, Prescaler predefined to work at 125 KHz */
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(ADC_PRESC<<ADPS0);
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	8e 68       	ori	r24, 0x8E	; 142
 2ac:	80 83       	st	Z, r24
}
 2ae:	08 95       	ret

000002b0 <ADC_Start>:

void ADC_Start()
{
	/* Activa ADC */
	ADCSRA |= (1<<ADSC);
 2b0:	ea e7       	ldi	r30, 0x7A	; 122
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	80 83       	st	Z, r24
	/* Cambia de estadp*/
	ADC_status = ADC_WAIT;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 10 02 	sts	0x0210, r24
}
 2c0:	08 95       	ret

000002c2 <__vector_21>:
Interrupt Vector for the ADC.
If the conversion is ready this ISR will execute. Saves the data and
change the index of the ADC Buffer.
*************************************************************************/
ISR(ADC_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	/* ADC Value */
	#if ADC_MODE == TENBIT
	uint16_t temp;
	temp = ADC;
 2d4:	80 91 78 00 	lds	r24, 0x0078
 2d8:	90 91 79 00 	lds	r25, 0x0079
	#endif
	
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (ADC_Head + 1) & ADC_BUFFER_MASK;
 2dc:	e0 91 fe 01 	lds	r30, 0x01FE
 2e0:	ef 5f       	subi	r30, 0xFF	; 255
 2e2:	e7 70       	andi	r30, 0x07	; 7
	
	/* Store new index */
	ADC_Head = tmphead;
 2e4:	e0 93 fe 01 	sts	0x01FE, r30
	
	/* Store the data in the buffer */
	ADC_Buffer[tmphead] = temp;
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	e0 50       	subi	r30, 0x00	; 0
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	80 83       	st	Z, r24

	/* Change the current state */
	ADC_status = ADC_RDY;
 2f6:	10 92 10 02 	sts	0x0210, r1
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <ADC_GetValue>:
*************************************************************************/
#if ADC_MODE == TENBIT
uint16_t ADC_GetValue(void)
{
	/*Espera a nueva data*/
	while(ADC_Head == ADC_Tail){}
 30c:	90 91 fe 01 	lds	r25, 0x01FE
 310:	80 91 ff 01 	lds	r24, 0x01FF
 314:	98 17       	cp	r25, r24
 316:	d1 f3       	breq	.-12     	; 0x30c <ADC_GetValue>
	uint8_t tmptail;
	
	/* Calcula el indice */
	tmptail = (ADC_Tail + 1) & ADC_BUFFER_MASK;
 318:	80 91 ff 01 	lds	r24, 0x01FF
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	87 70       	andi	r24, 0x07	; 7
	/* Almacena nuevo indice */
	ADC_Tail = tmptail;
 320:	80 93 ff 01 	sts	0x01FF, r24
	/* Devuelve el valor */
	return ADC_Buffer[ADC_Tail];
 324:	e0 91 ff 01 	lds	r30, 0x01FF
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	e0 50       	subi	r30, 0x00	; 0
 330:	fe 4f       	sbci	r31, 0xFE	; 254
}
 332:	80 81       	ld	r24, Z
 334:	91 81       	ldd	r25, Z+1	; 0x01
 336:	08 95       	ret

00000338 <button_Init>:
/*      Boton de cambio de estado     */
/**************************************/
void button_Init(void)
{
	/* Rising Edge */
	EICRA |= (2 << ISC00);
 338:	e9 e6       	ldi	r30, 0x69	; 105
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	80 83       	st	Z, r24
	/* Activa INT0*/
	EIMSK |= (1 << INT0);
 342:	e8 9a       	sbi	0x1d, 0	; 29
}
 344:	08 95       	ret

00000346 <Mux_Channel>:
/**************************************/
/*  			  Mux 		 		  */
/**************************************/
void Mux_Channel( uint8_t channel)
{
	MUX_ENABLE();
 346:	5f 98       	cbi	0x0b, 7	; 11
	MUX_CLEAR();
 348:	9b b1       	in	r25, 0x0b	; 11
 34a:	9f 79       	andi	r25, 0x9F	; 159
 34c:	9b b9       	out	0x0b, r25	; 11
	switch (channel)
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	31 f0       	breq	.+12     	; 0x35e <Mux_Channel+0x18>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	31 f0       	breq	.+12     	; 0x362 <Mux_Channel+0x1c>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	31 f4       	brne	.+12     	; 0x366 <Mux_Channel+0x20>
	{
	case 0:
		break;
	case 1:
		MUX_SEL0();
 35a:	5d 9a       	sbi	0x0b, 5	; 11
		break;
 35c:	08 95       	ret
	case 2:
		MUX_SEL1();
 35e:	5e 9a       	sbi	0x0b, 6	; 11
		break;
 360:	08 95       	ret
	case 3:
		MUX_SEL0();
 362:	5d 9a       	sbi	0x0b, 5	; 11
		MUX_SEL1();
 364:	5e 9a       	sbi	0x0b, 6	; 11
 366:	08 95       	ret

00000368 <Timer_Init>:
uint16_t segundos, segundosLCD, segundosADC, segundosBT;

void Timer_Init(void)
{
	/* Modo CTC. Prescaler = 1024 */
	TCCR1B = (1 << WGM12) | (5 << CS10);
 368:	8d e0       	ldi	r24, 0x0D	; 13
 36a:	80 93 81 00 	sts	0x0081, r24

	/* Reinicia la cuenta */
	TCNT1 = 0;
 36e:	10 92 85 00 	sts	0x0085, r1
 372:	10 92 84 00 	sts	0x0084, r1

	/* Comparador = 1 seg */
	OCR1A = 976;
 376:	80 ed       	ldi	r24, 0xD0	; 208
 378:	93 e0       	ldi	r25, 0x03	; 3
 37a:	90 93 89 00 	sts	0x0089, r25
 37e:	80 93 88 00 	sts	0x0088, r24

	/* Habilita la interrupciÃ³n por comparaciÃ³n*/
	TIMSK1 |= (1 << OCIE1A);
 382:	ef e6       	ldi	r30, 0x6F	; 111
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	80 83       	st	Z, r24

	/* Limpia banderas de interrupcion*/
	TIFR1 |= (1 << OCF1A);
 38c:	b1 9a       	sbi	0x16, 1	; 22

}
 38e:	08 95       	ret

00000390 <setTime>:

void setTime(uint8_t type, uint16_t newtime)
{
	switch (type)
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	61 f0       	breq	.+24     	; 0x3ac <setTime+0x1c>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	28 f0       	brcs	.+10     	; 0x3a2 <setTime+0x12>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	69 f0       	breq	.+26     	; 0x3b6 <setTime+0x26>
 39c:	83 30       	cpi	r24, 0x03	; 3
 39e:	a1 f4       	brne	.+40     	; 0x3c8 <setTime+0x38>
 3a0:	0f c0       	rjmp	.+30     	; 0x3c0 <setTime+0x30>
	{
	case TIMER_GLOBAL:
		segundos = newtime;
 3a2:	70 93 3d 02 	sts	0x023D, r23
 3a6:	60 93 3c 02 	sts	0x023C, r22
		break;
 3aa:	08 95       	ret

	case TIMER_LCD:
		segundosLCD = newtime;
 3ac:	70 93 3b 02 	sts	0x023B, r23
 3b0:	60 93 3a 02 	sts	0x023A, r22
		break;
 3b4:	08 95       	ret

	case TIMER_ADC:
		segundosADC = newtime;
 3b6:	70 93 41 02 	sts	0x0241, r23
 3ba:	60 93 40 02 	sts	0x0240, r22
		break;
 3be:	08 95       	ret

	case TIMER_BT:
		segundosBT = newtime;
 3c0:	70 93 3f 02 	sts	0x023F, r23
 3c4:	60 93 3e 02 	sts	0x023E, r22
 3c8:	08 95       	ret

000003ca <getTime>:
	}
}

uint16_t getTime(uint8_t type)
{
	switch (type)
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <getTime+0x1c>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	28 f0       	brcs	.+10     	; 0x3dc <getTime+0x12>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	69 f0       	breq	.+26     	; 0x3f0 <getTime+0x26>
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	a9 f4       	brne	.+42     	; 0x404 <getTime+0x3a>
 3da:	0f c0       	rjmp	.+30     	; 0x3fa <getTime+0x30>
	{
	case TIMER_GLOBAL:
		return segundos;
 3dc:	20 91 3c 02 	lds	r18, 0x023C
 3e0:	30 91 3d 02 	lds	r19, 0x023D
 3e4:	11 c0       	rjmp	.+34     	; 0x408 <getTime+0x3e>
		break;

	case TIMER_LCD:
		return segundosLCD;
 3e6:	20 91 3a 02 	lds	r18, 0x023A
 3ea:	30 91 3b 02 	lds	r19, 0x023B
 3ee:	0c c0       	rjmp	.+24     	; 0x408 <getTime+0x3e>
		break;

	case TIMER_ADC:
		return segundosADC;
 3f0:	20 91 40 02 	lds	r18, 0x0240
 3f4:	30 91 41 02 	lds	r19, 0x0241
 3f8:	07 c0       	rjmp	.+14     	; 0x408 <getTime+0x3e>
		break;

	case TIMER_BT:
		return segundosBT;
 3fa:	20 91 3e 02 	lds	r18, 0x023E
 3fe:	30 91 3f 02 	lds	r19, 0x023F
 402:	02 c0       	rjmp	.+4      	; 0x408 <getTime+0x3e>
		break;

	default:
		return 0;
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
}
 408:	82 2f       	mov	r24, r18
 40a:	93 2f       	mov	r25, r19
 40c:	08 95       	ret

0000040e <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	8f 93       	push	r24
 41a:	9f 93       	push	r25
	segundos++;
 41c:	80 91 3c 02 	lds	r24, 0x023C
 420:	90 91 3d 02 	lds	r25, 0x023D
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	90 93 3d 02 	sts	0x023D, r25
 42a:	80 93 3c 02 	sts	0x023C, r24
	segundosLCD++;
 42e:	80 91 3a 02 	lds	r24, 0x023A
 432:	90 91 3b 02 	lds	r25, 0x023B
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	90 93 3b 02 	sts	0x023B, r25
 43c:	80 93 3a 02 	sts	0x023A, r24
	segundosADC++;
 440:	80 91 40 02 	lds	r24, 0x0240
 444:	90 91 41 02 	lds	r25, 0x0241
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	90 93 41 02 	sts	0x0241, r25
 44e:	80 93 40 02 	sts	0x0240, r24
	segundosBT++;
 452:	80 91 3e 02 	lds	r24, 0x023E
 456:	90 91 3f 02 	lds	r25, 0x023F
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	90 93 3f 02 	sts	0x023F, r25
 460:	80 93 3e 02 	sts	0x023E, r24
}
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <LCD_MensajeInicial>:

/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	14 e0       	ldi	r17, 0x04	; 4
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Up();
		LCD_String("Inicializando   ");
 47e:	0f 2e       	mov	r0, r31
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ef 2e       	mov	r14, r31
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	ff 2e       	mov	r15, r31
 488:	f0 2d       	mov	r31, r0
		LCD_GotoXY(0, 13);
		_delay_ms(200);
		LCD_String(".");
 48a:	c1 e1       	ldi	r28, 0x11	; 17
 48c:	d1 e0       	ldi	r29, 0x01	; 1
/**************************************/
void LCD_MensajeInicial(void)
{
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Up();
 48e:	80 e8       	ldi	r24, 0x80	; 128
 490:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("Inicializando   ");
 494:	c7 01       	movw	r24, r14
 496:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_GotoXY(0, 13);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	6d e0       	ldi	r22, 0x0D	; 13
 49e:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_GotoXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a2:	8f e4       	ldi	r24, 0x4F	; 79
 4a4:	93 ec       	ldi	r25, 0xC3	; 195
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <LCD_MensajeInicial+0x34>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <LCD_MensajeInicial+0x3a>
 4ac:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 4ae:	ce 01       	movw	r24, r28
 4b0:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 4b4:	8f e4       	ldi	r24, 0x4F	; 79
 4b6:	93 ec       	ldi	r25, 0xC3	; 195
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_MensajeInicial+0x46>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_MensajeInicial+0x4c>
 4be:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 4c0:	ce 01       	movw	r24, r28
 4c2:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 4c6:	8f e4       	ldi	r24, 0x4F	; 79
 4c8:	93 ec       	ldi	r25, 0xC3	; 195
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_MensajeInicial+0x58>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCD_MensajeInicial+0x5e>
 4d0:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 4d2:	ce 01       	movw	r24, r28
 4d4:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 4d8:	8f e4       	ldi	r24, 0x4F	; 79
 4da:	93 ec       	ldi	r25, 0xC3	; 195
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <LCD_MensajeInicial+0x6a>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <LCD_MensajeInicial+0x70>
 4e2:	00 00       	nop
 4e4:	11 50       	subi	r17, 0x01	; 1
/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
	for (uint8_t i = 0; i < 4; i++)
 4e6:	99 f6       	brne	.-90     	; 0x48e <LCD_MensajeInicial+0x1c>
		_delay_ms(200);
		LCD_String(".");
		_delay_ms(200);
	}

}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	08 95       	ret

000004f4 <LCD_MensajeTiempo>:

void LCD_MensajeTiempo(uint16_t cuenta)
{
 4f4:	cf 92       	push	r12
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	8c 01       	movw	r16, r24
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>

	LCD_Up();
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
	LCD_String("Calentando       ");
 516:	83 e1       	ldi	r24, 0x13	; 19
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
	while (tiempo != cuenta)
 51e:	01 15       	cp	r16, r1
 520:	11 05       	cpc	r17, r1
 522:	29 f1       	breq	.+74     	; 0x56e <LCD_MensajeTiempo+0x7a>
	{
		tiempo = getTime(TIMER_LCD);
		LCD_Down();
		LCD_Number(cuenta - tiempo);
		LCD_String("        ");
 524:	0f 2e       	mov	r0, r31
 526:	f5 e2       	ldi	r31, 0x25	; 37
 528:	ef 2e       	mov	r14, r31
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	ff 2e       	mov	r15, r31
 52e:	f0 2d       	mov	r31, r0
		LCD_GotoXY(1, 3);
		LCD_String(" Seg. Rest.");
 530:	0f 2e       	mov	r0, r31
 532:	fe e2       	ldi	r31, 0x2E	; 46
 534:	cf 2e       	mov	r12, r31
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	df 2e       	mov	r13, r31
 53a:	f0 2d       	mov	r31, r0

	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
	{
		tiempo = getTime(TIMER_LCD);
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTime>
 542:	ec 01       	movw	r28, r24
		LCD_Down();
 544:	80 ec       	ldi	r24, 0xC0	; 192
 546:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_Number(cuenta - tiempo);
 54a:	c8 01       	movw	r24, r16
 54c:	8c 1b       	sub	r24, r28
 54e:	9d 0b       	sbc	r25, r29
 550:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_Number>
		LCD_String("        ");
 554:	c7 01       	movw	r24, r14
 556:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_GotoXY(1, 3);
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	63 e0       	ldi	r22, 0x03	; 3
 55e:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_GotoXY>
		LCD_String(" Seg. Rest.");
 562:	c6 01       	movw	r24, r12
 564:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);

	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
 568:	0c 17       	cp	r16, r28
 56a:	1d 07       	cpc	r17, r29
 56c:	39 f7       	brne	.-50     	; 0x53c <LCD_MensajeTiempo+0x48>
		LCD_String("        ");
		LCD_GotoXY(1, 3);
		LCD_String(" Seg. Rest.");
	}

}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	08 95       	ret

00000580 <LCD_MensajePrincipal>:


void LCD_MensajePrincipal(void)
{
	uint16_t tiempo = getTime(TIMER_LCD);
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTime>
	if (tiempo < TIEMPO_SENSORES)
 586:	85 30       	cpi	r24, 0x05	; 5
 588:	91 05       	cpc	r25, r1
 58a:	78 f4       	brcc	.+30     	; 0x5aa <LCD_MensajePrincipal+0x2a>
	{
		LCD_Up();
 58c:	80 e8       	ldi	r24, 0x80	; 128
 58e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("   Medidor de    ");
 592:	8a e3       	ldi	r24, 0x3A	; 58
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_Down();
 59a:	80 ec       	ldi	r24, 0xC0	; 192
 59c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("calidad del aire ");
 5a0:	8c e4       	ldi	r24, 0x4C	; 76
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 5a8:	08 95       	ret
	}
	else if (tiempo < (2 * TIEMPO_SENSORES) )
 5aa:	8a 30       	cpi	r24, 0x0A	; 10
 5ac:	91 05       	cpc	r25, r1
 5ae:	98 f4       	brcc	.+38     	; 0x5d6 <LCD_MensajePrincipal+0x56>
	{
		LCD_Up();
 5b0:	80 e8       	ldi	r24, 0x80	; 128
 5b2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("CO2             ");
 5b6:	8e e5       	ldi	r24, 0x5E	; 94
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_Down();
 5be:	80 ec       	ldi	r24, 0xC0	; 192
 5c0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_Number(300);
 5c4:	8c e2       	ldi	r24, 0x2C	; 44
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_Number>
		LCD_String(" ppm             ");
 5cc:	8f e6       	ldi	r24, 0x6F	; 111
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 5d4:	08 95       	ret
	}
	else if (tiempo < (3 * TIEMPO_SENSORES) )
 5d6:	8f 30       	cpi	r24, 0x0F	; 15
 5d8:	91 05       	cpc	r25, r1
 5da:	98 f4       	brcc	.+38     	; 0x602 <LCD_MensajePrincipal+0x82>
	{
		LCD_Up();
 5dc:	80 e8       	ldi	r24, 0x80	; 128
 5de:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("PM 2.5          ");
 5e2:	81 e8       	ldi	r24, 0x81	; 129
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_Down();
 5ea:	80 ec       	ldi	r24, 0xC0	; 192
 5ec:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_Number(400);
 5f0:	80 e9       	ldi	r24, 0x90	; 144
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_Number>
		LCD_String(" ppm            ");
 5f8:	82 e9       	ldi	r24, 0x92	; 146
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 600:	08 95       	ret
	}
	else if (tiempo < (4 * TIEMPO_SENSORES))
 602:	84 31       	cpi	r24, 0x14	; 20
 604:	91 05       	cpc	r25, r1
 606:	98 f4       	brcc	.+38     	; 0x62e <LCD_MensajePrincipal+0xae>
	{
		LCD_Up();
 608:	80 e8       	ldi	r24, 0x80	; 128
 60a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("PM 10           ");
 60e:	83 ea       	ldi	r24, 0xA3	; 163
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_Down();
 616:	80 ec       	ldi	r24, 0xC0	; 192
 618:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_Number(500);
 61c:	84 ef       	ldi	r24, 0xF4	; 244
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_Number>
		LCD_String(" ppm            ");
 624:	82 e9       	ldi	r24, 0x92	; 146
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 62c:	08 95       	ret
	}
	else if (tiempo < (5 * TIEMPO_SENSORES) )
 62e:	89 31       	cpi	r24, 0x19	; 25
 630:	91 05       	cpc	r25, r1
 632:	98 f4       	brcc	.+38     	; 0x65a <LCD_MensajePrincipal+0xda>
	{
		LCD_Up();
 634:	80 e8       	ldi	r24, 0x80	; 128
 636:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("CO             ");
 63a:	84 eb       	ldi	r24, 0xB4	; 180
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_Down();
 642:	80 ec       	ldi	r24, 0xC0	; 192
 644:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_Number(600);
 648:	88 e5       	ldi	r24, 0x58	; 88
 64a:	92 e0       	ldi	r25, 0x02	; 2
 64c:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_Number>
		LCD_String(" ppm            ");
 650:	82 e9       	ldi	r24, 0x92	; 146
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 658:	08 95       	ret
	}
	else
	{
		setTime(TIMER_LCD, 0);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	0e 94 c8 01 	call	0x390	; 0x390 <setTime>
 664:	08 95       	ret

00000666 <LCD_MensajeConexion>:
	}
}

void LCD_MensajeConexion(uint8_t conexion)
{
	if (conexion == 0)
 666:	88 23       	and	r24, r24
 668:	79 f4       	brne	.+30     	; 0x688 <LCD_MensajeConexion+0x22>
	{
		/* Si no hay conexion */
		LCD_Up();
 66a:	80 e8       	ldi	r24, 0x80	; 128
 66c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("Estado:         ");
 670:	84 ec       	ldi	r24, 0xC4	; 196
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_Down();
 678:	80 ec       	ldi	r24, 0xC0	; 192
 67a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("Desconectado    ");
 67e:	85 ed       	ldi	r24, 0xD5	; 213
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 686:	10 c0       	rjmp	.+32     	; 0x6a8 <LCD_MensajeConexion+0x42>
	}
	else if (conexion == 1)
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	71 f4       	brne	.+28     	; 0x6a8 <LCD_MensajeConexion+0x42>
	{
		/* Si hay conexion */
		LCD_Up();
 68c:	80 e8       	ldi	r24, 0x80	; 128
 68e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("Estado:         ");
 692:	84 ec       	ldi	r24, 0xC4	; 196
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
		LCD_Down();
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
		LCD_String("Conectado    ");
 6a0:	86 ee       	ldi	r24, 0xE6	; 230
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
 6a8:	8f eb       	ldi	r24, 0xBF	; 191
 6aa:	97 e2       	ldi	r25, 0x27	; 39
 6ac:	a9 e0       	ldi	r26, 0x09	; 9
 6ae:	81 50       	subi	r24, 0x01	; 1
 6b0:	90 40       	sbci	r25, 0x00	; 0
 6b2:	a0 40       	sbci	r26, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <LCD_MensajeConexion+0x48>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <LCD_MensajeConexion+0x52>
 6b8:	00 00       	nop

	}
	_delay_ms(3000);
 6ba:	08 95       	ret

000006bc <I2C_Init>:
Returns:  none
*************************************************************************/
void I2C_Init(void)
{
	/* Set SCL to 50 kHz. Macro definition */
	TWSR = 0x00;			// Prescaler = 1
 6bc:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = MYTWBR;			// Macro 72
 6c0:	8a e2       	ldi	r24, 0x2A	; 42
 6c2:	80 93 b8 00 	sts	0x00B8, r24
	
	/* Enable TWI */
	TWCR = (1 << TWEN);
 6c6:	84 e0       	ldi	r24, 0x04	; 4
 6c8:	80 93 bc 00 	sts	0x00BC, r24
}
 6cc:	08 95       	ret

000006ce <I2C_Start>:
Returns:  none
*************************************************************************/
void I2C_Start(uint8_t address)
{
	/* Send Start Condition*/
	TWCR |= (1 << TWINT) | (1 << TWSTA);
 6ce:	ec eb       	ldi	r30, 0xBC	; 188
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	90 81       	ld	r25, Z
 6d4:	90 6a       	ori	r25, 0xA0	; 160
 6d6:	90 83       	st	Z, r25
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 6d8:	90 81       	ld	r25, Z
 6da:	99 23       	and	r25, r25
 6dc:	ec f7       	brge	.-6      	; 0x6d8 <I2C_Start+0xa>
	
	/* Send the address and W/R condition */
	TWDR = address;
 6de:	80 93 bb 00 	sts	0x00BB, r24
	TWCR |= (1 << TWINT) | (1 << TWEA);
 6e2:	ec eb       	ldi	r30, 0xBC	; 188
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	80 6c       	ori	r24, 0xC0	; 192
 6ea:	80 83       	st	Z, r24
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 6ec:	80 81       	ld	r24, Z
 6ee:	88 23       	and	r24, r24
 6f0:	ec f7       	brge	.-6      	; 0x6ec <I2C_Start+0x1e>
}
 6f2:	08 95       	ret

000006f4 <I2C_Stop>:
Returns:  none
*************************************************************************/
void I2C_Stop(void)
{
	/* Send Stop Condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO);
 6f4:	ec eb       	ldi	r30, 0xBC	; 188
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	80 69       	ori	r24, 0x90	; 144
 6fc:	80 83       	st	Z, r24
}
 6fe:	08 95       	ret

00000700 <I2C_Transmit>:
Returns:  none
*************************************************************************/
void I2C_Transmit(uint8_t data)
{
	/* Send the Data */
	TWDR = data;
 700:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 704:	84 ec       	ldi	r24, 0xC4	; 196
 706:	80 93 bc 00 	sts	0x00BC, r24
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 70a:	ec eb       	ldi	r30, 0xBC	; 188
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	88 23       	and	r24, r24
 712:	ec f7       	brge	.-6      	; 0x70e <I2C_Transmit+0xe>
}
 714:	08 95       	ret

00000716 <sendData>:
Put a char on the LCD Display. 
Input:    data	char to be shown
Returns:  none
*************************************************************************/
void sendData(uint8_t data)
{
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	18 2f       	mov	r17, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 720:	8e e4       	ldi	r24, 0x4E	; 78
 722:	0e 94 67 03 	call	0x6ce	; 0x6ce <I2C_Start>
	
	/* Send Data. MS Nibble*/
	I2C_Transmit(bitmask = (data & 0xF0) | 0x08 | (1 << RS));
 726:	01 2f       	mov	r16, r17
 728:	00 7f       	andi	r16, 0xF0	; 240
 72a:	80 2f       	mov	r24, r16
 72c:	89 60       	ori	r24, 0x09	; 9
 72e:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 732:	0d 60       	ori	r16, 0x0D	; 13
 734:	80 2f       	mov	r24, r16
 736:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 73a:	80 2f       	mov	r24, r16
 73c:	89 7f       	andi	r24, 0xF9	; 249
 73e:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	
	/* Send Data. LS Nibble*/
	I2C_Transmit(bitmask = ((data << 4) & 0xF0) | 0x08 | (1 << RS));
 742:	c1 2f       	mov	r28, r17
 744:	d0 e0       	ldi	r29, 0x00	; 0
 746:	c2 95       	swap	r28
 748:	d2 95       	swap	r29
 74a:	d0 7f       	andi	r29, 0xF0	; 240
 74c:	dc 27       	eor	r29, r28
 74e:	c0 7f       	andi	r28, 0xF0	; 240
 750:	dc 27       	eor	r29, r28
 752:	9e 01       	movw	r18, r28
 754:	29 60       	ori	r18, 0x09	; 9
 756:	82 2f       	mov	r24, r18
 758:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 75c:	ce 01       	movw	r24, r28
 75e:	8d 60       	ori	r24, 0x0D	; 13
 760:	18 2f       	mov	r17, r24
 762:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 766:	81 2f       	mov	r24, r17
 768:	8b 7f       	andi	r24, 0xFB	; 251
 76a:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 76e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <I2C_Stop>
}
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	08 95       	ret

0000077c <LCD_String>:
Put a String on the LCD Display. 
Input:    arr1	String to be shown
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 782:	88 81       	ld	r24, Y
 784:	88 23       	and	r24, r24
 786:	31 f0       	breq	.+12     	; 0x794 <LCD_String+0x18>
/*************************************************************************
Put a String on the LCD Display. 
Input:    arr1	String to be shown
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
 788:	21 96       	adiw	r28, 0x01	; 1
{
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
	{
		sendData(*arr1);		// Send 1 char at the time
 78a:	0e 94 8b 03 	call	0x716	; 0x716 <sendData>
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 78e:	89 91       	ld	r24, Y+
 790:	88 23       	and	r24, r24
 792:	d9 f7       	brne	.-10     	; 0x78a <LCD_String+0xe>
	{
		sendData(*arr1);		// Send 1 char at the time
		arr1++;					// Increment the index
	}
}
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <LCD_Number>:
Put a Number on the LCD Display. 
Input:    numb	number to be shown
Returns:  none
*************************************************************************/
void LCD_Number(uint16_t numb)
{
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	00 d0       	rcall	.+0      	; 0x7a4 <LCD_Number+0xa>
 7a4:	00 d0       	rcall	.+0      	; 0x7a6 <LCD_Number+0xc>
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
	char array[4];				// 4 digits of the number. Change if needed
	itoa(numb, array, 10);		// Radix for the conversion: 10
 7aa:	8e 01       	movw	r16, r28
 7ac:	0f 5f       	subi	r16, 0xFF	; 255
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	b8 01       	movw	r22, r16
 7b2:	4a e0       	ldi	r20, 0x0A	; 10
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	0e 94 3c 06 	call	0xc78	; 0xc78 <itoa>
	LCD_String(array);			// Send the ASCII codes obtained from data
 7ba:	c8 01       	movw	r24, r16
 7bc:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_String>
	
}
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	08 95       	ret

000007d2 <sendCMD>:
Allows to write new commands to the LCD 
Input:    CMD	Command to be send
Returns:  none
*************************************************************************/
void sendCMD(uint8_t CMD)
{
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	18 2f       	mov	r17, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 7dc:	8e e4       	ldi	r24, 0x4E	; 78
 7de:	0e 94 67 03 	call	0x6ce	; 0x6ce <I2C_Start>
	
	/* Send commands. MS Nibble*/
	I2C_Transmit(bitmask = (CMD & 0xF0) | 0x08);
 7e2:	01 2f       	mov	r16, r17
 7e4:	00 7f       	andi	r16, 0xF0	; 240
 7e6:	80 2f       	mov	r24, r16
 7e8:	88 60       	ori	r24, 0x08	; 8
 7ea:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 7ee:	0c 60       	ori	r16, 0x0C	; 12
 7f0:	80 2f       	mov	r24, r16
 7f2:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 7f6:	80 2f       	mov	r24, r16
 7f8:	88 7f       	andi	r24, 0xF8	; 248
 7fa:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	
	/* Send commands. LS Nibble*/
	I2C_Transmit(bitmask = ((CMD << 4) & 0xF0) | 0x08);
 7fe:	c1 2f       	mov	r28, r17
 800:	d0 e0       	ldi	r29, 0x00	; 0
 802:	c2 95       	swap	r28
 804:	d2 95       	swap	r29
 806:	d0 7f       	andi	r29, 0xF0	; 240
 808:	dc 27       	eor	r29, r28
 80a:	c0 7f       	andi	r28, 0xF0	; 240
 80c:	dc 27       	eor	r29, r28
 80e:	9e 01       	movw	r18, r28
 810:	28 60       	ori	r18, 0x08	; 8
 812:	82 2f       	mov	r24, r18
 814:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 818:	ce 01       	movw	r24, r28
 81a:	8c 60       	ori	r24, 0x0C	; 12
 81c:	18 2f       	mov	r17, r24
 81e:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 822:	81 2f       	mov	r24, r17
 824:	8b 7f       	andi	r24, 0xFB	; 251
 826:	0e 94 80 03 	call	0x700	; 0x700 <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 82a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <I2C_Stop>
}
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	08 95       	ret

00000838 <LCD_GotoXY>:
Returns:  none
*************************************************************************/
void LCD_GotoXY (uint8_t row, uint8_t col)
{
	/* Change the cursor*/
	if (row == 1)
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	29 f4       	brne	.+10     	; 0x846 <LCD_GotoXY+0xe>
	sendCMD(LCD_ROW1 + col);
 83c:	86 2f       	mov	r24, r22
 83e:	80 58       	subi	r24, 0x80	; 128
 840:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
 844:	08 95       	ret
	if (row == 2)
 846:	82 30       	cpi	r24, 0x02	; 2
 848:	21 f4       	brne	.+8      	; 0x852 <LCD_GotoXY+0x1a>
	sendCMD(LCD_ROW2 + col);
 84a:	86 2f       	mov	r24, r22
 84c:	80 54       	subi	r24, 0x40	; 64
 84e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
 852:	08 95       	ret

00000854 <LCD_Init>:
Returns:  none
*************************************************************************/
void LCD_Init(void)
{
	/* Initialize LCD */
	sendCMD(LCD_8BIT);
 854:	83 e3       	ldi	r24, 0x33	; 51
 856:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
	sendCMD(LCD_4BIT);
 85a:	82 e3       	ldi	r24, 0x32	; 50
 85c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
	sendCMD(LCD_FUNCTION_4BIT_2LINES);
 860:	88 e2       	ldi	r24, 0x28	; 40
 862:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
	sendCMD(LCD_DISP_ON);
 866:	8c e0       	ldi	r24, 0x0C	; 12
 868:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
	sendCMD(LCD_CLR);
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendCMD>
}
 872:	08 95       	ret

00000874 <RGBLed_Init>:
Input:    none
Returns:  none
*************************************************************************/
void RGBLed_Init(void)
{
	RGB_CLEAR();										// Turn off the pins
 874:	8b b1       	in	r24, 0x0b	; 11
 876:	87 7c       	andi	r24, 0xC7	; 199
 878:	8b b9       	out	0x0b, r24	; 11
	DDR_RGB |= (1<<PIN_R)|(1<<PIN_G)|(1<<PIN_B);		// Pins as output
 87a:	8a b1       	in	r24, 0x0a	; 10
 87c:	88 63       	ori	r24, 0x38	; 56
 87e:	8a b9       	out	0x0a, r24	; 10
}
 880:	08 95       	ret

00000882 <RGBLed_Color>:
Input:    color 	color the led will shown
Returns:  none
*************************************************************************/
void RGBLed_Color(uint8_t color)
{
	RGB_CLEAR();
 882:	9b b1       	in	r25, 0x0b	; 11
 884:	97 7c       	andi	r25, 0xC7	; 199
 886:	9b b9       	out	0x0b, r25	; 11
	switch(color)
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	91 f0       	breq	.+36     	; 0x8b0 <RGBLed_Color+0x2e>
 88c:	83 30       	cpi	r24, 0x03	; 3
 88e:	28 f4       	brcc	.+10     	; 0x89a <RGBLed_Color+0x18>
 890:	88 23       	and	r24, r24
 892:	51 f0       	breq	.+20     	; 0x8a8 <RGBLed_Color+0x26>
 894:	81 30       	cpi	r24, 0x01	; 1
 896:	b1 f4       	brne	.+44     	; 0x8c4 <RGBLed_Color+0x42>
 898:	09 c0       	rjmp	.+18     	; 0x8ac <RGBLed_Color+0x2a>
 89a:	84 30       	cpi	r24, 0x04	; 4
 89c:	71 f0       	breq	.+28     	; 0x8ba <RGBLed_Color+0x38>
 89e:	84 30       	cpi	r24, 0x04	; 4
 8a0:	48 f0       	brcs	.+18     	; 0x8b4 <RGBLed_Color+0x32>
 8a2:	85 30       	cpi	r24, 0x05	; 5
 8a4:	79 f4       	brne	.+30     	; 0x8c4 <RGBLed_Color+0x42>
 8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <RGBLed_Color+0x3e>
	{
		case RED:
			RGB_RED();
 8a8:	5b 9a       	sbi	0x0b, 3	; 11
			break;
 8aa:	08 95       	ret
		case GREEN:
			RGB_GREEN();
 8ac:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 8ae:	08 95       	ret
		case BLUE:
			RGB_BLUE();
 8b0:	5d 9a       	sbi	0x0b, 5	; 11
			break;
 8b2:	08 95       	ret
		case YELLOW:
			RGB_GREEN();
 8b4:	5c 9a       	sbi	0x0b, 4	; 11
			RGB_RED();
 8b6:	5b 9a       	sbi	0x0b, 3	; 11
			break;
 8b8:	08 95       	ret
		case CYAN:
			RGB_BLUE();
 8ba:	5d 9a       	sbi	0x0b, 5	; 11
			RGB_GREEN();
 8bc:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 8be:	08 95       	ret
		case MAGENTA:
			RGB_BLUE();
 8c0:	5d 9a       	sbi	0x0b, 5	; 11
			RGB_RED();
 8c2:	5b 9a       	sbi	0x0b, 3	; 11
 8c4:	08 95       	ret

000008c6 <CO2getData>:
#include "UART.h"				// UART-HW
#include "comps.h"				// MUX 
#include <util/delay.h>			// Delay

uint16_t CO2getData()
{
 8c6:	ef 92       	push	r14
 8c8:	ff 92       	push	r15
 8ca:	0f 93       	push	r16
 8cc:	1f 93       	push	r17
 8ce:	df 93       	push	r29
 8d0:	cf 93       	push	r28
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
 8d6:	62 97       	sbiw	r28, 0x12	; 18
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	f8 94       	cli
 8dc:	de bf       	out	0x3e, r29	; 62
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	cd bf       	out	0x3d, r28	; 61
	/* Declaracion de variables */
	uint8_t gasCommand[9] = {GASCOMMAND1, GASCOMMAND2, GASCOMMAND3, GASCOMMAND4, GASCOMMAND5, GASCOMMAND6, GASCOMMAND7, GASCOMMAND8, GASCOMMAND9};
 8e2:	de 01       	movw	r26, r28
 8e4:	11 96       	adiw	r26, 0x01	; 1
 8e6:	e4 ef       	ldi	r30, 0xF4	; 244
 8e8:	f1 e0       	ldi	r31, 0x01	; 1
 8ea:	89 e0       	ldi	r24, 0x09	; 9
 8ec:	01 90       	ld	r0, Z+
 8ee:	0d 92       	st	X+, r0
 8f0:	81 50       	subi	r24, 0x01	; 1
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <CO2getData+0x26>
	uint8_t data[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8f4:	0f 2e       	mov	r0, r31
 8f6:	fa e0       	ldi	r31, 0x0A	; 10
 8f8:	ef 2e       	mov	r14, r31
 8fa:	ff 24       	eor	r15, r15
 8fc:	f0 2d       	mov	r31, r0
 8fe:	ec 0e       	add	r14, r28
 900:	fd 1e       	adc	r15, r29
 902:	89 e0       	ldi	r24, 0x09	; 9
 904:	f7 01       	movw	r30, r14
 906:	11 92       	st	Z+, r1
 908:	8a 95       	dec	r24
 90a:	e9 f7       	brne	.-6      	; 0x906 <__stack+0x7>
	uint16_t gasC = 0;
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	0e 94 a3 01 	call	0x346	; 0x346 <Mux_Channel>
 912:	8e 01       	movw	r16, r28
 914:	0f 5f       	subi	r16, 0xFF	; 255
 916:	1f 4f       	sbci	r17, 0xFF	; 255
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
	{
		USART_Transmit(gasCommand[i]);
 918:	f8 01       	movw	r30, r16
 91a:	81 91       	ld	r24, Z+
 91c:	8f 01       	movw	r16, r30
 91e:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
 922:	0e 15       	cp	r16, r14
 924:	1f 05       	cpc	r17, r15
 926:	c1 f7       	brne	.-16     	; 0x918 <__stack+0x19>
 928:	8e 01       	movw	r16, r28
 92a:	06 5f       	subi	r16, 0xF6	; 246
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
#include "sensors.h"			// Mnemonics
#include "UART.h"				// UART-HW
#include "comps.h"				// MUX 
#include <util/delay.h>			// Delay

uint16_t CO2getData()
 92e:	0f 2e       	mov	r0, r31
 930:	f3 e1       	ldi	r31, 0x13	; 19
 932:	ef 2e       	mov	r14, r31
 934:	ff 24       	eor	r15, r15
 936:	f0 2d       	mov	r31, r0
 938:	ec 0e       	add	r14, r28
 93a:	fd 1e       	adc	r15, r29
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
	{
		data[i] = USART_Receive();
 93c:	0e 94 15 06 	call	0xc2a	; 0xc2a <USART_Receive>
 940:	f8 01       	movw	r30, r16
 942:	81 93       	st	Z+, r24
 944:	8f 01       	movw	r16, r30
	{
		USART_Transmit(gasCommand[i]);
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
 946:	ee 15       	cp	r30, r14
 948:	ff 05       	cpc	r31, r15
 94a:	c1 f7       	brne	.-16     	; 0x93c <__stack+0x3d>
	{
		data[i] = USART_Receive();
	}

	/* Mascara para concetración de CO2 */
	gasC = (data[2]<<8) | (data[3]);
 94c:	9c 85       	ldd	r25, Y+12	; 0x0c
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	2d 85       	ldd	r18, Y+13	; 0x0d
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	28 2b       	or	r18, r24
 956:	39 2b       	or	r19, r25
	
	/* Regresa la concentración de CO2*/
	return gasC;
}
 958:	82 2f       	mov	r24, r18
 95a:	93 2f       	mov	r25, r19
 95c:	62 96       	adiw	r28, 0x12	; 18
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	cf 91       	pop	r28
 96a:	df 91       	pop	r29
 96c:	1f 91       	pop	r17
 96e:	0f 91       	pop	r16
 970:	ff 90       	pop	r15
 972:	ef 90       	pop	r14
 974:	08 95       	ret

00000976 <MPswitchMode>:


void MPswitchMode(uint8_t t)
{
 976:	ef 92       	push	r14
 978:	ff 92       	push	r15
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	18 2f       	mov	r17, r24
	/* Declaración de variables */
	uint16_t temp = START_BYTE1+START_BYTE2 +CHANGE_MODE +t;
 982:	c8 2f       	mov	r28, r24
 984:	d0 e0       	ldi	r29, 0x00	; 0
 986:	c0 59       	subi	r28, 0x90	; 144
 988:	de 4f       	sbci	r29, 0xFE	; 254
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 98a:	82 e0       	ldi	r24, 0x02	; 2
 98c:	0e 94 a3 01 	call	0x346	; 0x346 <Mux_Channel>
		
	/* Solicitud para cambiar de modo */
	USART_Transmit(START_BYTE1);
 990:	82 e4       	ldi	r24, 0x42	; 66
 992:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(START_BYTE2);
 996:	8d e4       	ldi	r24, 0x4D	; 77
 998:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(CHANGE_MODE);
 99c:	81 ee       	ldi	r24, 0xE1	; 225
 99e:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(t);
 9a8:	81 2f       	mov	r24, r17
 9aa:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(LRCH);
 9ae:	7e 01       	movw	r14, r28
 9b0:	8f 2d       	mov	r24, r15
 9b2:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(LRCL);
 9b6:	8c 2f       	mov	r24, r28
 9b8:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
}
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	ff 90       	pop	r15
 9c4:	ef 90       	pop	r14
 9c6:	08 95       	ret

000009c8 <MPgetData>:


void MPgetData(uint8_t *array)
{
 9c8:	cf 92       	push	r12
 9ca:	df 92       	push	r13
 9cc:	ef 92       	push	r14
 9ce:	ff 92       	push	r15
 9d0:	0f 93       	push	r16
 9d2:	1f 93       	push	r17
 9d4:	df 93       	push	r29
 9d6:	cf 93       	push	r28
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	6f 97       	sbiw	r28, 0x1f	; 31
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	6c 01       	movw	r12, r24
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	uint8_t Buff_MP[31];
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 9ea:	82 e0       	ldi	r24, 0x02	; 2
 9ec:	0e 94 a3 01 	call	0x346	; 0x346 <Mux_Channel>
		
	/* Solicitud para recibir datos */
	USART_Transmit(START_BYTE1);
 9f0:	82 e4       	ldi	r24, 0x42	; 66
 9f2:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(START_BYTE2);
 9f6:	8d e4       	ldi	r24, 0x4D	; 77
 9f8:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(READ_DATA);
 9fc:	82 ee       	ldi	r24, 0xE2	; 226
 9fe:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(LRCH);
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(LRCL);
 a14:	81 e7       	ldi	r24, 0x71	; 113
 a16:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
 a1a:	0e 94 15 06 	call	0xc2a	; 0xc2a <USART_Receive>
 a1e:	82 34       	cpi	r24, 0x42	; 66
 a20:	e1 f7       	brne	.-8      	; 0xa1a <MPgetData+0x52>
 a22:	8e 01       	movw	r16, r28
 a24:	0f 5f       	subi	r16, 0xFF	; 255
 a26:	1f 4f       	sbci	r17, 0xFF	; 255
	USART_Transmit(LRCH);
	USART_Transmit(LRCL);
}


void MPgetData(uint8_t *array)
 a28:	ee 24       	eor	r14, r14
 a2a:	ff 24       	eor	r15, r15
 a2c:	68 94       	set
 a2e:	e5 f8       	bld	r14, 5
 a30:	ec 0e       	add	r14, r28
 a32:	fd 1e       	adc	r15, r29
	while (USART_Receive() != START_BYTE1){}
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
	{
		Buff_MP[i] = USART_Receive();
 a34:	0e 94 15 06 	call	0xc2a	; 0xc2a <USART_Receive>
 a38:	f8 01       	movw	r30, r16
 a3a:	81 93       	st	Z+, r24
 a3c:	8f 01       	movw	r16, r30
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
 a3e:	ee 15       	cp	r30, r14
 a40:	ff 05       	cpc	r31, r15
 a42:	c1 f7       	brne	.-16     	; 0xa34 <MPgetData+0x6c>
	{
		Buff_MP[i] = USART_Receive();
	}
	/* MP 2.5 */
	array[0] = Buff_MP[6];
 a44:	8f 81       	ldd	r24, Y+7	; 0x07
 a46:	f6 01       	movw	r30, r12
 a48:	80 83       	st	Z, r24
	array[1] = Buff_MP[7];
 a4a:	88 85       	ldd	r24, Y+8	; 0x08
 a4c:	81 83       	std	Z+1, r24	; 0x01
	/* MP 10 */
	array[2] = Buff_MP[8];
 a4e:	89 85       	ldd	r24, Y+9	; 0x09
 a50:	82 83       	std	Z+2, r24	; 0x02
	array[3] = Buff_MP[9];
 a52:	8a 85       	ldd	r24, Y+10	; 0x0a
 a54:	83 83       	std	Z+3, r24	; 0x03
}
 a56:	6f 96       	adiw	r28, 0x1f	; 31
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	f8 94       	cli
 a5c:	de bf       	out	0x3e, r29	; 62
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	cd bf       	out	0x3d, r28	; 61
 a62:	cf 91       	pop	r28
 a64:	df 91       	pop	r29
 a66:	1f 91       	pop	r17
 a68:	0f 91       	pop	r16
 a6a:	ff 90       	pop	r15
 a6c:	ef 90       	pop	r14
 a6e:	df 90       	pop	r13
 a70:	cf 90       	pop	r12
 a72:	08 95       	ret

00000a74 <COswitchMode>:


void COswitchMode(uint8_t modo)
{
 a74:	1f 93       	push	r17
 a76:	18 2f       	mov	r17, r24
	/* Cálculo de bit de error */
	uint16_t CHECK_SUM = ~(1+SWITCH_COMMAND+modo)+1;
	
	/* Habilita el mux para el CO */
	Mux_Channel(CHANNEL_CO);
 a78:	83 e0       	ldi	r24, 0x03	; 3
 a7a:	0e 94 a3 01 	call	0x346	; 0x346 <Mux_Channel>
	
	/* Solicitud para cambiar de modo */
	USART_Transmit(START_BYTE);
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
 a80:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x01);
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(SWITCH_COMMAND);
 a8a:	88 e7       	ldi	r24, 0x78	; 120
 a8c:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(modo);
 a90:	81 2f       	mov	r24, r17
 a92:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 a96:	80 e0       	ldi	r24, 0x00	; 0
 a98:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 a9c:	80 e0       	ldi	r24, 0x00	; 0
 a9e:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(CHECK_SUM);
 aae:	27 e8       	ldi	r18, 0x87	; 135
 ab0:	3f ef       	ldi	r19, 0xFF	; 255
 ab2:	82 2f       	mov	r24, r18
 ab4:	81 1b       	sub	r24, r17
 ab6:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
}
 aba:	1f 91       	pop	r17
 abc:	08 95       	ret

00000abe <COgetData>:

uint16_t COgetData(void)
{
 abe:	ef 92       	push	r14
 ac0:	ff 92       	push	r15
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	df 93       	push	r29
 ac8:	cf 93       	push	r28
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
 ace:	28 97       	sbiw	r28, 0x08	; 8
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61
	uint16_t CHECK_SUM = ~(1+COMMAND)+1;
	uint8_t Buff_CO[8];
	uint16_t c;
	
	/* Habilita el mux para el CO */
	Mux_Channel(CHANNEL_CO);
 ada:	83 e0       	ldi	r24, 0x03	; 3
 adc:	0e 94 a3 01 	call	0x346	; 0x346 <Mux_Channel>
	
	/* Solicitud para recibir datos */
	USART_Transmit(START_BYTE);
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x01);
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(COMMAND);
 aec:	86 e8       	ldi	r24, 0x86	; 134
 aee:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(0x00);
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	USART_Transmit(CHECK_SUM);
 b10:	89 e7       	ldi	r24, 0x79	; 121
 b12:	0e 94 27 06 	call	0xc4e	; 0xc4e <USART_Transmit>
	
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
 b16:	0e 94 15 06 	call	0xc2a	; 0xc2a <USART_Receive>
 b1a:	8f 3f       	cpi	r24, 0xFF	; 255
 b1c:	e1 f7       	brne	.-8      	; 0xb16 <COgetData+0x58>
 b1e:	8e 01       	movw	r16, r28
 b20:	0f 5f       	subi	r16, 0xFF	; 255
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
	USART_Transmit(0x00);
	USART_Transmit(0x00);
	USART_Transmit(CHECK_SUM);
}

uint16_t COgetData(void)
 b24:	0f 2e       	mov	r0, r31
 b26:	f9 e0       	ldi	r31, 0x09	; 9
 b28:	ef 2e       	mov	r14, r31
 b2a:	ff 24       	eor	r15, r15
 b2c:	f0 2d       	mov	r31, r0
 b2e:	ec 0e       	add	r14, r28
 b30:	fd 1e       	adc	r15, r29
	
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
	for (uint8_t i= 0; i<8; i++)
	{
		Buff_CO[i] = USART_Receive();
 b32:	0e 94 15 06 	call	0xc2a	; 0xc2a <USART_Receive>
 b36:	f8 01       	movw	r30, r16
 b38:	81 93       	st	Z+, r24
 b3a:	8f 01       	movw	r16, r30
	USART_Transmit(0x00);
	USART_Transmit(CHECK_SUM);
	
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
	for (uint8_t i= 0; i<8; i++)
 b3c:	ee 15       	cp	r30, r14
 b3e:	ff 05       	cpc	r31, r15
 b40:	c1 f7       	brne	.-16     	; 0xb32 <COgetData+0x74>
	{
		Buff_CO[i] = USART_Receive();
	}
	
	/* Concentracion de CO */
	c = 256*Buff_CO[1] + Buff_CO[2];
 b42:	3a 81       	ldd	r19, Y+2	; 0x02
 b44:	20 e0       	ldi	r18, 0x00	; 0
 b46:	8b 81       	ldd	r24, Y+3	; 0x03
 b48:	28 0f       	add	r18, r24
 b4a:	31 1d       	adc	r19, r1
	return c;
}
 b4c:	82 2f       	mov	r24, r18
 b4e:	93 2f       	mov	r25, r19
 b50:	28 96       	adiw	r28, 0x08	; 8
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	cf 91       	pop	r28
 b5e:	df 91       	pop	r29
 b60:	1f 91       	pop	r17
 b62:	0f 91       	pop	r16
 b64:	ff 90       	pop	r15
 b66:	ef 90       	pop	r14
 b68:	08 95       	ret

00000b6a <USART_Init>:
Returns:  none
*************************************************************************/
void USART_Init(unsigned int ubrr_val)
{
	/* Set the baud rate */
	UBRR0H = (uint8_t) (ubrr_val>>8);                  
 b6a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t) ubrr_val;
 b6e:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable 2X Mode */ 
	UCSR0A = (1<<U2X0);
 b72:	82 e0       	ldi	r24, 0x02	; 2
 b74:	80 93 c0 00 	sts	0x00C0, r24
	
	/* Enable USART receiver and transmitter */
	UCSR0B = ((1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)); 
 b78:	88 e9       	ldi	r24, 0x98	; 152
 b7a:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8 data 1stop */
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 b7e:	86 e0       	ldi	r24, 0x06	; 6
 b80:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Flush buffers */    
	USART_RxTail = 0;
 b84:	10 92 1c 02 	sts	0x021C, r1
	USART_RxHead = 0;
 b88:	10 92 1b 02 	sts	0x021B, r1
	USART_TxTail = 0;
 b8c:	10 92 12 02 	sts	0x0212, r1
	USART_TxHead = 0;
 b90:	10 92 11 02 	sts	0x0211, r1
}
 b94:	08 95       	ret

00000b96 <__vector_18>:
Interrupt Vector for the RX Mode.
If there are new unread data this ISR will execute. Saves the data and
change the index of the RX Buffer.
*************************************************************************/
ISR(USART_RX_vect)
{
 b96:	1f 92       	push	r1
 b98:	0f 92       	push	r0
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	0f 92       	push	r0
 b9e:	11 24       	eor	r1, r1
 ba0:	8f 93       	push	r24
 ba2:	9f 93       	push	r25
 ba4:	ef 93       	push	r30
 ba6:	ff 93       	push	r31
	uint8_t data;
	uint8_t tmphead;

	/* Read the received data */
	data = UDR0;                 
 ba8:	90 91 c6 00 	lds	r25, 0x00C6
	/* Calculate buffer index */
	tmphead = (USART_RxHead + 1) & USART_RX_BUFFER_MASK;
 bac:	80 91 1b 02 	lds	r24, 0x021B
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	87 70       	andi	r24, 0x07	; 7
	/* Store new index */
	USART_RxHead = tmphead;
 bb4:	80 93 1b 02 	sts	0x021B, r24
	/* Store received data in buffer */
	USART_RxBuf[tmphead] = data; 
 bb8:	ed e1       	ldi	r30, 0x1D	; 29
 bba:	f2 e0       	ldi	r31, 0x02	; 2
 bbc:	e8 0f       	add	r30, r24
 bbe:	f1 1d       	adc	r31, r1
 bc0:	90 83       	st	Z, r25
}
 bc2:	ff 91       	pop	r31
 bc4:	ef 91       	pop	r30
 bc6:	9f 91       	pop	r25
 bc8:	8f 91       	pop	r24
 bca:	0f 90       	pop	r0
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	0f 90       	pop	r0
 bd0:	1f 90       	pop	r1
 bd2:	18 95       	reti

00000bd4 <__vector_19>:
If the buffer of the UART is empty this ISR will execute. Check for new 
data to be sent and puts that into the buffer . Change the index of the 
TX Buffer.
*************************************************************************/
ISR(USART_UDRE_vect)
{
 bd4:	1f 92       	push	r1
 bd6:	0f 92       	push	r0
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	0f 92       	push	r0
 bdc:	11 24       	eor	r1, r1
 bde:	8f 93       	push	r24
 be0:	9f 93       	push	r25
 be2:	ef 93       	push	r30
 be4:	ff 93       	push	r31
	uint8_t tmptail;

	/* Check if all data is transmitted */
	if (USART_TxHead != USART_TxTail) 
 be6:	90 91 11 02 	lds	r25, 0x0211
 bea:	80 91 12 02 	lds	r24, 0x0212
 bee:	98 17       	cp	r25, r24
 bf0:	71 f0       	breq	.+28     	; 0xc0e <__vector_19+0x3a>
	{
		/* Calculate buffer index */
		tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
 bf2:	80 91 12 02 	lds	r24, 0x0212
 bf6:	8f 5f       	subi	r24, 0xFF	; 255
 bf8:	87 70       	andi	r24, 0x07	; 7
		/* Store new index */
		USART_TxTail = tmptail;      
 bfa:	80 93 12 02 	sts	0x0212, r24
		/* Start transmission */
		UDR0 = USART_TxBuf[tmptail];  
 bfe:	e3 e1       	ldi	r30, 0x13	; 19
 c00:	f2 e0       	ldi	r31, 0x02	; 2
 c02:	e8 0f       	add	r30, r24
 c04:	f1 1d       	adc	r31, r1
 c06:	80 81       	ld	r24, Z
 c08:	80 93 c6 00 	sts	0x00C6, r24
 c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__vector_19+0x44>
	} else 
	{       
		/* Disable UDRE interrupt */
		UCSR0B &= ~(1<<UDRIE0);         
 c0e:	e1 ec       	ldi	r30, 0xC1	; 193
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	80 81       	ld	r24, Z
 c14:	8f 7d       	andi	r24, 0xDF	; 223
 c16:	80 83       	st	Z, r24
	}
}
 c18:	ff 91       	pop	r31
 c1a:	ef 91       	pop	r30
 c1c:	9f 91       	pop	r25
 c1e:	8f 91       	pop	r24
 c20:	0f 90       	pop	r0
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	0f 90       	pop	r0
 c26:	1f 90       	pop	r1
 c28:	18 95       	reti

00000c2a <USART_Receive>:
uint8_t USART_Receive(void)
{
	uint8_t tmptail;
	
	/* Wait for incoming data */
	while (USART_RxHead == USART_RxTail);
 c2a:	90 91 1b 02 	lds	r25, 0x021B
 c2e:	80 91 1c 02 	lds	r24, 0x021C
 c32:	98 17       	cp	r25, r24
 c34:	d1 f3       	breq	.-12     	; 0xc2a <USART_Receive>
	/* Calculate buffer index */
	tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
 c36:	80 91 1c 02 	lds	r24, 0x021C
 c3a:	8f 5f       	subi	r24, 0xFF	; 255
 c3c:	87 70       	andi	r24, 0x07	; 7
	/* Store new index */
	USART_RxTail = tmptail;                
 c3e:	80 93 1c 02 	sts	0x021C, r24
	/* Return data */
	return USART_RxBuf[tmptail];          
 c42:	ed e1       	ldi	r30, 0x1D	; 29
 c44:	f2 e0       	ldi	r31, 0x02	; 2
 c46:	e8 0f       	add	r30, r24
 c48:	f1 1d       	adc	r31, r1
}
 c4a:	80 81       	ld	r24, Z
 c4c:	08 95       	ret

00000c4e <USART_Transmit>:
void USART_Transmit(uint8_t data)
{
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 c4e:	20 91 11 02 	lds	r18, 0x0211
 c52:	2f 5f       	subi	r18, 0xFF	; 255
 c54:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (tmphead == USART_TxTail);
 c56:	90 91 12 02 	lds	r25, 0x0212
 c5a:	29 17       	cp	r18, r25
 c5c:	e1 f3       	breq	.-8      	; 0xc56 <USART_Transmit+0x8>
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
 c5e:	e3 e1       	ldi	r30, 0x13	; 19
 c60:	f2 e0       	ldi	r31, 0x02	; 2
 c62:	e2 0f       	add	r30, r18
 c64:	f1 1d       	adc	r31, r1
 c66:	80 83       	st	Z, r24
	/* Store new index */
	USART_TxHead = tmphead;               
 c68:	20 93 11 02 	sts	0x0211, r18
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);                    
 c6c:	e1 ec       	ldi	r30, 0xC1	; 193
 c6e:	f0 e0       	ldi	r31, 0x00	; 0
 c70:	80 81       	ld	r24, Z
 c72:	80 62       	ori	r24, 0x20	; 32
 c74:	80 83       	st	Z, r24
}
 c76:	08 95       	ret

00000c78 <itoa>:
 c78:	fb 01       	movw	r30, r22
 c7a:	9f 01       	movw	r18, r30
 c7c:	e8 94       	clt
 c7e:	42 30       	cpi	r20, 0x02	; 2
 c80:	c4 f0       	brlt	.+48     	; 0xcb2 <itoa+0x3a>
 c82:	45 32       	cpi	r20, 0x25	; 37
 c84:	b4 f4       	brge	.+44     	; 0xcb2 <itoa+0x3a>
 c86:	4a 30       	cpi	r20, 0x0A	; 10
 c88:	29 f4       	brne	.+10     	; 0xc94 <itoa+0x1c>
 c8a:	97 fb       	bst	r25, 7
 c8c:	1e f4       	brtc	.+6      	; 0xc94 <itoa+0x1c>
 c8e:	90 95       	com	r25
 c90:	81 95       	neg	r24
 c92:	9f 4f       	sbci	r25, 0xFF	; 255
 c94:	64 2f       	mov	r22, r20
 c96:	77 27       	eor	r23, r23
 c98:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodhi4>
 c9c:	80 5d       	subi	r24, 0xD0	; 208
 c9e:	8a 33       	cpi	r24, 0x3A	; 58
 ca0:	0c f0       	brlt	.+2      	; 0xca4 <itoa+0x2c>
 ca2:	89 5d       	subi	r24, 0xD9	; 217
 ca4:	81 93       	st	Z+, r24
 ca6:	cb 01       	movw	r24, r22
 ca8:	00 97       	sbiw	r24, 0x00	; 0
 caa:	a1 f7       	brne	.-24     	; 0xc94 <itoa+0x1c>
 cac:	16 f4       	brtc	.+4      	; 0xcb2 <itoa+0x3a>
 cae:	5d e2       	ldi	r21, 0x2D	; 45
 cb0:	51 93       	st	Z+, r21
 cb2:	10 82       	st	Z, r1
 cb4:	c9 01       	movw	r24, r18
 cb6:	0c 94 5d 06 	jmp	0xcba	; 0xcba <strrev>

00000cba <strrev>:
 cba:	dc 01       	movw	r26, r24
 cbc:	fc 01       	movw	r30, r24
 cbe:	67 2f       	mov	r22, r23
 cc0:	71 91       	ld	r23, Z+
 cc2:	77 23       	and	r23, r23
 cc4:	e1 f7       	brne	.-8      	; 0xcbe <strrev+0x4>
 cc6:	32 97       	sbiw	r30, 0x02	; 2
 cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <strrev+0x18>
 cca:	7c 91       	ld	r23, X
 ccc:	6d 93       	st	X+, r22
 cce:	70 83       	st	Z, r23
 cd0:	62 91       	ld	r22, -Z
 cd2:	ae 17       	cp	r26, r30
 cd4:	bf 07       	cpc	r27, r31
 cd6:	c8 f3       	brcs	.-14     	; 0xcca <strrev+0x10>
 cd8:	08 95       	ret

00000cda <__udivmodhi4>:
 cda:	aa 1b       	sub	r26, r26
 cdc:	bb 1b       	sub	r27, r27
 cde:	51 e1       	ldi	r21, 0x11	; 17
 ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <__udivmodhi4_ep>

00000ce2 <__udivmodhi4_loop>:
 ce2:	aa 1f       	adc	r26, r26
 ce4:	bb 1f       	adc	r27, r27
 ce6:	a6 17       	cp	r26, r22
 ce8:	b7 07       	cpc	r27, r23
 cea:	10 f0       	brcs	.+4      	; 0xcf0 <__udivmodhi4_ep>
 cec:	a6 1b       	sub	r26, r22
 cee:	b7 0b       	sbc	r27, r23

00000cf0 <__udivmodhi4_ep>:
 cf0:	88 1f       	adc	r24, r24
 cf2:	99 1f       	adc	r25, r25
 cf4:	5a 95       	dec	r21
 cf6:	a9 f7       	brne	.-22     	; 0xce2 <__udivmodhi4_loop>
 cf8:	80 95       	com	r24
 cfa:	90 95       	com	r25
 cfc:	bc 01       	movw	r22, r24
 cfe:	cd 01       	movw	r24, r26
 d00:	08 95       	ret

00000d02 <_exit>:
 d02:	f8 94       	cli

00000d04 <__stop_program>:
 d04:	ff cf       	rjmp	.-2      	; 0xd04 <__stop_program>
