
v4_CO2_MP_BT_MUX_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800100  00000e22  00000eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008001e8  008001e8  00000f9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000284f  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000feb  00000000  00000000  00003a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001253  00000000  00000000  00004a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  00005cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000875  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f3  00000000  00000000  00006a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_18>
  4c:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3e       	cpi	r26, 0xE8	; 232
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 ee       	ldi	r26, 0xE8	; 232
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

/* Prototipos */
void Check_BT(void);

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	key = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <key>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <Check_BT>:


void Check_BT(void)
{
	uint8_t temp;
	Mux_Channel(CHANNEL_BT);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 01 02 	call	0x402	; 0x402 <Mux_Channel>
	temp = USART_ReceiveIf();	// Verifica si hay data nueva. De lo contrario, return 0
  ca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <USART_ReceiveIf>
	if (temp == 0x41)			// A
  ce:	81 34       	cpi	r24, 0x41	; 65
  d0:	49 f4       	brne	.+18     	; 0xe4 <Check_BT+0x20>
	{
		contador_BT++;
  d2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <contador_BT>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <contador_BT>
		conexion_bt = 1;		// Conexion: E
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <conexion_bt>
  e2:	08 95       	ret
	}
	if (temp == 0x42)			// B
  e4:	82 34       	cpi	r24, 0x42	; 66
  e6:	19 f4       	brne	.+6      	; 0xee <Check_BT+0x2a>
	{
		key = 1;				// Solicita data
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <key>
  ee:	08 95       	ret

000000f0 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ed       	ldi	r18, 0xDF	; 223
  f2:	83 e9       	ldi	r24, 0x93	; 147
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x6>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x10>
 100:	00 00       	nop
	/************************************/
	/*  Inicialización de componentes	*/
	/************************************/

	/* Comunicación con sensores y BT */
	USART_Init(MYUBRR);		// Configura UART
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 10 06 	call	0xc20	; 0xc20 <USART_Init>
	MUX_INIT();				// Pines del Mux como salida
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	80 66       	ori	r24, 0x60	; 96
 10e:	8a b9       	out	0x0a, r24	; 10
	
	/* Interfaz: LCD & boton */
	I2C_Init();				// 10 kHz
 110:	0e 94 c6 03 	call	0x78c	; 0x78c <I2C_Init>
	LCD_Init();				// LCD On. Cursor off
 114:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_Init>
	button_Init();			// Int0. Boton como salida
 118:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <button_Init>
	
	/* Nivel de Batería */
	ADC_Init();				// Conversion ADC
 11c:	0e 94 ab 01 	call	0x356	; 0x356 <ADC_Init>
	RGBLed_Init();			// Indicador
 120:	0e 94 8f 04 	call	0x91e	; 0x91e <RGBLed_Init>
	
	/* Control de tiempos */
	Timer_Init();
 124:	0e 94 11 02 	call	0x422	; 0x422 <Timer_Init>
	/* Debug */
	//LED_INIT();				// Led como salida
	
	sei();					// Habilita IRQs
 128:	78 94       	sei
	/************************************/
	/*        Inicio del programa		*/
	/************************************/

	/* Nivel de Bateria */
	ADC_Start();
 12a:	0e 94 b6 01 	call	0x36c	; 0x36c <ADC_Start>
	bateria = ADC_GetValue();
 12e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_GetValue>
 132:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <bateria+0x1>
 136:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <bateria>
	if (bateria >=850){ RGBLed_Color(GREEN);}
 13a:	82 35       	cpi	r24, 0x52	; 82
 13c:	93 40       	sbci	r25, 0x03	; 3
 13e:	18 f0       	brcs	.+6      	; 0x146 <main+0x56>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 96 04 	call	0x92c	; 0x92c <RGBLed_Color>
	if ((bateria >=200)&(bateria<850)){ RGBLed_Color(YELLOW);}
 146:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <bateria>
 14a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <bateria+0x1>
 14e:	88 5c       	subi	r24, 0xC8	; 200
 150:	91 09       	sbc	r25, r1
 152:	8a 38       	cpi	r24, 0x8A	; 138
 154:	92 40       	sbci	r25, 0x02	; 2
 156:	18 f4       	brcc	.+6      	; 0x15e <main+0x6e>
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 96 04 	call	0x92c	; 0x92c <RGBLed_Color>
	if (bateria <200){ RGBLed_Color(RED);}
 15e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <bateria>
 162:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <bateria+0x1>
 166:	88 3c       	cpi	r24, 0xC8	; 200
 168:	91 05       	cpc	r25, r1
 16a:	18 f4       	brcc	.+6      	; 0x172 <main+0x82>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 96 04 	call	0x92c	; 0x92c <RGBLed_Color>

	
	/* Cambio de modo de sensores */
	MPswitchMode(PASSIVE_MODE);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 22 05 	call	0xa44	; 0xa44 <MPswitchMode>
	COswitchMode(QA_MODE);
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	0e 94 9a 05 	call	0xb34	; 0xb34 <COswitchMode>
	
	/* Mensajes iniciales por LCD */
	LCD_MensajeInicial();		// Inicializando...
 17e:	0e 94 92 02 	call	0x524	; 0x524 <LCD_MensajeInicial>
	LCD_MensajeTiempo(10);		// Calentando. Tiempo restante en segundos
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_MensajeTiempo>
	
	
	/* Reinicia el control de timers para los dispositivos */
	setTime(TIMER_LCD, 0);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 25 02 	call	0x44a	; 0x44a <setTime>
	setTime(TIMER_ADC, 0);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 25 02 	call	0x44a	; 0x44a <setTime>
	setTime(TIMER_BT, 0);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 25 02 	call	0x44a	; 0x44a <setTime>
	setTime(TIMER_GLOBAL, 0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 25 02 	call	0x44a	; 0x44a <setTime>

	/* Inicialización de variables */
	key = 0;
 1b2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <key>
	conexion_bt = 0;
 1b6:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <conexion_bt>
			DATA_MP10 = DATA_MP10 + 10;

			/* Bluetooth */
			if (conexion_bt == 1)
			{
				Flag_Ack = 1;
 1ba:	c1 e0       	ldi	r28, 0x01	; 1
	
	/* Loop Infinito */
	while (1) 
	{
		/* Revisa la conexion BT */
		Check_BT();
 1bc:	0e 94 62 00 	call	0xc4	; 0xc4 <Check_BT>
		
		/* Sensores */	
		if(key == 1)
 1c0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <key>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	09 f0       	breq	.+2      	; 0x1ca <main+0xda>
 1c8:	69 c0       	rjmp	.+210    	; 0x29c <main+0x1ac>
		{
			key = 0;
 1ca:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <key>
	
			/* CO2 */
			DATA_CO2 = CO2getData();
 1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <CO2getData>
 1d2:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <DATA_CO2+0x1>
 1d6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <DATA_CO2>
			
			/* MP */
			MPgetData(DATA_MP);
 1da:	8b e1       	ldi	r24, 0x1B	; 27
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	0e 94 46 05 	call	0xa8c	; 0xa8c <MPgetData>
			
			/* CO */
			DATA_CO = COgetData();
 1e2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <COgetData>
			
			/* Calibra Sensores */
			//CalibraSensores(DATA_CO2, DATA_MP25, DATA_MP10, DATA_CO);
		
			DATA_CO = DATA_CO/5 -2;
 1e6:	9c 01       	movw	r18, r24
 1e8:	ad ec       	ldi	r26, 0xCD	; 205
 1ea:	bc ec       	ldi	r27, 0xCC	; 204
 1ec:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 1f0:	96 95       	lsr	r25
 1f2:	87 95       	ror	r24
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	02 97       	sbiw	r24, 0x02	; 2
 1fa:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <DATA_CO+0x1>
 1fe:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <DATA_CO>
			DATA_CO2 = DATA_CO2 - 340;
 202:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <DATA_CO2>
 206:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <DATA_CO2+0x1>
 20a:	84 55       	subi	r24, 0x54	; 84
 20c:	91 40       	sbci	r25, 0x01	; 1
 20e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <DATA_CO2+0x1>
 212:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <DATA_CO2>
			DATA_MP25 = DATA_MP25 + 6;
 216:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <DATA_MP25>
 21a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <DATA_MP25+0x1>
 21e:	06 96       	adiw	r24, 0x06	; 6
 220:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <DATA_MP25+0x1>
 224:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <DATA_MP25>
			DATA_MP10 = DATA_MP10 + 10;
 228:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DATA_MP10>
 22c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DATA_MP10+0x1>
 230:	0a 96       	adiw	r24, 0x0a	; 10
 232:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DATA_MP10+0x1>
 236:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DATA_MP10>

			/* Bluetooth */
			if (conexion_bt == 1)
 23a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <conexion_bt>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	69 f5       	brne	.+90     	; 0x29c <main+0x1ac>
			{
				Flag_Ack = 1;
 242:	c0 93 1a 02 	sts	0x021A, r28	; 0x80021a <Flag_Ack>
				Mux_Channel(CHANNEL_BT);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 01 02 	call	0x402	; 0x402 <Mux_Channel>
				USART_putNumber(DATA_CO2);
 24c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <DATA_CO2>
 250:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <DATA_CO2+0x1>
 254:	0e 94 b4 06 	call	0xd68	; 0xd68 <USART_putNumber>
				USART_putString(",");
 258:	89 e0       	ldi	r24, 0x09	; 9
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <USART_putString>
				USART_putNumber(DATA_MP25);
 260:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <DATA_MP25>
 264:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <DATA_MP25+0x1>
 268:	0e 94 b4 06 	call	0xd68	; 0xd68 <USART_putNumber>
				USART_putString(",");
 26c:	89 e0       	ldi	r24, 0x09	; 9
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 a5 06 	call	0xd4a	; 0xd4a <USART_putString>
				USART_putNumber(DATA_MP10);
 274:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DATA_MP10>
 278:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DATA_MP10+0x1>
 27c:	0e 94 b4 06 	call	0xd68	; 0xd68 <USART_putNumber>
				USART_putString(",");
 280:	89 e0       	ldi	r24, 0x09	; 9
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 a5 06 	call	0xd4a	; 0xd4a <USART_putString>
				USART_putNumber(DATA_CO);
 288:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <DATA_CO>
 28c:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <DATA_CO+0x1>
 290:	0e 94 b4 06 	call	0xd68	; 0xd68 <USART_putNumber>
				USART_putString(";");
 294:	8b e0       	ldi	r24, 0x0B	; 11
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 a5 06 	call	0xd4a	; 0xd4a <USART_putString>

		}
		
		
		/* Bateria */
		time_adc = getTime(TIMER_ADC);
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 41 02 	call	0x482	; 0x482 <getTime>
 2a2:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <time_adc+0x1>
 2a6:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <time_adc>
		if (time_adc >= 60)
 2aa:	cc 97       	sbiw	r24, 0x3c	; 60
 2ac:	48 f1       	brcs	.+82     	; 0x300 <main+0x210>
		{
			ADC_Start();													// Inicia conversion ADC
 2ae:	0e 94 b6 01 	call	0x36c	; 0x36c <ADC_Start>
			setTime(TIMER_ADC, 0);											// Reinicia el Timer
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 25 02 	call	0x44a	; 0x44a <setTime>
			bateria = ADC_GetValue();										// Calcula el valor
 2bc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ADC_GetValue>
 2c0:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <bateria+0x1>
 2c4:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <bateria>
			if (bateria >=850){ RGBLed_Color(GREEN);}
 2c8:	82 35       	cpi	r24, 0x52	; 82
 2ca:	93 40       	sbci	r25, 0x03	; 3
 2cc:	18 f0       	brcs	.+6      	; 0x2d4 <main+0x1e4>
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 96 04 	call	0x92c	; 0x92c <RGBLed_Color>
			if ((bateria >=200)&(bateria<850)){ RGBLed_Color(YELLOW);}
 2d4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <bateria>
 2d8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <bateria+0x1>
 2dc:	88 5c       	subi	r24, 0xC8	; 200
 2de:	91 09       	sbc	r25, r1
 2e0:	8a 38       	cpi	r24, 0x8A	; 138
 2e2:	92 40       	sbci	r25, 0x02	; 2
 2e4:	18 f4       	brcc	.+6      	; 0x2ec <main+0x1fc>
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 96 04 	call	0x92c	; 0x92c <RGBLed_Color>
			if (bateria <200){ RGBLed_Color(RED);}
 2ec:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <bateria>
 2f0:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <bateria+0x1>
 2f4:	88 3c       	cpi	r24, 0xC8	; 200
 2f6:	91 05       	cpc	r25, r1
 2f8:	18 f4       	brcc	.+6      	; 0x300 <main+0x210>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 96 04 	call	0x92c	; 0x92c <RGBLed_Color>
		}
		
		/* LCD */
		DATA_MP25 = (DATA_MP[0]<<8) | (DATA_MP[1]);
 300:	eb e1       	ldi	r30, 0x1B	; 27
 302:	f2 e0       	ldi	r31, 0x02	; 2
 304:	60 81       	ld	r22, Z
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	76 2f       	mov	r23, r22
 30a:	66 27       	eor	r22, r22
 30c:	81 81       	ldd	r24, Z+1	; 0x01
 30e:	68 2b       	or	r22, r24
 310:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <DATA_MP25+0x1>
 314:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <DATA_MP25>
		DATA_MP10 = (DATA_MP[2]<<8) | (DATA_MP[3]);
 318:	42 81       	ldd	r20, Z+2	; 0x02
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	54 2f       	mov	r21, r20
 31e:	44 27       	eor	r20, r20
 320:	83 81       	ldd	r24, Z+3	; 0x03
 322:	48 2b       	or	r20, r24
 324:	50 93 27 02 	sts	0x0227, r21	; 0x800227 <DATA_MP10+0x1>
 328:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <DATA_MP10>
		LCD_MensajePrincipal(DATA_CO2, DATA_MP25, DATA_MP10, DATA_CO);
 32c:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <DATA_CO>
 330:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <DATA_CO+0x1>
 334:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <DATA_CO2>
 338:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <DATA_CO2+0x1>
 33c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_MensajePrincipal>
		
		
		/* Led azul. Conexion BT exitosa */
		if (contador_BT == 1)
 340:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <contador_BT>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	09 f0       	breq	.+2      	; 0x34a <main+0x25a>
 348:	39 cf       	rjmp	.-398    	; 0x1bc <main+0xcc>
		{
			contador_BT++;		// Solo se realiza una vez
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <contador_BT>
			RGBLed_Blink();		// Led parpadea
 350:	0e 94 b6 04 	call	0x96c	; 0x96c <RGBLed_Blink>
 354:	33 cf       	rjmp	.-410    	; 0x1bc <main+0xcc>

00000356 <ADC_Init>:
Returns:  none
*************************************************************************/
void ADC_Init(void)
{
	/* Voltage Reference = AVCC */
	ADMUX |= (1<<REFS0)|(ADC_CHANNEL<<MUX0);
 356:	ec e7       	ldi	r30, 0x7C	; 124
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 64       	ori	r24, 0x40	; 64
 35e:	80 83       	st	Z, r24
	#if ADC_MODE == EIGHTBIT
	ADMUX |= (1<<ADLAR); 	// Adjust the bits to the left
	#endif

	/* ADC Enable, ADC Interrupt Enable, Prescaler predefined to work at 125 KHz */
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(ADC_PRESC<<ADPS0);
 360:	ea e7       	ldi	r30, 0x7A	; 122
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	8e 68       	ori	r24, 0x8E	; 142
 368:	80 83       	st	Z, r24
 36a:	08 95       	ret

0000036c <ADC_Start>:
}

void ADC_Start()
{
	/* Activa ADC */
	ADCSRA |= (1<<ADSC);
 36c:	ea e7       	ldi	r30, 0x7A	; 122
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 64       	ori	r24, 0x40	; 64
 374:	80 83       	st	Z, r24
	/* Cambia de estadp*/
	ADC_status = ADC_WAIT;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <ADC_status>
 37c:	08 95       	ret

0000037e <__vector_21>:
Interrupt Vector for the ADC.
If the conversion is ready this ISR will execute. Saves the data and
change the index of the ADC Buffer.
*************************************************************************/
ISR(ADC_vect)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	/* ADC Value */
	#if ADC_MODE == TENBIT
	uint16_t temp;
	temp = ADC;
 390:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 394:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	#endif
	
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (ADC_Head + 1) & ADC_BUFFER_MASK;
 398:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <ADC_Head>
 39c:	ef 5f       	subi	r30, 0xFF	; 255
 39e:	e7 70       	andi	r30, 0x07	; 7
	
	/* Store new index */
	ADC_Head = tmphead;
 3a0:	e0 93 e9 01 	sts	0x01E9, r30	; 0x8001e9 <ADC_Head>
	
	/* Store the data in the buffer */
	ADC_Buffer[tmphead] = temp;
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	e6 51       	subi	r30, 0x16	; 22
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	91 83       	std	Z+1, r25	; 0x01
 3b0:	80 83       	st	Z, r24

	/* Change the current state */
	ADC_status = ADC_RDY;
 3b2:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <ADC_status>
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <ADC_GetValue>:
*************************************************************************/
#if ADC_MODE == TENBIT
uint16_t ADC_GetValue(void)
{
	/*Espera a nueva data*/
	while(ADC_Head == ADC_Tail){}
 3c8:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <ADC_Head>
 3cc:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__data_end>
 3d0:	98 17       	cp	r25, r24
 3d2:	d1 f3       	breq	.-12     	; 0x3c8 <ADC_GetValue>
	uint8_t tmptail;
	
	/* Calcula el indice */
	tmptail = (ADC_Tail + 1) & ADC_BUFFER_MASK;
 3d4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__data_end>
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	87 70       	andi	r24, 0x07	; 7
	/* Almacena nuevo indice */
	ADC_Tail = tmptail;
 3dc:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <__data_end>
	/* Devuelve el valor */
	return ADC_Buffer[ADC_Tail];
 3e0:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <__data_end>
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e6 51       	subi	r30, 0x16	; 22
 3ec:	fe 4f       	sbci	r31, 0xFE	; 254
}
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	08 95       	ret

000003f4 <button_Init>:
/**************************************/
void led_debug(void)
{
	LED_ON();
	_delay_ms(3000);
	LED_OFF();
 3f4:	e9 e6       	ldi	r30, 0x69	; 105
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	83 60       	ori	r24, 0x03	; 3
 3fc:	80 83       	st	Z, r24
 3fe:	e8 9a       	sbi	0x1d, 0	; 29
 400:	08 95       	ret

00000402 <Mux_Channel>:
/*  			  Mux 		 		  */
/**************************************/
void Mux_Channel( uint8_t channel)
{
	//MUX_ENABLE();
	MUX_CLEAR();
 402:	9b b1       	in	r25, 0x0b	; 11
 404:	9f 79       	andi	r25, 0x9F	; 159
 406:	9b b9       	out	0x0b, r25	; 11
	switch (channel)
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	31 f0       	breq	.+12     	; 0x418 <Mux_Channel+0x16>
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	31 f0       	breq	.+12     	; 0x41c <Mux_Channel+0x1a>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	31 f4       	brne	.+12     	; 0x420 <Mux_Channel+0x1e>
	{
	case 0:
		break;
	case 1:
		MUX_SEL0();
 414:	5d 9a       	sbi	0x0b, 5	; 11
		break;
 416:	08 95       	ret
	case 2:
		MUX_SEL1();
 418:	5e 9a       	sbi	0x0b, 6	; 11
		break;
 41a:	08 95       	ret
	case 3:
		MUX_SEL0();
 41c:	5d 9a       	sbi	0x0b, 5	; 11
		MUX_SEL1();
 41e:	5e 9a       	sbi	0x0b, 6	; 11
 420:	08 95       	ret

00000422 <Timer_Init>:
uint16_t segundos, segundosLCD, segundosADC, segundosBT;

void Timer_Init(void)
{
	/* Modo CTC. Prescaler = 1024 */
	TCCR1B = (1 << WGM12) | (5 << CS10);
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	/* Reinicia la cuenta */
	TCNT1 = 0;
 428:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 42c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* Comparador = 1 seg */
	OCR1A = 976;
 430:	80 ed       	ldi	r24, 0xD0	; 208
 432:	93 e0       	ldi	r25, 0x03	; 3
 434:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 438:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* Habilita la interrupciÃ³n por comparaciÃ³n*/
	TIMSK1 |= (1 << OCIE1A);
 43c:	ef e6       	ldi	r30, 0x6F	; 111
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	82 60       	ori	r24, 0x02	; 2
 444:	80 83       	st	Z, r24

	/* Limpia banderas de interrupcion*/
	TIFR1 |= (1 << OCF1A);
 446:	b1 9a       	sbi	0x16, 1	; 22
 448:	08 95       	ret

0000044a <setTime>:

}

void setTime(uint8_t type, uint16_t newtime)
{
	switch (type)
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	59 f0       	breq	.+22     	; 0x464 <setTime+0x1a>
 44e:	28 f0       	brcs	.+10     	; 0x45a <setTime+0x10>
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	69 f0       	breq	.+26     	; 0x46e <setTime+0x24>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	81 f0       	breq	.+32     	; 0x478 <setTime+0x2e>
 458:	08 95       	ret
	{
	case TIMER_GLOBAL:
		segundos = newtime;
 45a:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <segundos+0x1>
 45e:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <segundos>
		break;
 462:	08 95       	ret

	case TIMER_LCD:
		segundosLCD = newtime;
 464:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <segundosLCD+0x1>
 468:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <segundosLCD>
		break;
 46c:	08 95       	ret

	case TIMER_ADC:
		segundosADC = newtime;
 46e:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <segundosADC+0x1>
 472:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <segundosADC>
		break;
 476:	08 95       	ret

	case TIMER_BT:
		segundosBT = newtime;
 478:	70 93 2e 02 	sts	0x022E, r23	; 0x80022e <segundosBT+0x1>
 47c:	60 93 2d 02 	sts	0x022D, r22	; 0x80022d <segundosBT>
 480:	08 95       	ret

00000482 <getTime>:
	}
}

uint16_t getTime(uint8_t type)
{
	switch (type)
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	59 f0       	breq	.+22     	; 0x49c <getTime+0x1a>
 486:	28 f0       	brcs	.+10     	; 0x492 <getTime+0x10>
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	69 f0       	breq	.+26     	; 0x4a6 <getTime+0x24>
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	81 f0       	breq	.+32     	; 0x4b0 <getTime+0x2e>
 490:	14 c0       	rjmp	.+40     	; 0x4ba <getTime+0x38>
	{
	case TIMER_GLOBAL:
		return segundos;
 492:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <segundos>
 496:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <segundos+0x1>
 49a:	08 95       	ret
		break;

	case TIMER_LCD:
		return segundosLCD;
 49c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <segundosLCD>
 4a0:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <segundosLCD+0x1>
 4a4:	08 95       	ret
		break;

	case TIMER_ADC:
		return segundosADC;
 4a6:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <segundosADC>
 4aa:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <segundosADC+0x1>
 4ae:	08 95       	ret
		break;

	case TIMER_BT:
		return segundosBT;
 4b0:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <segundosBT>
 4b4:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <segundosBT+0x1>
 4b8:	08 95       	ret
		break;

	default:
		return 0;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
}
 4be:	08 95       	ret

000004c0 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
	segundos++;
 4ce:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <segundos>
 4d2:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <segundos+0x1>
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <segundos+0x1>
 4dc:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <segundos>
	segundosLCD++;
 4e0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <segundosLCD>
 4e4:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <segundosLCD+0x1>
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <segundosLCD+0x1>
 4ee:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <segundosLCD>
	segundosADC++;
 4f2:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <segundosADC>
 4f6:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <segundosADC+0x1>
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <segundosADC+0x1>
 500:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <segundosADC>
	segundosBT++;
 504:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <segundosBT>
 508:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <segundosBT+0x1>
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <segundosBT+0x1>
 512:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <segundosBT>
}
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <LCD_MensajeInicial>:

/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
 524:	cf 93       	push	r28
 526:	c4 e0       	ldi	r28, 0x04	; 4
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Up();
 528:	80 e8       	ldi	r24, 0x80	; 128
 52a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_String("Inicializando   ");
 52e:	8d e0       	ldi	r24, 0x0D	; 13
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_GotoXY(0, 13);
 536:	6d e0       	ldi	r22, 0x0D	; 13
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_GotoXY>
 53e:	8f e4       	ldi	r24, 0x4F	; 79
 540:	93 ec       	ldi	r25, 0xC3	; 195
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <LCD_MensajeInicial+0x1e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_MensajeInicial+0x24>
 548:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 54a:	8a e3       	ldi	r24, 0x3A	; 58
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 552:	8f e4       	ldi	r24, 0x4F	; 79
 554:	93 ec       	ldi	r25, 0xC3	; 195
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <LCD_MensajeInicial+0x32>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <LCD_MensajeInicial+0x38>
 55c:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 55e:	8a e3       	ldi	r24, 0x3A	; 58
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 566:	8f e4       	ldi	r24, 0x4F	; 79
 568:	93 ec       	ldi	r25, 0xC3	; 195
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_MensajeInicial+0x46>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_MensajeInicial+0x4c>
 570:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 572:	8a e3       	ldi	r24, 0x3A	; 58
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 57a:	8f e4       	ldi	r24, 0x4F	; 79
 57c:	93 ec       	ldi	r25, 0xC3	; 195
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCD_MensajeInicial+0x5a>
 582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_MensajeInicial+0x60>
 584:	00 00       	nop
 586:	c1 50       	subi	r28, 0x01	; 1
/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
	for (uint8_t i = 0; i < 4; i++)
 588:	79 f6       	brne	.-98     	; 0x528 <LCD_MensajeInicial+0x4>
		_delay_ms(200);
		LCD_String(".");
		_delay_ms(200);
	}

}
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <LCD_MensajeTiempo>:

void LCD_MensajeTiempo(uint16_t cuenta)
{
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	8c 01       	movw	r16, r24
	case TIMER_GLOBAL:
		segundos = newtime;
		break;

	case TIMER_LCD:
		segundosLCD = newtime;
 598:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <segundosLCD+0x1>
 59c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <segundosLCD>
void LCD_MensajeTiempo(uint16_t cuenta)
{
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);

	LCD_Up();
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
	LCD_String("Calentando       ");
 5a6:	8e e1       	ldi	r24, 0x1E	; 30
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
	while (tiempo != cuenta)
 5ae:	01 15       	cp	r16, r1
 5b0:	11 05       	cpc	r17, r1
 5b2:	d9 f0       	breq	.+54     	; 0x5ea <LCD_MensajeTiempo+0x5c>
	case TIMER_GLOBAL:
		return segundos;
		break;

	case TIMER_LCD:
		return segundosLCD;
 5b4:	c0 91 29 02 	lds	r28, 0x0229	; 0x800229 <segundosLCD>
 5b8:	d0 91 2a 02 	lds	r29, 0x022A	; 0x80022a <segundosLCD+0x1>
	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
	{
		tiempo = getTime(TIMER_LCD);
		LCD_Down();
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_Number(cuenta - tiempo);
 5c2:	c8 01       	movw	r24, r16
 5c4:	8c 1b       	sub	r24, r28
 5c6:	9d 0b       	sbc	r25, r29
 5c8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_Number>
		LCD_String("        ");
 5cc:	88 e6       	ldi	r24, 0x68	; 104
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_GotoXY(1, 3);
 5d4:	63 e0       	ldi	r22, 0x03	; 3
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_GotoXY>
		LCD_String(" Seg. Rest.");
 5dc:	80 e3       	ldi	r24, 0x30	; 48
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);

	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
 5e4:	0c 17       	cp	r16, r28
 5e6:	1d 07       	cpc	r17, r29
 5e8:	29 f7       	brne	.-54     	; 0x5b4 <LCD_MensajeTiempo+0x26>
		LCD_String("        ");
		LCD_GotoXY(1, 3);
		LCD_String(" Seg. Rest.");
	}

}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	08 95       	ret

000005f4 <LCD_MensajePrincipal>:


void LCD_MensajePrincipal(uint16_t co2data, uint16_t mp25data, uint16_t mp10data, uint16_t codata)
{
 5f4:	cf 92       	push	r12
 5f6:	df 92       	push	r13
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	7c 01       	movw	r14, r24
 606:	eb 01       	movw	r28, r22
 608:	8a 01       	movw	r16, r20
 60a:	69 01       	movw	r12, r18
	case TIMER_GLOBAL:
		return segundos;
		break;

	case TIMER_LCD:
		return segundosLCD;
 60c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <segundosLCD>
 610:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <segundosLCD+0x1>


void LCD_MensajePrincipal(uint16_t co2data, uint16_t mp25data, uint16_t mp10data, uint16_t codata)
{
	uint16_t tiempo = getTime(TIMER_LCD);
	if (tiempo < TIEMPO_SENSORES)
 614:	85 30       	cpi	r24, 0x05	; 5
 616:	91 05       	cpc	r25, r1
 618:	78 f4       	brcc	.+30     	; 0x638 <LCD_MensajePrincipal+0x44>
	{
		LCD_Up();
 61a:	80 e8       	ldi	r24, 0x80	; 128
 61c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_String("   Medidor de    ");
 620:	8c e3       	ldi	r24, 0x3C	; 60
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_Down();
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_String("calidad del aire ");
 62e:	8e e4       	ldi	r24, 0x4E	; 78
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 636:	a1 c0       	rjmp	.+322    	; 0x77a <LCD_MensajePrincipal+0x186>
	}
	else if (tiempo < (2 * TIEMPO_SENSORES) )
 638:	8a 30       	cpi	r24, 0x0A	; 10
 63a:	91 05       	cpc	r25, r1
 63c:	90 f4       	brcc	.+36     	; 0x662 <LCD_MensajePrincipal+0x6e>
	{
		LCD_Up();
 63e:	80 e8       	ldi	r24, 0x80	; 128
 640:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_String("CO2             ");
 644:	80 e6       	ldi	r24, 0x60	; 96
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_Down();
 64c:	80 ec       	ldi	r24, 0xC0	; 192
 64e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_Number(co2data);
 652:	c7 01       	movw	r24, r14
 654:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_Number>
		LCD_String(" ppm             ");
 658:	81 e7       	ldi	r24, 0x71	; 113
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 660:	8c c0       	rjmp	.+280    	; 0x77a <LCD_MensajePrincipal+0x186>
	}
	else if (tiempo < (3 * TIEMPO_SENSORES) )
 662:	8f 30       	cpi	r24, 0x0F	; 15
 664:	91 05       	cpc	r25, r1
 666:	b8 f5       	brcc	.+110    	; 0x6d6 <LCD_MensajePrincipal+0xe2>
	{
		LCD_Up();
 668:	80 e8       	ldi	r24, 0x80	; 128
 66a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_String("PM 2.5          ");
 66e:	83 e8       	ldi	r24, 0x83	; 131
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_Down();
 676:	80 ec       	ldi	r24, 0xC0	; 192
 678:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_Number(mp25data/1000);
 67c:	9e 01       	movw	r18, r28
 67e:	36 95       	lsr	r19
 680:	27 95       	ror	r18
 682:	36 95       	lsr	r19
 684:	27 95       	ror	r18
 686:	36 95       	lsr	r19
 688:	27 95       	ror	r18
 68a:	a5 ec       	ldi	r26, 0xC5	; 197
 68c:	b0 e2       	ldi	r27, 0x20	; 32
 68e:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 692:	8c 01       	movw	r16, r24
 694:	12 95       	swap	r17
 696:	02 95       	swap	r16
 698:	0f 70       	andi	r16, 0x0F	; 15
 69a:	01 27       	eor	r16, r17
 69c:	1f 70       	andi	r17, 0x0F	; 15
 69e:	01 27       	eor	r16, r17
 6a0:	c8 01       	movw	r24, r16
 6a2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_Number>
		LCD_String(".");
 6a6:	8a e3       	ldi	r24, 0x3A	; 58
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_Number(mp25data%1000);
 6ae:	28 ee       	ldi	r18, 0xE8	; 232
 6b0:	33 e0       	ldi	r19, 0x03	; 3
 6b2:	02 9f       	mul	r16, r18
 6b4:	c0 01       	movw	r24, r0
 6b6:	03 9f       	mul	r16, r19
 6b8:	90 0d       	add	r25, r0
 6ba:	12 9f       	mul	r17, r18
 6bc:	90 0d       	add	r25, r0
 6be:	11 24       	eor	r1, r1
 6c0:	9e 01       	movw	r18, r28
 6c2:	28 1b       	sub	r18, r24
 6c4:	39 0b       	sbc	r19, r25
 6c6:	c9 01       	movw	r24, r18
 6c8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_Number>
		LCD_String(" ppm            ");
 6cc:	84 e9       	ldi	r24, 0x94	; 148
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 6d4:	52 c0       	rjmp	.+164    	; 0x77a <LCD_MensajePrincipal+0x186>
	}
	else if (tiempo < (4 * TIEMPO_SENSORES))
 6d6:	84 31       	cpi	r24, 0x14	; 20
 6d8:	91 05       	cpc	r25, r1
 6da:	b8 f5       	brcc	.+110    	; 0x74a <LCD_MensajePrincipal+0x156>
	{
		LCD_Up();
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_String("PM 10           ");
 6e2:	85 ea       	ldi	r24, 0xA5	; 165
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_Down();
 6ea:	80 ec       	ldi	r24, 0xC0	; 192
 6ec:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_Number(mp10data/1000);
 6f0:	98 01       	movw	r18, r16
 6f2:	36 95       	lsr	r19
 6f4:	27 95       	ror	r18
 6f6:	36 95       	lsr	r19
 6f8:	27 95       	ror	r18
 6fa:	36 95       	lsr	r19
 6fc:	27 95       	ror	r18
 6fe:	a5 ec       	ldi	r26, 0xC5	; 197
 700:	b0 e2       	ldi	r27, 0x20	; 32
 702:	0e 94 cb 06 	call	0xd96	; 0xd96 <__umulhisi3>
 706:	ec 01       	movw	r28, r24
 708:	d2 95       	swap	r29
 70a:	c2 95       	swap	r28
 70c:	cf 70       	andi	r28, 0x0F	; 15
 70e:	cd 27       	eor	r28, r29
 710:	df 70       	andi	r29, 0x0F	; 15
 712:	cd 27       	eor	r28, r29
 714:	ce 01       	movw	r24, r28
 716:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_Number>
		LCD_String(".");
 71a:	8a e3       	ldi	r24, 0x3A	; 58
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_Number(mp10data%1000);
 722:	28 ee       	ldi	r18, 0xE8	; 232
 724:	33 e0       	ldi	r19, 0x03	; 3
 726:	c2 9f       	mul	r28, r18
 728:	c0 01       	movw	r24, r0
 72a:	c3 9f       	mul	r28, r19
 72c:	90 0d       	add	r25, r0
 72e:	d2 9f       	mul	r29, r18
 730:	90 0d       	add	r25, r0
 732:	11 24       	eor	r1, r1
 734:	98 01       	movw	r18, r16
 736:	28 1b       	sub	r18, r24
 738:	39 0b       	sbc	r19, r25
 73a:	c9 01       	movw	r24, r18
 73c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_Number>
		LCD_String(" ppm            ");
 740:	84 e9       	ldi	r24, 0x94	; 148
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 748:	18 c0       	rjmp	.+48     	; 0x77a <LCD_MensajePrincipal+0x186>
	}
	else if (tiempo < (5 * TIEMPO_SENSORES) )
 74a:	49 97       	sbiw	r24, 0x19	; 25
 74c:	90 f4       	brcc	.+36     	; 0x772 <LCD_MensajePrincipal+0x17e>
	{
		LCD_Up();
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_String("CO             ");
 754:	86 eb       	ldi	r24, 0xB6	; 182
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
		LCD_Down();
 75c:	80 ec       	ldi	r24, 0xC0	; 192
 75e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
		LCD_Number(codata);
 762:	c6 01       	movw	r24, r12
 764:	0e 94 78 04 	call	0x8f0	; 0x8f0 <LCD_Number>
		LCD_String(" ppm            ");
 768:	84 e9       	ldi	r24, 0x94	; 148
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
 770:	04 c0       	rjmp	.+8      	; 0x77a <LCD_MensajePrincipal+0x186>
	case TIMER_GLOBAL:
		segundos = newtime;
		break;

	case TIMER_LCD:
		segundosLCD = newtime;
 772:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <segundosLCD+0x1>
 776:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <segundosLCD>
	}
	else
	{
		setTime(TIMER_LCD, 0);
	}
}
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	ff 90       	pop	r15
 784:	ef 90       	pop	r14
 786:	df 90       	pop	r13
 788:	cf 90       	pop	r12
 78a:	08 95       	ret

0000078c <I2C_Init>:
Returns:  none
*************************************************************************/
void I2C_Init(void)
{
	/* Set SCL to 50 kHz. Macro definition */
	TWSR = 0x00;			// Prescaler = 1
 78c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = MYTWBR;			// Macro 72
 790:	8a e2       	ldi	r24, 0x2A	; 42
 792:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	/* Enable TWI */
	TWCR = (1 << TWEN);
 796:	84 e0       	ldi	r24, 0x04	; 4
 798:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 79c:	08 95       	ret

0000079e <I2C_Start>:
Returns:  none
*************************************************************************/
void I2C_Start(uint8_t address)
{
	/* Send Start Condition*/
	TWCR |= (1 << TWINT) | (1 << TWSTA);
 79e:	ec eb       	ldi	r30, 0xBC	; 188
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	90 81       	ld	r25, Z
 7a4:	90 6a       	ori	r25, 0xA0	; 160
 7a6:	90 83       	st	Z, r25
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 7a8:	90 81       	ld	r25, Z
 7aa:	99 23       	and	r25, r25
 7ac:	ec f7       	brge	.-6      	; 0x7a8 <I2C_Start+0xa>
	
	/* Send the address and W/R condition */
	TWDR = address;
 7ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT) | (1 << TWEA);
 7b2:	ec eb       	ldi	r30, 0xBC	; 188
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	80 6c       	ori	r24, 0xC0	; 192
 7ba:	80 83       	st	Z, r24
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 7bc:	80 81       	ld	r24, Z
 7be:	88 23       	and	r24, r24
 7c0:	ec f7       	brge	.-6      	; 0x7bc <I2C_Start+0x1e>
}
 7c2:	08 95       	ret

000007c4 <I2C_Stop>:
Returns:  none
*************************************************************************/
void I2C_Stop(void)
{
	/* Send Stop Condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO);
 7c4:	ec eb       	ldi	r30, 0xBC	; 188
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	80 69       	ori	r24, 0x90	; 144
 7cc:	80 83       	st	Z, r24
 7ce:	08 95       	ret

000007d0 <I2C_Transmit>:
Returns:  none
*************************************************************************/
void I2C_Transmit(uint8_t data)
{
	/* Send the Data */
	TWDR = data;
 7d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 7d4:	84 ec       	ldi	r24, 0xC4	; 196
 7d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 7da:	ec eb       	ldi	r30, 0xBC	; 188
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	88 23       	and	r24, r24
 7e2:	ec f7       	brge	.-6      	; 0x7de <I2C_Transmit+0xe>
}
 7e4:	08 95       	ret

000007e6 <sendCMD>:
Allows to write new commands to the LCD 
Input:    CMD	Command to be send
Returns:  none
*************************************************************************/
void sendCMD(uint8_t CMD)
{
 7e6:	1f 93       	push	r17
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	c8 2f       	mov	r28, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 7ee:	8e e4       	ldi	r24, 0x4E	; 78
 7f0:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_Start>
	
	/* Send commands. MS Nibble*/
	I2C_Transmit(bitmask = (CMD & 0xF0) | 0x08);
 7f4:	1c 2f       	mov	r17, r28
 7f6:	10 7f       	andi	r17, 0xF0	; 240
 7f8:	d1 2f       	mov	r29, r17
 7fa:	d8 60       	ori	r29, 0x08	; 8
 7fc:	8d 2f       	mov	r24, r29
 7fe:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 802:	81 2f       	mov	r24, r17
 804:	8c 60       	ori	r24, 0x0C	; 12
 806:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 80a:	8d 2f       	mov	r24, r29
 80c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	
	/* Send commands. LS Nibble*/
	I2C_Transmit(bitmask = ((CMD << 4) & 0xF0) | 0x08);
 810:	80 e1       	ldi	r24, 0x10	; 16
 812:	c8 9f       	mul	r28, r24
 814:	e0 01       	movw	r28, r0
 816:	11 24       	eor	r1, r1
 818:	dc 2f       	mov	r29, r28
 81a:	d8 60       	ori	r29, 0x08	; 8
 81c:	8d 2f       	mov	r24, r29
 81e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 822:	8c 2f       	mov	r24, r28
 824:	8c 60       	ori	r24, 0x0C	; 12
 826:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 82a:	8d 2f       	mov	r24, r29
 82c:	8b 7f       	andi	r24, 0xFB	; 251
 82e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 832:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <I2C_Stop>
}
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	08 95       	ret

0000083e <LCD_Init>:
Returns:  none
*************************************************************************/
void LCD_Init(void)
{
	/* Initialize LCD */
	sendCMD(LCD_8BIT);
 83e:	83 e3       	ldi	r24, 0x33	; 51
 840:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
	sendCMD(LCD_4BIT);
 844:	82 e3       	ldi	r24, 0x32	; 50
 846:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
	sendCMD(LCD_FUNCTION_4BIT_2LINES);
 84a:	88 e2       	ldi	r24, 0x28	; 40
 84c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
	sendCMD(LCD_DISP_ON);
 850:	8c e0       	ldi	r24, 0x0C	; 12
 852:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
	sendCMD(LCD_CLR);
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
 85c:	08 95       	ret

0000085e <LCD_GotoXY>:
Returns:  none
*************************************************************************/
void LCD_GotoXY (uint8_t row, uint8_t col)
{
	/* Change the cursor*/
	if (row == 0)
 85e:	81 11       	cpse	r24, r1
 860:	05 c0       	rjmp	.+10     	; 0x86c <LCD_GotoXY+0xe>
	sendCMD(LCD_ROW1 + col);
 862:	80 e8       	ldi	r24, 0x80	; 128
 864:	86 0f       	add	r24, r22
 866:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
 86a:	08 95       	ret
	if (row == 1)
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	21 f4       	brne	.+8      	; 0x878 <LCD_GotoXY+0x1a>
	sendCMD(LCD_ROW2 + col);
 870:	80 ec       	ldi	r24, 0xC0	; 192
 872:	86 0f       	add	r24, r22
 874:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <sendCMD>
 878:	08 95       	ret

0000087a <sendData>:
Put a char on the LCD Display. 
Input:    data	char to be shown
Returns:  none
*************************************************************************/
void sendData(uint8_t data)
{
 87a:	1f 93       	push	r17
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	c8 2f       	mov	r28, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 882:	8e e4       	ldi	r24, 0x4E	; 78
 884:	0e 94 cf 03 	call	0x79e	; 0x79e <I2C_Start>
	
	/* Send Data. MS Nibble*/
	I2C_Transmit(bitmask = (data & 0xF0) | 0x08 | (1 << RS));
 888:	1c 2f       	mov	r17, r28
 88a:	10 7f       	andi	r17, 0xF0	; 240
 88c:	d1 2f       	mov	r29, r17
 88e:	d9 60       	ori	r29, 0x09	; 9
 890:	8d 2f       	mov	r24, r29
 892:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 896:	81 2f       	mov	r24, r17
 898:	8d 60       	ori	r24, 0x0D	; 13
 89a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 89e:	8d 2f       	mov	r24, r29
 8a0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	
	/* Send Data. LS Nibble*/
	I2C_Transmit(bitmask = ((data << 4) & 0xF0) | 0x08 | (1 << RS));
 8a4:	80 e1       	ldi	r24, 0x10	; 16
 8a6:	c8 9f       	mul	r28, r24
 8a8:	e0 01       	movw	r28, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	dc 2f       	mov	r29, r28
 8ae:	d9 60       	ori	r29, 0x09	; 9
 8b0:	8d 2f       	mov	r24, r29
 8b2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 8b6:	8c 2f       	mov	r24, r28
 8b8:	8d 60       	ori	r24, 0x0D	; 13
 8ba:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 8be:	8d 2f       	mov	r24, r29
 8c0:	8b 7f       	andi	r24, 0xFB	; 251
 8c2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 8c6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <I2C_Stop>
}
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	1f 91       	pop	r17
 8d0:	08 95       	ret

000008d2 <LCD_String>:
Put a String on the LCD Display. 
Input:    arr1	String to be shown
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	ec 01       	movw	r28, r24
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 8d8:	88 81       	ld	r24, Y
 8da:	88 23       	and	r24, r24
 8dc:	31 f0       	breq	.+12     	; 0x8ea <LCD_String+0x18>
 8de:	21 96       	adiw	r28, 0x01	; 1
	{
		sendData(*arr1);		// Send 1 char at the time
 8e0:	0e 94 3d 04 	call	0x87a	; 0x87a <sendData>
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 8e4:	89 91       	ld	r24, Y+
 8e6:	81 11       	cpse	r24, r1
 8e8:	fb cf       	rjmp	.-10     	; 0x8e0 <LCD_String+0xe>
	{
		sendData(*arr1);		// Send 1 char at the time
		arr1++;					// Increment the index
	}
}
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <LCD_Number>:
Put a Number on the LCD Display. 
Input:    numb	number to be shown
Returns:  none
*************************************************************************/
void LCD_Number(uint16_t numb)
{
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <LCD_Number+0x6>
 8f6:	00 d0       	rcall	.+0      	; 0x8f8 <LCD_Number+0x8>
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 8fc:	4a e0       	ldi	r20, 0x0A	; 10
 8fe:	be 01       	movw	r22, r28
 900:	6f 5f       	subi	r22, 0xFF	; 255
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__itoa_ncheck>
	char array[4];				// 4 digits of the number. Change if needed
	itoa(numb, array, 10);		// Radix for the conversion: 10
	LCD_String(array);			// Send the ASCII codes obtained from data
 908:	ce 01       	movw	r24, r28
 90a:	01 96       	adiw	r24, 0x01	; 1
 90c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_String>
	
}
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	0f 90       	pop	r0
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	08 95       	ret

0000091e <RGBLed_Init>:
Input:    none
Returns:  none
*************************************************************************/
void RGBLed_Init(void)
{
	DDR_RGB |= (1<<PIN_R)|(1<<PIN_G)|(1<<PIN_B);		// Pins as output
 91e:	87 b1       	in	r24, 0x07	; 7
 920:	8e 60       	ori	r24, 0x0E	; 14
 922:	87 b9       	out	0x07, r24	; 7
	RGB_CLEAR();										// Turn off the pins
 924:	88 b1       	in	r24, 0x08	; 8
 926:	8e 60       	ori	r24, 0x0E	; 14
 928:	88 b9       	out	0x08, r24	; 8
 92a:	08 95       	ret

0000092c <RGBLed_Color>:
Input:    color 	color the led will shown
Returns:  none
*************************************************************************/
void RGBLed_Color(uint8_t color)
{
	RGB_CLEAR();
 92c:	98 b1       	in	r25, 0x08	; 8
 92e:	9e 60       	ori	r25, 0x0E	; 14
 930:	98 b9       	out	0x08, r25	; 8
	switch(color)
 932:	82 30       	cpi	r24, 0x02	; 2
 934:	81 f0       	breq	.+32     	; 0x956 <RGBLed_Color+0x2a>
 936:	28 f4       	brcc	.+10     	; 0x942 <RGBLed_Color+0x16>
 938:	88 23       	and	r24, r24
 93a:	49 f0       	breq	.+18     	; 0x94e <RGBLed_Color+0x22>
 93c:	81 30       	cpi	r24, 0x01	; 1
 93e:	49 f0       	breq	.+18     	; 0x952 <RGBLed_Color+0x26>
 940:	08 95       	ret
 942:	84 30       	cpi	r24, 0x04	; 4
 944:	69 f0       	breq	.+26     	; 0x960 <RGBLed_Color+0x34>
 946:	48 f0       	brcs	.+18     	; 0x95a <RGBLed_Color+0x2e>
 948:	85 30       	cpi	r24, 0x05	; 5
 94a:	69 f0       	breq	.+26     	; 0x966 <RGBLed_Color+0x3a>
 94c:	08 95       	ret
	{
		case RED:
			RGB_RED();
 94e:	41 98       	cbi	0x08, 1	; 8
			break;
 950:	08 95       	ret
		case GREEN:
			RGB_GREEN();
 952:	42 98       	cbi	0x08, 2	; 8
			break;
 954:	08 95       	ret
		case BLUE:
			RGB_BLUE();
 956:	43 98       	cbi	0x08, 3	; 8
			break;
 958:	08 95       	ret
		case YELLOW:
			RGB_GREEN();
 95a:	42 98       	cbi	0x08, 2	; 8
			RGB_RED();
 95c:	41 98       	cbi	0x08, 1	; 8
			break;
 95e:	08 95       	ret
		case CYAN:
			RGB_BLUE();
 960:	43 98       	cbi	0x08, 3	; 8
			RGB_GREEN();
 962:	42 98       	cbi	0x08, 2	; 8
			break;
 964:	08 95       	ret
		case MAGENTA:
			RGB_BLUE();
 966:	43 98       	cbi	0x08, 3	; 8
			RGB_RED();
 968:	41 98       	cbi	0x08, 1	; 8
 96a:	08 95       	ret

0000096c <RGBLed_Blink>:
Blink the led every 250ms. The value can be modified if needed.
Input:    none
Returns:  none
*************************************************************************/
void RGBLed_Blink(void)
{
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
	uint8_t rgb_temp;
	rgb_temp = PORT_RGB;				// Guarda pines del puerto
 970:	d8 b1       	in	r29, 0x08	; 8
 972:	c3 e0       	ldi	r28, 0x03	; 3
	for (uint8_t i = 0; i < 3; i++)		// Parpadea 3 veces
	{
		RGB_CLEAR();
 974:	88 b1       	in	r24, 0x08	; 8
 976:	8e 60       	ori	r24, 0x0E	; 14
 978:	88 b9       	out	0x08, r24	; 8
 97a:	83 e2       	ldi	r24, 0x23	; 35
 97c:	94 ef       	ldi	r25, 0xF4	; 244
 97e:	01 97       	sbiw	r24, 0x01	; 1
 980:	f1 f7       	brne	.-4      	; 0x97e <RGBLed_Blink+0x12>
 982:	00 c0       	rjmp	.+0      	; 0x984 <RGBLed_Blink+0x18>
 984:	00 00       	nop
		_delay_ms(250);
		RGBLed_Color(BLUE);
 986:	82 e0       	ldi	r24, 0x02	; 2
 988:	0e 94 96 04 	call	0x92c	; 0x92c <RGBLed_Color>
 98c:	83 e2       	ldi	r24, 0x23	; 35
 98e:	94 ef       	ldi	r25, 0xF4	; 244
 990:	01 97       	sbiw	r24, 0x01	; 1
 992:	f1 f7       	brne	.-4      	; 0x990 <RGBLed_Blink+0x24>
 994:	00 c0       	rjmp	.+0      	; 0x996 <RGBLed_Blink+0x2a>
 996:	00 00       	nop
 998:	c1 50       	subi	r28, 0x01	; 1
*************************************************************************/
void RGBLed_Blink(void)
{
	uint8_t rgb_temp;
	rgb_temp = PORT_RGB;				// Guarda pines del puerto
	for (uint8_t i = 0; i < 3; i++)		// Parpadea 3 veces
 99a:	61 f7       	brne	.-40     	; 0x974 <RGBLed_Blink+0x8>
		RGB_CLEAR();
		_delay_ms(250);
		RGBLed_Color(BLUE);
		_delay_ms(250);
	}
	PORT_RGB = rgb_temp;				// Regresa pines de puerto
 99c:	d8 b9       	out	0x08, r29	; 8
}
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	08 95       	ret

000009a4 <CO2getData>:
#include "UART.h"				// UART-HW
#include "comps.h"				// MUX 
#include <util/delay.h>			// Delay

uint16_t CO2getData()
{
 9a4:	ef 92       	push	r14
 9a6:	ff 92       	push	r15
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
 9b4:	62 97       	sbiw	r28, 0x12	; 18
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
	/* Declaracion de variables */
	uint8_t gasCommand[9] = {GASCOMMAND1, GASCOMMAND2, GASCOMMAND3, GASCOMMAND4, GASCOMMAND5, GASCOMMAND6, GASCOMMAND7, GASCOMMAND8, GASCOMMAND9};
 9c0:	89 e0       	ldi	r24, 0x09	; 9
 9c2:	e0 e0       	ldi	r30, 0x00	; 0
 9c4:	f1 e0       	ldi	r31, 0x01	; 1
 9c6:	de 01       	movw	r26, r28
 9c8:	11 96       	adiw	r26, 0x01	; 1
 9ca:	01 90       	ld	r0, Z+
 9cc:	0d 92       	st	X+, r0
 9ce:	8a 95       	dec	r24
 9d0:	e1 f7       	brne	.-8      	; 0x9ca <CO2getData+0x26>
	uint8_t data[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 9d2:	7e 01       	movw	r14, r28
 9d4:	8a e0       	ldi	r24, 0x0A	; 10
 9d6:	e8 0e       	add	r14, r24
 9d8:	f1 1c       	adc	r15, r1
 9da:	89 e0       	ldi	r24, 0x09	; 9
 9dc:	f7 01       	movw	r30, r14
 9de:	11 92       	st	Z+, r1
 9e0:	8a 95       	dec	r24
 9e2:	e9 f7       	brne	.-6      	; 0x9de <CO2getData+0x3a>
	uint16_t gasC = 0;
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	0e 94 01 02 	call	0x402	; 0x402 <Mux_Channel>
 9ea:	8e 01       	movw	r16, r28
 9ec:	0f 5f       	subi	r16, 0xFF	; 255
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
	{
		USART_Transmit(gasCommand[i]);
 9f0:	f8 01       	movw	r30, r16
 9f2:	81 91       	ld	r24, Z+
 9f4:	8f 01       	movw	r16, r30
 9f6:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
 9fa:	0e 15       	cp	r16, r14
 9fc:	1f 05       	cpc	r17, r15
 9fe:	c1 f7       	brne	.-16     	; 0x9f0 <CO2getData+0x4c>
 a00:	8e 01       	movw	r16, r28
 a02:	06 5f       	subi	r16, 0xF6	; 246
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	7e 01       	movw	r14, r28
 a08:	f3 e1       	ldi	r31, 0x13	; 19
 a0a:	ef 0e       	add	r14, r31
 a0c:	f1 1c       	adc	r15, r1
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
	{
		data[i] = USART_Receive();
 a0e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <USART_Receive>
 a12:	f8 01       	movw	r30, r16
 a14:	81 93       	st	Z+, r24
 a16:	8f 01       	movw	r16, r30
	{
		USART_Transmit(gasCommand[i]);
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
 a18:	ee 15       	cp	r30, r14
 a1a:	ff 05       	cpc	r31, r15
 a1c:	c1 f7       	brne	.-16     	; 0xa0e <CO2getData+0x6a>
	{
		data[i] = USART_Receive();
	}

	/* Mascara para concetración de CO2 */
	gasC = (data[2]<<8) | (data[3]);
 a1e:	8c 85       	ldd	r24, Y+12	; 0x0c
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	98 2f       	mov	r25, r24
 a24:	88 27       	eor	r24, r24
 a26:	2d 85       	ldd	r18, Y+13	; 0x0d
	
	/* Regresa la concentración de CO2*/
	return gasC;
}
 a28:	82 2b       	or	r24, r18
 a2a:	62 96       	adiw	r28, 0x12	; 18
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	1f 91       	pop	r17
 a3c:	0f 91       	pop	r16
 a3e:	ff 90       	pop	r15
 a40:	ef 90       	pop	r14
 a42:	08 95       	ret

00000a44 <MPswitchMode>:


void MPswitchMode(uint8_t t)
{
 a44:	1f 93       	push	r17
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
 a4a:	18 2f       	mov	r17, r24
	/* Declaración de variables */
	uint16_t temp = START_BYTE1+START_BYTE2 +CHANGE_MODE +t;
 a4c:	c8 2f       	mov	r28, r24
 a4e:	d0 e0       	ldi	r29, 0x00	; 0
 a50:	c0 59       	subi	r28, 0x90	; 144
 a52:	de 4f       	sbci	r29, 0xFE	; 254
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	0e 94 01 02 	call	0x402	; 0x402 <Mux_Channel>
		
	/* Solicitud para cambiar de modo */
	USART_Transmit(START_BYTE1);
 a5a:	82 e4       	ldi	r24, 0x42	; 66
 a5c:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(START_BYTE2);
 a60:	8d e4       	ldi	r24, 0x4D	; 77
 a62:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(CHANGE_MODE);
 a66:	81 ee       	ldi	r24, 0xE1	; 225
 a68:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 a6c:	80 e0       	ldi	r24, 0x00	; 0
 a6e:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(t);
 a72:	81 2f       	mov	r24, r17
 a74:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(LRCH);
 a78:	8d 2f       	mov	r24, r29
 a7a:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(LRCL);
 a7e:	8c 2f       	mov	r24, r28
 a80:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
}
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	1f 91       	pop	r17
 a8a:	08 95       	ret

00000a8c <MPgetData>:


void MPgetData(uint8_t *array)
{
 a8c:	cf 92       	push	r12
 a8e:	df 92       	push	r13
 a90:	ef 92       	push	r14
 a92:	ff 92       	push	r15
 a94:	0f 93       	push	r16
 a96:	1f 93       	push	r17
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
 a9c:	cd b7       	in	r28, 0x3d	; 61
 a9e:	de b7       	in	r29, 0x3e	; 62
 aa0:	6f 97       	sbiw	r28, 0x1f	; 31
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	de bf       	out	0x3e, r29	; 62
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	cd bf       	out	0x3d, r28	; 61
 aac:	6c 01       	movw	r12, r24
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	uint8_t Buff_MP[31];
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 aae:	82 e0       	ldi	r24, 0x02	; 2
 ab0:	0e 94 01 02 	call	0x402	; 0x402 <Mux_Channel>
		
	/* Solicitud para recibir datos */
	USART_Transmit(START_BYTE1);
 ab4:	82 e4       	ldi	r24, 0x42	; 66
 ab6:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(START_BYTE2);
 aba:	8d e4       	ldi	r24, 0x4D	; 77
 abc:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(READ_DATA);
 ac0:	82 ee       	ldi	r24, 0xE2	; 226
 ac2:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(LRCH);
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(LRCL);
 ad8:	81 e7       	ldi	r24, 0x71	; 113
 ada:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
 ade:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <USART_Receive>
 ae2:	82 34       	cpi	r24, 0x42	; 66
 ae4:	e1 f7       	brne	.-8      	; 0xade <MPgetData+0x52>
 ae6:	8e 01       	movw	r16, r28
 ae8:	0f 5f       	subi	r16, 0xFF	; 255
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	7e 01       	movw	r14, r28
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	e8 0e       	add	r14, r24
 af2:	f1 1c       	adc	r15, r1
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
	{
		Buff_MP[i] = USART_Receive();
 af4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <USART_Receive>
 af8:	f8 01       	movw	r30, r16
 afa:	81 93       	st	Z+, r24
 afc:	8f 01       	movw	r16, r30
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
 afe:	ee 15       	cp	r30, r14
 b00:	ff 05       	cpc	r31, r15
 b02:	c1 f7       	brne	.-16     	; 0xaf4 <MPgetData+0x68>
	{
		Buff_MP[i] = USART_Receive();
	}
	/* MP 2.5 */
	array[0] = Buff_MP[6];
 b04:	8f 81       	ldd	r24, Y+7	; 0x07
 b06:	f6 01       	movw	r30, r12
 b08:	80 83       	st	Z, r24
	array[1] = Buff_MP[7];
 b0a:	88 85       	ldd	r24, Y+8	; 0x08
 b0c:	81 83       	std	Z+1, r24	; 0x01
	/* MP 10 */
	array[2] = Buff_MP[8];
 b0e:	89 85       	ldd	r24, Y+9	; 0x09
 b10:	82 83       	std	Z+2, r24	; 0x02
	array[3] = Buff_MP[9];
 b12:	8a 85       	ldd	r24, Y+10	; 0x0a
 b14:	83 83       	std	Z+3, r24	; 0x03
}
 b16:	6f 96       	adiw	r28, 0x1f	; 31
 b18:	0f b6       	in	r0, 0x3f	; 63
 b1a:	f8 94       	cli
 b1c:	de bf       	out	0x3e, r29	; 62
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	cd bf       	out	0x3d, r28	; 61
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	1f 91       	pop	r17
 b28:	0f 91       	pop	r16
 b2a:	ff 90       	pop	r15
 b2c:	ef 90       	pop	r14
 b2e:	df 90       	pop	r13
 b30:	cf 90       	pop	r12
 b32:	08 95       	ret

00000b34 <COswitchMode>:


void COswitchMode(uint8_t modo)
{
 b34:	cf 93       	push	r28
 b36:	c8 2f       	mov	r28, r24
	/* Cálculo de bit de error */
	uint16_t CHECK_SUM = ~(1+SWITCH_COMMAND+modo)+1;
	
	/* Habilita el mux para el CO */
	Mux_Channel(CHANNEL_CO);
 b38:	83 e0       	ldi	r24, 0x03	; 3
 b3a:	0e 94 01 02 	call	0x402	; 0x402 <Mux_Channel>
	
	/* Solicitud para cambiar de modo */
	USART_Transmit(START_BYTE);
 b3e:	8f ef       	ldi	r24, 0xFF	; 255
 b40:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x01);
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(SWITCH_COMMAND);
 b4a:	88 e7       	ldi	r24, 0x78	; 120
 b4c:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(modo);
 b50:	8c 2f       	mov	r24, r28
 b52:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 b62:	80 e0       	ldi	r24, 0x00	; 0
 b64:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 b68:	80 e0       	ldi	r24, 0x00	; 0
 b6a:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(CHECK_SUM);
 b6e:	87 e8       	ldi	r24, 0x87	; 135
 b70:	8c 1b       	sub	r24, r28
 b72:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
}
 b76:	cf 91       	pop	r28
 b78:	08 95       	ret

00000b7a <COgetData>:

uint16_t COgetData(void)
{
 b7a:	ef 92       	push	r14
 b7c:	ff 92       	push	r15
 b7e:	0f 93       	push	r16
 b80:	1f 93       	push	r17
 b82:	cf 93       	push	r28
 b84:	df 93       	push	r29
 b86:	cd b7       	in	r28, 0x3d	; 61
 b88:	de b7       	in	r29, 0x3e	; 62
 b8a:	28 97       	sbiw	r28, 0x08	; 8
 b8c:	0f b6       	in	r0, 0x3f	; 63
 b8e:	f8 94       	cli
 b90:	de bf       	out	0x3e, r29	; 62
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	cd bf       	out	0x3d, r28	; 61
	uint16_t CHECK_SUM = ~(1+COMMAND)+1;
	uint8_t Buff_CO[8];
	uint16_t c;
	
	/* Habilita el mux para el CO */
	Mux_Channel(CHANNEL_CO);
 b96:	83 e0       	ldi	r24, 0x03	; 3
 b98:	0e 94 01 02 	call	0x402	; 0x402 <Mux_Channel>
	
	/* Solicitud para recibir datos */
	USART_Transmit(START_BYTE);
 b9c:	8f ef       	ldi	r24, 0xFF	; 255
 b9e:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x01);
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(COMMAND);
 ba8:	86 e8       	ldi	r24, 0x86	; 134
 baa:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 bae:	80 e0       	ldi	r24, 0x00	; 0
 bb0:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 bb4:	80 e0       	ldi	r24, 0x00	; 0
 bb6:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 bba:	80 e0       	ldi	r24, 0x00	; 0
 bbc:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(0x00);
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	USART_Transmit(CHECK_SUM);
 bcc:	89 e7       	ldi	r24, 0x79	; 121
 bce:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
	
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
 bd2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <USART_Receive>
 bd6:	8f 3f       	cpi	r24, 0xFF	; 255
 bd8:	e1 f7       	brne	.-8      	; 0xbd2 <COgetData+0x58>
 bda:	8e 01       	movw	r16, r28
 bdc:	0f 5f       	subi	r16, 0xFF	; 255
 bde:	1f 4f       	sbci	r17, 0xFF	; 255
 be0:	7e 01       	movw	r14, r28
 be2:	89 e0       	ldi	r24, 0x09	; 9
 be4:	e8 0e       	add	r14, r24
 be6:	f1 1c       	adc	r15, r1
	for (uint8_t i= 0; i<8; i++)
	{
		Buff_CO[i] = USART_Receive();
 be8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <USART_Receive>
 bec:	f8 01       	movw	r30, r16
 bee:	81 93       	st	Z+, r24
 bf0:	8f 01       	movw	r16, r30
	USART_Transmit(0x00);
	USART_Transmit(CHECK_SUM);
	
	/* Recibe datos */
	while (USART_Receive() != START_BYTE){}	// Espera el bit de inicio
	for (uint8_t i= 0; i<8; i++)
 bf2:	ee 15       	cp	r30, r14
 bf4:	ff 05       	cpc	r31, r15
 bf6:	c1 f7       	brne	.-16     	; 0xbe8 <COgetData+0x6e>
	{
		Buff_CO[i] = USART_Receive();
	}
	
	/* Concentracion de CO */
	c = 256*Buff_CO[1] + Buff_CO[2];
 bf8:	8a 81       	ldd	r24, Y+2	; 0x02
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	98 2f       	mov	r25, r24
 bfe:	88 27       	eor	r24, r24
 c00:	2b 81       	ldd	r18, Y+3	; 0x03
	return c;
}
 c02:	82 0f       	add	r24, r18
 c04:	91 1d       	adc	r25, r1
 c06:	28 96       	adiw	r28, 0x08	; 8
 c08:	0f b6       	in	r0, 0x3f	; 63
 c0a:	f8 94       	cli
 c0c:	de bf       	out	0x3e, r29	; 62
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	cd bf       	out	0x3d, r28	; 61
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	1f 91       	pop	r17
 c18:	0f 91       	pop	r16
 c1a:	ff 90       	pop	r15
 c1c:	ef 90       	pop	r14
 c1e:	08 95       	ret

00000c20 <USART_Init>:
Returns:  none
*************************************************************************/
void USART_Init(unsigned int ubrr_val)
{
	/* Set the baud rate */
	UBRR0H = (uint8_t) (ubrr_val>>8);                  
 c20:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t) ubrr_val;
 c24:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable 2X Mode */ 
	UCSR0A = (1<<U2X0);
 c28:	82 e0       	ldi	r24, 0x02	; 2
 c2a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	/* Enable USART receiver and transmitter */
	UCSR0B = ((1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)); 
 c2e:	88 e9       	ldi	r24, 0x98	; 152
 c30:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	/* Set frame format: 8 data 1stop */
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 c34:	86 e0       	ldi	r24, 0x06	; 6
 c36:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	/* Flush buffers */    
	USART_RxTail = 0;
 c3a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <USART_RxTail>
	USART_RxHead = 0;
 c3e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <USART_RxHead>
	USART_TxTail = 0;
 c42:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <USART_TxTail>
	USART_TxHead = 0;
 c46:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <USART_TxHead>
 c4a:	08 95       	ret

00000c4c <__vector_18>:
Interrupt Vector for the RX Mode.
If there are new unread data this ISR will execute. Saves the data and
change the index of the RX Buffer.
*************************************************************************/
ISR(USART_RX_vect)
{
 c4c:	1f 92       	push	r1
 c4e:	0f 92       	push	r0
 c50:	0f b6       	in	r0, 0x3f	; 63
 c52:	0f 92       	push	r0
 c54:	11 24       	eor	r1, r1
 c56:	8f 93       	push	r24
 c58:	ef 93       	push	r30
 c5a:	ff 93       	push	r31
	uint8_t data;
	uint8_t tmphead;

	/* Read the received data */
	data = UDR0;                 
 c5c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/* Calculate buffer index */
	tmphead = (USART_RxHead + 1) & USART_RX_BUFFER_MASK;
 c60:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <USART_RxHead>
 c64:	ef 5f       	subi	r30, 0xFF	; 255
 c66:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_RxHead = tmphead;
 c68:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <USART_RxHead>
	/* Store received data in buffer */
	USART_RxBuf[tmphead] = data; 
 c6c:	f0 e0       	ldi	r31, 0x00	; 0
 c6e:	e9 5f       	subi	r30, 0xF9	; 249
 c70:	fd 4f       	sbci	r31, 0xFD	; 253
 c72:	80 83       	st	Z, r24
}
 c74:	ff 91       	pop	r31
 c76:	ef 91       	pop	r30
 c78:	8f 91       	pop	r24
 c7a:	0f 90       	pop	r0
 c7c:	0f be       	out	0x3f, r0	; 63
 c7e:	0f 90       	pop	r0
 c80:	1f 90       	pop	r1
 c82:	18 95       	reti

00000c84 <__vector_19>:
If the buffer of the UART is empty this ISR will execute. Check for new 
data to be sent and puts that into the buffer . Change the index of the 
TX Buffer.
*************************************************************************/
ISR(USART_UDRE_vect)
{
 c84:	1f 92       	push	r1
 c86:	0f 92       	push	r0
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	0f 92       	push	r0
 c8c:	11 24       	eor	r1, r1
 c8e:	8f 93       	push	r24
 c90:	9f 93       	push	r25
 c92:	ef 93       	push	r30
 c94:	ff 93       	push	r31
	uint8_t tmptail;

	/* Check if all data is transmitted */
	if (USART_TxHead != USART_TxTail) 
 c96:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <USART_TxHead>
 c9a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USART_TxTail>
 c9e:	98 17       	cp	r25, r24
 ca0:	69 f0       	breq	.+26     	; 0xcbc <__vector_19+0x38>
	{
		/* Calculate buffer index */
		tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
 ca2:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <USART_TxTail>
 ca6:	ef 5f       	subi	r30, 0xFF	; 255
 ca8:	e7 70       	andi	r30, 0x07	; 7
		/* Store new index */
		USART_TxTail = tmptail;      
 caa:	e0 93 fb 01 	sts	0x01FB, r30	; 0x8001fb <USART_TxTail>
		/* Start transmission */
		UDR0 = USART_TxBuf[tmptail];  
 cae:	f0 e0       	ldi	r31, 0x00	; 0
 cb0:	e3 50       	subi	r30, 0x03	; 3
 cb2:	fe 4f       	sbci	r31, 0xFE	; 254
 cb4:	80 81       	ld	r24, Z
 cb6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 cba:	05 c0       	rjmp	.+10     	; 0xcc6 <__vector_19+0x42>
	} else 
	{       
		/* Disable UDRE interrupt */
		UCSR0B &= ~(1<<UDRIE0);         
 cbc:	e1 ec       	ldi	r30, 0xC1	; 193
 cbe:	f0 e0       	ldi	r31, 0x00	; 0
 cc0:	80 81       	ld	r24, Z
 cc2:	8f 7d       	andi	r24, 0xDF	; 223
 cc4:	80 83       	st	Z, r24
	}
}
 cc6:	ff 91       	pop	r31
 cc8:	ef 91       	pop	r30
 cca:	9f 91       	pop	r25
 ccc:	8f 91       	pop	r24
 cce:	0f 90       	pop	r0
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	0f 90       	pop	r0
 cd4:	1f 90       	pop	r1
 cd6:	18 95       	reti

00000cd8 <USART_Receive>:
uint8_t USART_Receive(void)
{
	uint8_t tmptail;
	
	/* Wait for incoming data */
	while (USART_RxHead == USART_RxTail);
 cd8:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <USART_RxHead>
 cdc:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USART_RxTail>
 ce0:	98 17       	cp	r25, r24
 ce2:	d1 f3       	breq	.-12     	; 0xcd8 <USART_Receive>
	/* Calculate buffer index */
	tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
 ce4:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <USART_RxTail>
 ce8:	ef 5f       	subi	r30, 0xFF	; 255
 cea:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_RxTail = tmptail;                
 cec:	e0 93 05 02 	sts	0x0205, r30	; 0x800205 <USART_RxTail>
	/* Return data */
	return USART_RxBuf[tmptail];          
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	e9 5f       	subi	r30, 0xF9	; 249
 cf4:	fd 4f       	sbci	r31, 0xFD	; 253
}
 cf6:	80 81       	ld	r24, Z
 cf8:	08 95       	ret

00000cfa <USART_ReceiveIf>:
uint8_t USART_ReceiveIf(void)
{
	uint8_t tmptail;
	
	/* If there is new data */
	if (USART_RxHead != USART_RxTail)
 cfa:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <USART_RxHead>
 cfe:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USART_RxTail>
 d02:	98 17       	cp	r25, r24
 d04:	59 f0       	breq	.+22     	; 0xd1c <USART_ReceiveIf+0x22>
	{
		/* Calculate buffer index */
		tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
 d06:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <USART_RxTail>
 d0a:	ef 5f       	subi	r30, 0xFF	; 255
 d0c:	e7 70       	andi	r30, 0x07	; 7
		/* Store new index */
		USART_RxTail = tmptail;
 d0e:	e0 93 05 02 	sts	0x0205, r30	; 0x800205 <USART_RxTail>
		/* Return data */
		return USART_RxBuf[tmptail];
 d12:	f0 e0       	ldi	r31, 0x00	; 0
 d14:	e9 5f       	subi	r30, 0xF9	; 249
 d16:	fd 4f       	sbci	r31, 0xFD	; 253
 d18:	80 81       	ld	r24, Z
 d1a:	08 95       	ret
	}
	else
	{
		return 0;
 d1c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 d1e:	08 95       	ret

00000d20 <USART_Transmit>:
void USART_Transmit(uint8_t data)
{
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 d20:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <USART_TxHead>
 d24:	2f 5f       	subi	r18, 0xFF	; 255
 d26:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (tmphead == USART_TxTail);
 d28:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <USART_TxTail>
 d2c:	29 17       	cp	r18, r25
 d2e:	e1 f3       	breq	.-8      	; 0xd28 <USART_Transmit+0x8>
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
 d30:	e2 2f       	mov	r30, r18
 d32:	f0 e0       	ldi	r31, 0x00	; 0
 d34:	e3 50       	subi	r30, 0x03	; 3
 d36:	fe 4f       	sbci	r31, 0xFE	; 254
 d38:	80 83       	st	Z, r24
	/* Store new index */
	USART_TxHead = tmphead;               
 d3a:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <USART_TxHead>
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);                    
 d3e:	e1 ec       	ldi	r30, 0xC1	; 193
 d40:	f0 e0       	ldi	r31, 0x00	; 0
 d42:	80 81       	ld	r24, Z
 d44:	80 62       	ori	r24, 0x20	; 32
 d46:	80 83       	st	Z, r24
 d48:	08 95       	ret

00000d4a <USART_putString>:
Send String through UART. 
Input:    StringPtr	String to be send
Returns:  none
*************************************************************************/
void USART_putString(char* StringPtr)
{
 d4a:	cf 93       	push	r28
 d4c:	df 93       	push	r29
 d4e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00) 	// Last char will be null. Check if there are more characters to send
 d50:	88 81       	ld	r24, Y
 d52:	88 23       	and	r24, r24
 d54:	31 f0       	breq	.+12     	; 0xd62 <USART_putString+0x18>
 d56:	21 96       	adiw	r28, 0x01	; 1
	{				
		USART_Transmit(*StringPtr);	// Send 1 char at a time
 d58:	0e 94 90 06 	call	0xd20	; 0xd20 <USART_Transmit>
Input:    StringPtr	String to be send
Returns:  none
*************************************************************************/
void USART_putString(char* StringPtr)
{
	while(*StringPtr != 0x00) 	// Last char will be null. Check if there are more characters to send
 d5c:	89 91       	ld	r24, Y+
 d5e:	81 11       	cpse	r24, r1
 d60:	fb cf       	rjmp	.-10     	; 0xd58 <USART_putString+0xe>
	{				
		USART_Transmit(*StringPtr);	// Send 1 char at a time
		StringPtr++;					// Increment the index
	}
}
 d62:	df 91       	pop	r29
 d64:	cf 91       	pop	r28
 d66:	08 95       	ret

00000d68 <USART_putNumber>:
Send Number through UART. 
Input:    data	Number to be send
Returns:  none
*************************************************************************/
void USART_putNumber(uint16_t data)
{
 d68:	cf 93       	push	r28
 d6a:	df 93       	push	r29
 d6c:	00 d0       	rcall	.+0      	; 0xd6e <USART_putNumber+0x6>
 d6e:	00 d0       	rcall	.+0      	; 0xd70 <USART_putNumber+0x8>
 d70:	cd b7       	in	r28, 0x3d	; 61
 d72:	de b7       	in	r29, 0x3e	; 62
 d74:	4a e0       	ldi	r20, 0x0A	; 10
 d76:	be 01       	movw	r22, r28
 d78:	6f 5f       	subi	r22, 0xFF	; 255
 d7a:	7f 4f       	sbci	r23, 0xFF	; 255
 d7c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__itoa_ncheck>
	char array[4];				// 4 digits of the number. Change if needed
	itoa(data, array, 10);		// Radix for the conversion: 10
	USART_putString(array);		// Send the ASCII codes obtained from data
 d80:	ce 01       	movw	r24, r28
 d82:	01 96       	adiw	r24, 0x01	; 1
 d84:	0e 94 a5 06 	call	0xd4a	; 0xd4a <USART_putString>
 d88:	0f 90       	pop	r0
 d8a:	0f 90       	pop	r0
 d8c:	0f 90       	pop	r0
 d8e:	0f 90       	pop	r0
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	08 95       	ret

00000d96 <__umulhisi3>:
 d96:	a2 9f       	mul	r26, r18
 d98:	b0 01       	movw	r22, r0
 d9a:	b3 9f       	mul	r27, r19
 d9c:	c0 01       	movw	r24, r0
 d9e:	a3 9f       	mul	r26, r19
 da0:	70 0d       	add	r23, r0
 da2:	81 1d       	adc	r24, r1
 da4:	11 24       	eor	r1, r1
 da6:	91 1d       	adc	r25, r1
 da8:	b2 9f       	mul	r27, r18
 daa:	70 0d       	add	r23, r0
 dac:	81 1d       	adc	r24, r1
 dae:	11 24       	eor	r1, r1
 db0:	91 1d       	adc	r25, r1
 db2:	08 95       	ret

00000db4 <__itoa_ncheck>:
 db4:	bb 27       	eor	r27, r27
 db6:	4a 30       	cpi	r20, 0x0A	; 10
 db8:	31 f4       	brne	.+12     	; 0xdc6 <__itoa_ncheck+0x12>
 dba:	99 23       	and	r25, r25
 dbc:	22 f4       	brpl	.+8      	; 0xdc6 <__itoa_ncheck+0x12>
 dbe:	bd e2       	ldi	r27, 0x2D	; 45
 dc0:	90 95       	com	r25
 dc2:	81 95       	neg	r24
 dc4:	9f 4f       	sbci	r25, 0xFF	; 255
 dc6:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__utoa_common>

00000dca <__utoa_ncheck>:
 dca:	bb 27       	eor	r27, r27

00000dcc <__utoa_common>:
 dcc:	fb 01       	movw	r30, r22
 dce:	55 27       	eor	r21, r21
 dd0:	aa 27       	eor	r26, r26
 dd2:	88 0f       	add	r24, r24
 dd4:	99 1f       	adc	r25, r25
 dd6:	aa 1f       	adc	r26, r26
 dd8:	a4 17       	cp	r26, r20
 dda:	10 f0       	brcs	.+4      	; 0xde0 <__utoa_common+0x14>
 ddc:	a4 1b       	sub	r26, r20
 dde:	83 95       	inc	r24
 de0:	50 51       	subi	r21, 0x10	; 16
 de2:	b9 f7       	brne	.-18     	; 0xdd2 <__utoa_common+0x6>
 de4:	a0 5d       	subi	r26, 0xD0	; 208
 de6:	aa 33       	cpi	r26, 0x3A	; 58
 de8:	08 f0       	brcs	.+2      	; 0xdec <__utoa_common+0x20>
 dea:	a9 5d       	subi	r26, 0xD9	; 217
 dec:	a1 93       	st	Z+, r26
 dee:	00 97       	sbiw	r24, 0x00	; 0
 df0:	79 f7       	brne	.-34     	; 0xdd0 <__utoa_common+0x4>
 df2:	b1 11       	cpse	r27, r1
 df4:	b1 93       	st	Z+, r27
 df6:	11 92       	st	Z+, r1
 df8:	cb 01       	movw	r24, r22
 dfa:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <strrev>

00000dfe <strrev>:
 dfe:	dc 01       	movw	r26, r24
 e00:	fc 01       	movw	r30, r24
 e02:	67 2f       	mov	r22, r23
 e04:	71 91       	ld	r23, Z+
 e06:	77 23       	and	r23, r23
 e08:	e1 f7       	brne	.-8      	; 0xe02 <strrev+0x4>
 e0a:	32 97       	sbiw	r30, 0x02	; 2
 e0c:	04 c0       	rjmp	.+8      	; 0xe16 <strrev+0x18>
 e0e:	7c 91       	ld	r23, X
 e10:	6d 93       	st	X+, r22
 e12:	70 83       	st	Z, r23
 e14:	62 91       	ld	r22, -Z
 e16:	ae 17       	cp	r26, r30
 e18:	bf 07       	cpc	r27, r31
 e1a:	c8 f3       	brcs	.-14     	; 0xe0e <strrev+0x10>
 e1c:	08 95       	ret

00000e1e <_exit>:
 e1e:	f8 94       	cli

00000e20 <__stop_program>:
 e20:	ff cf       	rjmp	.-2      	; 0xe20 <__stop_program>
