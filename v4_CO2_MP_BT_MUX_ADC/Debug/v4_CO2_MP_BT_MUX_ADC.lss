
v4_CO2_MP_BT_MUX_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00000bb6  00000c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008001e4  008001e4  00000d2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002666  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3c  00000000  00000000  00003616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c4  00000000  00000000  00004552  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  00005718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000865  00000000  00000000  00005c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a7  00000000  00000000  00006491  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_18>
  4c:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3e       	cpi	r26, 0xE4	; 228
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 ee       	ldi	r26, 0xE4	; 228
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

/* Prototipos */
void Check_BT(void);

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	key = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <key>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
	/************************************/
	/*  Inicialización de componentes	*/
	/************************************/

	/* Comunicación con sensores y BT */
	USART_Init(MYUBRR);		// Configura UART
  c4:	8c e0       	ldi	r24, 0x0C	; 12
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 22 05 	call	0xa44	; 0xa44 <USART_Init>
	MUX_INIT();				// Pines del Mux como salida
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	80 66       	ori	r24, 0x60	; 96
  d0:	8a b9       	out	0x0a, r24	; 10
	
	/* Interfaz: LCD & boton */
	I2C_Init();				// 10 kHz
  d2:	0e 94 4e 03 	call	0x69c	; 0x69c <I2C_Init>
	LCD_Init();				// LCD On. Cursor off
  d6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_Init>
	button_Init();			// Int0. Boton como salida
  da:	0e 94 b2 01 	call	0x364	; 0x364 <button_Init>
	
	/* Nivel de Batería */
	ADC_Init();				// Conversion ADC
  de:	0e 94 63 01 	call	0x2c6	; 0x2c6 <ADC_Init>
	RGBLed_Init();			// Indicador
  e2:	0e 94 17 04 	call	0x82e	; 0x82e <RGBLed_Init>
	
	/* Control de tiempos */
	Timer_Init();
  e6:	0e 94 c9 01 	call	0x392	; 0x392 <Timer_Init>
	/* Debug */
	//LED_INIT();				// Led como salida
	
	sei();					// Habilita IRQs
  ea:	78 94       	sei
	/************************************/
	/*        Inicio del programa		*/
	/************************************/

	/* Nivel de Bateria */
	ADC_Start();
  ec:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ADC_Start>
	bateria = ADC_GetValue();
  f0:	0e 94 9c 01 	call	0x338	; 0x338 <ADC_GetValue>
  f4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <bateria+0x1>
  f8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <bateria>
	if (bateria >=850){ RGBLed_Color(GREEN);}
  fc:	82 35       	cpi	r24, 0x52	; 82
  fe:	93 40       	sbci	r25, 0x03	; 3
 100:	18 f0       	brcs	.+6      	; 0x108 <main+0x44>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 1e 04 	call	0x83c	; 0x83c <RGBLed_Color>
	if ((bateria >=200)&(bateria<850)){ RGBLed_Color(YELLOW);}
 108:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <bateria>
 10c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <bateria+0x1>
 110:	88 5c       	subi	r24, 0xC8	; 200
 112:	91 09       	sbc	r25, r1
 114:	8a 38       	cpi	r24, 0x8A	; 138
 116:	92 40       	sbci	r25, 0x02	; 2
 118:	18 f4       	brcc	.+6      	; 0x120 <main+0x5c>
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	0e 94 1e 04 	call	0x83c	; 0x83c <RGBLed_Color>
	if (bateria <200){ RGBLed_Color(RED);}
 120:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <bateria>
 124:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <bateria+0x1>
 128:	88 3c       	cpi	r24, 0xC8	; 200
 12a:	91 05       	cpc	r25, r1
 12c:	18 f4       	brcc	.+6      	; 0x134 <main+0x70>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 1e 04 	call	0x83c	; 0x83c <RGBLed_Color>


	/* Cambio de modo de sensores */
	MPswitchMode(PASSIVE_MODE);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 aa 04 	call	0x954	; 0x954 <MPswitchMode>
	//COswitchMode(QA_MODE);
	
	/* Mensajes iniciales por LCD */
	LCD_MensajeInicial();		// Inicializando...
 13a:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_MensajeInicial>
	LCD_MensajeTiempo(4);		// Calentando. Tiempo restante en segundos
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_MensajeTiempo>
	
	/* Reinicia el control de timers para los dispositivos */
	setTime(TIMER_LCD, 0);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setTime>
	setTime(TIMER_ADC, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setTime>
	setTime(TIMER_BT, 0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setTime>
	setTime(TIMER_GLOBAL, 0);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setTime>

	/* Inicialización de variables */
	key = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <key>
	DATA_CO = 0;
 174:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <DATA_CO+0x1>
 178:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <DATA_CO>
	conexion_bt = 1;
 17c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <conexion_bt>
			if (conexion_bt == 1)
			{
				Flag_Ack = 1;
				Mux_Channel(CHANNEL_BT);
				USART_Transmit(DATA_CO2>>8);
				USART_Transmit(DATA_CO2);
 180:	0f 2e       	mov	r0, r31
 182:	fb e1       	ldi	r31, 0x1B	; 27
 184:	ef 2e       	mov	r14, r31
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	ff 2e       	mov	r15, r31
 18a:	f0 2d       	mov	r31, r0
			//DATA_CO = COgetData();

			/* Bluetooth */
			if (conexion_bt == 1)
			{
				Flag_Ack = 1;
 18c:	11 e0       	ldi	r17, 0x01	; 1
	{
		/* Revisa la conexion BT */
		//Check_BT();
		
		/* Sensores */
		if(key == 1)
 18e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <key>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	49 f5       	brne	.+82     	; 0x1e8 <main+0x124>
		{
			//key = 0;
	
			/* CO2 */
			DATA_CO2 = CO2getData();
 196:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <CO2getData>
 19a:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <DATA_CO2+0x1>
 19e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <DATA_CO2>
			
			/* MP */
			MPgetData(DATA_MP);
 1a2:	87 e1       	ldi	r24, 0x17	; 23
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	0e 94 ce 04 	call	0x99c	; 0x99c <MPgetData>
			
			/* CO */
			//DATA_CO = COgetData();

			/* Bluetooth */
			if (conexion_bt == 1)
 1aa:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <conexion_bt>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	d9 f4       	brne	.+54     	; 0x1e8 <main+0x124>
			{
				Flag_Ack = 1;
 1b2:	10 93 16 02 	sts	0x0216, r17	; 0x800216 <Flag_Ack>
				Mux_Channel(CHANNEL_BT);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 b9 01 	call	0x372	; 0x372 <Mux_Channel>
				USART_Transmit(DATA_CO2>>8);
 1bc:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <DATA_CO2+0x1>
 1c0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
				USART_Transmit(DATA_CO2);
 1c4:	f7 01       	movw	r30, r14
 1c6:	80 81       	ld	r24, Z
 1c8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
				USART_Transmit(DATA_MP[0]);
 1cc:	c7 e1       	ldi	r28, 0x17	; 23
 1ce:	d2 e0       	ldi	r29, 0x02	; 2
 1d0:	88 81       	ld	r24, Y
 1d2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
				USART_Transmit(DATA_MP[1]);
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
				USART_Transmit(DATA_MP[2]);
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
				USART_Transmit(DATA_MP[3]);
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>

		}
		
		
		/* Bateria */
		time_adc = getTime(TIMER_ADC);
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getTime>
 1ee:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <time_adc+0x1>
 1f2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <time_adc>
		if (time_adc >= 60)
 1f6:	cc 97       	sbiw	r24, 0x3c	; 60
 1f8:	48 f1       	brcs	.+82     	; 0x24c <main+0x188>
		{
			ADC_Start();													// Inicia conversion ADC
 1fa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ADC_Start>
			setTime(TIMER_ADC, 0);											// Reinicia el Timer
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setTime>
			bateria = ADC_GetValue();										// Calcula el valor
 208:	0e 94 9c 01 	call	0x338	; 0x338 <ADC_GetValue>
 20c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <bateria+0x1>
 210:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <bateria>
			if (bateria >=850){ RGBLed_Color(GREEN);}
 214:	82 35       	cpi	r24, 0x52	; 82
 216:	93 40       	sbci	r25, 0x03	; 3
 218:	18 f0       	brcs	.+6      	; 0x220 <main+0x15c>
 21a:	81 2f       	mov	r24, r17
 21c:	0e 94 1e 04 	call	0x83c	; 0x83c <RGBLed_Color>
			if ((bateria >=200)&(bateria<850)){ RGBLed_Color(YELLOW);}
 220:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <bateria>
 224:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <bateria+0x1>
 228:	88 5c       	subi	r24, 0xC8	; 200
 22a:	91 09       	sbc	r25, r1
 22c:	8a 38       	cpi	r24, 0x8A	; 138
 22e:	92 40       	sbci	r25, 0x02	; 2
 230:	18 f4       	brcc	.+6      	; 0x238 <main+0x174>
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	0e 94 1e 04 	call	0x83c	; 0x83c <RGBLed_Color>
			if (bateria <200){ RGBLed_Color(RED);}
 238:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <bateria>
 23c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <bateria+0x1>
 240:	88 3c       	cpi	r24, 0xC8	; 200
 242:	91 05       	cpc	r25, r1
 244:	18 f4       	brcc	.+6      	; 0x24c <main+0x188>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 1e 04 	call	0x83c	; 0x83c <RGBLed_Color>
		}
		
		/* LCD */
		DATA_MP25 = (DATA_MP[0]<<8) | (DATA_MP[1]);
 24c:	e7 e1       	ldi	r30, 0x17	; 23
 24e:	f2 e0       	ldi	r31, 0x02	; 2
 250:	60 81       	ld	r22, Z
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	76 2f       	mov	r23, r22
 256:	66 27       	eor	r22, r22
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	68 2b       	or	r22, r24
 25c:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <DATA_MP25+0x1>
 260:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <DATA_MP25>
		DATA_MP10 = (DATA_MP[2]<<8) | (DATA_MP[3]);
 264:	42 81       	ldd	r20, Z+2	; 0x02
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	54 2f       	mov	r21, r20
 26a:	44 27       	eor	r20, r20
 26c:	83 81       	ldd	r24, Z+3	; 0x03
 26e:	48 2b       	or	r20, r24
 270:	50 93 23 02 	sts	0x0223, r21	; 0x800223 <DATA_MP10+0x1>
 274:	40 93 22 02 	sts	0x0222, r20	; 0x800222 <DATA_MP10>
		LCD_MensajePrincipal(DATA_CO2, DATA_MP25, DATA_MP10, DATA_CO);
 278:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <DATA_CO>
 27c:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <DATA_CO+0x1>
 280:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <DATA_CO2>
 284:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <DATA_CO2+0x1>
 288:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_MensajePrincipal>
		
		
		/* Led azul. Conexion BT exitosa */
		if (contador_BT == 1)
 28c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <contador_BT>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	29 f4       	brne	.+10     	; 0x29e <main+0x1da>
		{
			contador_BT++;		// Solo se realiza una vez
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <contador_BT>
			RGBLed_Blink();		// Led parpadea
 29a:	0e 94 3e 04 	call	0x87c	; 0x87c <RGBLed_Blink>
		}
		
		/* Mensaje por desconexion */
		time_bt = getTime(TIMER_BT);
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getTime>
 2a4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <time_bt+0x1>
 2a8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <time_bt>
		if (time_bt >= 20)
 2ac:	44 97       	sbiw	r24, 0x14	; 20
 2ae:	08 f4       	brcc	.+2      	; 0x2b2 <main+0x1ee>
 2b0:	6e cf       	rjmp	.-292    	; 0x18e <main+0xca>
		{
			setTime(TIMER_BT, 0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setTime>
			LCD_MensajeConexion(conexion_bt);		// Muestra mensaje por 3 segundos
 2bc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <conexion_bt>
 2c0:	0e 94 34 03 	call	0x668	; 0x668 <LCD_MensajeConexion>
 2c4:	64 cf       	rjmp	.-312    	; 0x18e <main+0xca>

000002c6 <ADC_Init>:
Returns:  none
*************************************************************************/
void ADC_Init(void)
{
	/* Voltage Reference = AVCC */
	ADMUX |= (1<<REFS0)|(ADC_CHANNEL<<MUX0);
 2c6:	ec e7       	ldi	r30, 0x7C	; 124
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 64       	ori	r24, 0x40	; 64
 2ce:	80 83       	st	Z, r24
	#if ADC_MODE == EIGHTBIT
	ADMUX |= (1<<ADLAR); 	// Adjust the bits to the left
	#endif

	/* ADC Enable, ADC Interrupt Enable, Prescaler predefined to work at 125 KHz */
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(ADC_PRESC<<ADPS0);
 2d0:	ea e7       	ldi	r30, 0x7A	; 122
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	8e 68       	ori	r24, 0x8E	; 142
 2d8:	80 83       	st	Z, r24
 2da:	08 95       	ret

000002dc <ADC_Start>:
}

void ADC_Start()
{
	/* Activa ADC */
	ADCSRA |= (1<<ADSC);
 2dc:	ea e7       	ldi	r30, 0x7A	; 122
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	80 83       	st	Z, r24
	/* Cambia de estadp*/
	ADC_status = ADC_WAIT;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <ADC_status>
 2ec:	08 95       	ret

000002ee <__vector_21>:
Interrupt Vector for the ADC.
If the conversion is ready this ISR will execute. Saves the data and
change the index of the ADC Buffer.
*************************************************************************/
ISR(ADC_vect)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	/* ADC Value */
	#if ADC_MODE == TENBIT
	uint16_t temp;
	temp = ADC;
 300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 304:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	#endif
	
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (ADC_Head + 1) & ADC_BUFFER_MASK;
 308:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <ADC_Head>
 30c:	ef 5f       	subi	r30, 0xFF	; 255
 30e:	e7 70       	andi	r30, 0x07	; 7
	
	/* Store new index */
	ADC_Head = tmphead;
 310:	e0 93 e5 01 	sts	0x01E5, r30	; 0x8001e5 <ADC_Head>
	
	/* Store the data in the buffer */
	ADC_Buffer[tmphead] = temp;
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	ea 51       	subi	r30, 0x1A	; 26
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	91 83       	std	Z+1, r25	; 0x01
 320:	80 83       	st	Z, r24

	/* Change the current state */
	ADC_status = ADC_RDY;
 322:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <ADC_status>
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <ADC_GetValue>:
*************************************************************************/
#if ADC_MODE == TENBIT
uint16_t ADC_GetValue(void)
{
	/*Espera a nueva data*/
	while(ADC_Head == ADC_Tail){}
 338:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <ADC_Head>
 33c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
 340:	98 17       	cp	r25, r24
 342:	d1 f3       	breq	.-12     	; 0x338 <ADC_GetValue>
	uint8_t tmptail;
	
	/* Calcula el indice */
	tmptail = (ADC_Tail + 1) & ADC_BUFFER_MASK;
 344:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	87 70       	andi	r24, 0x07	; 7
	/* Almacena nuevo indice */
	ADC_Tail = tmptail;
 34c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
	/* Devuelve el valor */
	return ADC_Buffer[ADC_Tail];
 350:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <__data_end>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	ea 51       	subi	r30, 0x1A	; 26
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
}
 35e:	80 81       	ld	r24, Z
 360:	91 81       	ldd	r25, Z+1	; 0x01
 362:	08 95       	ret

00000364 <button_Init>:
/**************************************/
void led_debug(void)
{
	LED_ON();
	_delay_ms(3000);
	LED_OFF();
 364:	e9 e6       	ldi	r30, 0x69	; 105
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	80 83       	st	Z, r24
 36e:	e8 9a       	sbi	0x1d, 0	; 29
 370:	08 95       	ret

00000372 <Mux_Channel>:
/*  			  Mux 		 		  */
/**************************************/
void Mux_Channel( uint8_t channel)
{
	//MUX_ENABLE();
	MUX_CLEAR();
 372:	9b b1       	in	r25, 0x0b	; 11
 374:	9f 79       	andi	r25, 0x9F	; 159
 376:	9b b9       	out	0x0b, r25	; 11
	switch (channel)
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	31 f0       	breq	.+12     	; 0x388 <Mux_Channel+0x16>
 37c:	83 30       	cpi	r24, 0x03	; 3
 37e:	31 f0       	breq	.+12     	; 0x38c <Mux_Channel+0x1a>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	31 f4       	brne	.+12     	; 0x390 <Mux_Channel+0x1e>
	{
	case 0:
		break;
	case 1:
		MUX_SEL0();
 384:	5d 9a       	sbi	0x0b, 5	; 11
		break;
 386:	08 95       	ret
	case 2:
		MUX_SEL1();
 388:	5e 9a       	sbi	0x0b, 6	; 11
		break;
 38a:	08 95       	ret
	case 3:
		MUX_SEL0();
 38c:	5d 9a       	sbi	0x0b, 5	; 11
		MUX_SEL1();
 38e:	5e 9a       	sbi	0x0b, 6	; 11
 390:	08 95       	ret

00000392 <Timer_Init>:
uint16_t segundos, segundosLCD, segundosADC, segundosBT;

void Timer_Init(void)
{
	/* Modo CTC. Prescaler = 1024 */
	TCCR1B = (1 << WGM12) | (5 << CS10);
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	/* Reinicia la cuenta */
	TCNT1 = 0;
 398:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 39c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* Comparador = 1 seg */
	OCR1A = 976;
 3a0:	80 ed       	ldi	r24, 0xD0	; 208
 3a2:	93 e0       	ldi	r25, 0x03	; 3
 3a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* Habilita la interrupciÃ³n por comparaciÃ³n*/
	TIMSK1 |= (1 << OCIE1A);
 3ac:	ef e6       	ldi	r30, 0x6F	; 111
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	80 83       	st	Z, r24

	/* Limpia banderas de interrupcion*/
	TIFR1 |= (1 << OCF1A);
 3b6:	b1 9a       	sbi	0x16, 1	; 22
 3b8:	08 95       	ret

000003ba <setTime>:

}

void setTime(uint8_t type, uint16_t newtime)
{
	switch (type)
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	59 f0       	breq	.+22     	; 0x3d4 <setTime+0x1a>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <setTime+0x10>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	69 f0       	breq	.+26     	; 0x3de <setTime+0x24>
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	81 f0       	breq	.+32     	; 0x3e8 <setTime+0x2e>
 3c8:	08 95       	ret
	{
	case TIMER_GLOBAL:
		segundos = newtime;
 3ca:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <segundos+0x1>
 3ce:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <segundos>
		break;
 3d2:	08 95       	ret

	case TIMER_LCD:
		segundosLCD = newtime;
 3d4:	70 93 26 02 	sts	0x0226, r23	; 0x800226 <segundosLCD+0x1>
 3d8:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <segundosLCD>
		break;
 3dc:	08 95       	ret

	case TIMER_ADC:
		segundosADC = newtime;
 3de:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <segundosADC+0x1>
 3e2:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <segundosADC>
		break;
 3e6:	08 95       	ret

	case TIMER_BT:
		segundosBT = newtime;
 3e8:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <segundosBT+0x1>
 3ec:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <segundosBT>
 3f0:	08 95       	ret

000003f2 <getTime>:
	}
}

uint16_t getTime(uint8_t type)
{
	switch (type)
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	28 f0       	brcs	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	69 f0       	breq	.+26     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	81 f0       	breq	.+32     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 400:	14 c0       	rjmp	.+40     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
	case TIMER_GLOBAL:
		return segundos;
 402:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <segundos>
 406:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <segundos+0x1>
 40a:	08 95       	ret
		break;

	case TIMER_LCD:
		return segundosLCD;
 40c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <segundosLCD>
 410:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <segundosLCD+0x1>
 414:	08 95       	ret
		break;

	case TIMER_ADC:
		return segundosADC;
 416:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <segundosADC>
 41a:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <segundosADC+0x1>
 41e:	08 95       	ret
		break;

	case TIMER_BT:
		return segundosBT;
 420:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <segundosBT>
 424:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <segundosBT+0x1>
 428:	08 95       	ret
		break;

	default:
		return 0;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
}
 42e:	08 95       	ret

00000430 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
	segundos++;
 43e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <segundos>
 442:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <segundos+0x1>
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <segundos+0x1>
 44c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <segundos>
	segundosLCD++;
 450:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <segundosLCD>
 454:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <segundosLCD+0x1>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <segundosLCD+0x1>
 45e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <segundosLCD>
	segundosADC++;
 462:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <segundosADC>
 466:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <segundosADC+0x1>
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <segundosADC+0x1>
 470:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <segundosADC>
	segundosBT++;
 474:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <segundosBT>
 478:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <segundosBT+0x1>
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <segundosBT+0x1>
 482:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <segundosBT>
}
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <LCD_MensajeInicial>:

/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
 494:	cf 93       	push	r28
 496:	c4 e0       	ldi	r28, 0x04	; 4
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Up();
 498:	80 e8       	ldi	r24, 0x80	; 128
 49a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("Inicializando   ");
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_GotoXY(0, 13);
 4a6:	6d e0       	ldi	r22, 0x0D	; 13
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_GotoXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ae:	8f e4       	ldi	r24, 0x4F	; 79
 4b0:	93 ec       	ldi	r25, 0xC3	; 195
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_MensajeInicial+0x1e>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_MensajeInicial+0x24>
 4b8:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 4ba:	86 e3       	ldi	r24, 0x36	; 54
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 4c2:	8f e4       	ldi	r24, 0x4F	; 79
 4c4:	93 ec       	ldi	r25, 0xC3	; 195
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_MensajeInicial+0x32>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_MensajeInicial+0x38>
 4cc:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 4ce:	86 e3       	ldi	r24, 0x36	; 54
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 4d6:	8f e4       	ldi	r24, 0x4F	; 79
 4d8:	93 ec       	ldi	r25, 0xC3	; 195
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_MensajeInicial+0x46>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_MensajeInicial+0x4c>
 4e0:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 4e2:	86 e3       	ldi	r24, 0x36	; 54
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 4ea:	8f e4       	ldi	r24, 0x4F	; 79
 4ec:	93 ec       	ldi	r25, 0xC3	; 195
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCD_MensajeInicial+0x5a>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCD_MensajeInicial+0x60>
 4f4:	00 00       	nop
 4f6:	c1 50       	subi	r28, 0x01	; 1
/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
	for (uint8_t i = 0; i < 4; i++)
 4f8:	79 f6       	brne	.-98     	; 0x498 <LCD_MensajeInicial+0x4>
		_delay_ms(200);
		LCD_String(".");
		_delay_ms(200);
	}

}
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <LCD_MensajeTiempo>:

void LCD_MensajeTiempo(uint16_t cuenta)
{
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	8c 01       	movw	r16, r24
	case TIMER_GLOBAL:
		segundos = newtime;
		break;

	case TIMER_LCD:
		segundosLCD = newtime;
 508:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <segundosLCD+0x1>
 50c:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <segundosLCD>
void LCD_MensajeTiempo(uint16_t cuenta)
{
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);

	LCD_Up();
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
	LCD_String("Calentando       ");
 516:	8a e1       	ldi	r24, 0x1A	; 26
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
	while (tiempo != cuenta)
 51e:	01 15       	cp	r16, r1
 520:	11 05       	cpc	r17, r1
 522:	d9 f0       	breq	.+54     	; 0x55a <LCD_MensajeTiempo+0x5c>
	case TIMER_GLOBAL:
		return segundos;
		break;

	case TIMER_LCD:
		return segundosLCD;
 524:	c0 91 25 02 	lds	r28, 0x0225	; 0x800225 <segundosLCD>
 528:	d0 91 26 02 	lds	r29, 0x0226	; 0x800226 <segundosLCD+0x1>
	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
	{
		tiempo = getTime(TIMER_LCD);
		LCD_Down();
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_Number(cuenta - tiempo);
 532:	c8 01       	movw	r24, r16
 534:	8c 1b       	sub	r24, r28
 536:	9d 0b       	sbc	r25, r29
 538:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Number>
		LCD_String("        ");
 53c:	84 e6       	ldi	r24, 0x64	; 100
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_GotoXY(1, 3);
 544:	63 e0       	ldi	r22, 0x03	; 3
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_GotoXY>
		LCD_String(" Seg. Rest.");
 54c:	8c e2       	ldi	r24, 0x2C	; 44
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);

	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
 554:	0c 17       	cp	r16, r28
 556:	1d 07       	cpc	r17, r29
 558:	29 f7       	brne	.-54     	; 0x524 <LCD_MensajeTiempo+0x26>
		LCD_String("        ");
		LCD_GotoXY(1, 3);
		LCD_String(" Seg. Rest.");
	}

}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	08 95       	ret

00000564 <LCD_MensajePrincipal>:


void LCD_MensajePrincipal(uint16_t co2data, uint16_t mp25data, uint16_t mp10data, uint16_t codata)
{
 564:	cf 92       	push	r12
 566:	df 92       	push	r13
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	ec 01       	movw	r28, r24
 576:	7b 01       	movw	r14, r22
 578:	6a 01       	movw	r12, r20
 57a:	89 01       	movw	r16, r18
	case TIMER_GLOBAL:
		return segundos;
		break;

	case TIMER_LCD:
		return segundosLCD;
 57c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <segundosLCD>
 580:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <segundosLCD+0x1>


void LCD_MensajePrincipal(uint16_t co2data, uint16_t mp25data, uint16_t mp10data, uint16_t codata)
{
	uint16_t tiempo = getTime(TIMER_LCD);
	if (tiempo < TIEMPO_SENSORES)
 584:	85 30       	cpi	r24, 0x05	; 5
 586:	91 05       	cpc	r25, r1
 588:	78 f4       	brcc	.+30     	; 0x5a8 <LCD_MensajePrincipal+0x44>
	{
		LCD_Up();
 58a:	80 e8       	ldi	r24, 0x80	; 128
 58c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("   Medidor de    ");
 590:	88 e3       	ldi	r24, 0x38	; 56
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_Down();
 598:	80 ec       	ldi	r24, 0xC0	; 192
 59a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("calidad del aire ");
 59e:	8a e4       	ldi	r24, 0x4A	; 74
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 5a6:	57 c0       	rjmp	.+174    	; 0x656 <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (2 * TIEMPO_SENSORES) )
 5a8:	8a 30       	cpi	r24, 0x0A	; 10
 5aa:	91 05       	cpc	r25, r1
 5ac:	90 f4       	brcc	.+36     	; 0x5d2 <LCD_MensajePrincipal+0x6e>
	{
		LCD_Up();
 5ae:	80 e8       	ldi	r24, 0x80	; 128
 5b0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("CO2             ");
 5b4:	8c e5       	ldi	r24, 0x5C	; 92
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_Down();
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_Number(co2data);
 5c2:	ce 01       	movw	r24, r28
 5c4:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Number>
		LCD_String(" ppm             ");
 5c8:	8d e6       	ldi	r24, 0x6D	; 109
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 5d0:	42 c0       	rjmp	.+132    	; 0x656 <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (3 * TIEMPO_SENSORES) )
 5d2:	8f 30       	cpi	r24, 0x0F	; 15
 5d4:	91 05       	cpc	r25, r1
 5d6:	90 f4       	brcc	.+36     	; 0x5fc <LCD_MensajePrincipal+0x98>
	{
		LCD_Up();
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("PM 2.5          ");
 5de:	8f e7       	ldi	r24, 0x7F	; 127
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_Down();
 5e6:	80 ec       	ldi	r24, 0xC0	; 192
 5e8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_Number(mp25data);
 5ec:	c7 01       	movw	r24, r14
 5ee:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Number>
		LCD_String(" ppm            ");
 5f2:	80 e9       	ldi	r24, 0x90	; 144
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 5fa:	2d c0       	rjmp	.+90     	; 0x656 <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (4 * TIEMPO_SENSORES))
 5fc:	84 31       	cpi	r24, 0x14	; 20
 5fe:	91 05       	cpc	r25, r1
 600:	90 f4       	brcc	.+36     	; 0x626 <LCD_MensajePrincipal+0xc2>
	{
		LCD_Up();
 602:	80 e8       	ldi	r24, 0x80	; 128
 604:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("PM 10           ");
 608:	81 ea       	ldi	r24, 0xA1	; 161
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_Down();
 610:	80 ec       	ldi	r24, 0xC0	; 192
 612:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_Number(mp10data);
 616:	c6 01       	movw	r24, r12
 618:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Number>
		LCD_String(" ppm            ");
 61c:	80 e9       	ldi	r24, 0x90	; 144
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 624:	18 c0       	rjmp	.+48     	; 0x656 <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (5 * TIEMPO_SENSORES) )
 626:	49 97       	sbiw	r24, 0x19	; 25
 628:	90 f4       	brcc	.+36     	; 0x64e <LCD_MensajePrincipal+0xea>
	{
		LCD_Up();
 62a:	80 e8       	ldi	r24, 0x80	; 128
 62c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("CO             ");
 630:	82 eb       	ldi	r24, 0xB2	; 178
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_Down();
 638:	80 ec       	ldi	r24, 0xC0	; 192
 63a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_Number(codata);
 63e:	c8 01       	movw	r24, r16
 640:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Number>
		LCD_String(" ppm            ");
 644:	80 e9       	ldi	r24, 0x90	; 144
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 64c:	04 c0       	rjmp	.+8      	; 0x656 <LCD_MensajePrincipal+0xf2>
	case TIMER_GLOBAL:
		segundos = newtime;
		break;

	case TIMER_LCD:
		segundosLCD = newtime;
 64e:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <segundosLCD+0x1>
 652:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <segundosLCD>
	}
	else
	{
		setTime(TIMER_LCD, 0);
	}
}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	df 90       	pop	r13
 664:	cf 90       	pop	r12
 666:	08 95       	ret

00000668 <LCD_MensajeConexion>:

void LCD_MensajeConexion(uint8_t conexion)
{
	if (conexion == 0)
 668:	81 11       	cpse	r24, r1
 66a:	0e c0       	rjmp	.+28     	; 0x688 <LCD_MensajeConexion+0x20>
	{
		/* Si no hay conexion */
		LCD_Up();
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("Estado:         ");
 672:	82 ec       	ldi	r24, 0xC2	; 194
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
		LCD_Down();
 67a:	80 ec       	ldi	r24, 0xC0	; 192
 67c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
		LCD_String("Desconectado    ");
 680:	83 ed       	ldi	r24, 0xD3	; 211
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 688:	2f eb       	ldi	r18, 0xBF	; 191
 68a:	87 e2       	ldi	r24, 0x27	; 39
 68c:	99 e0       	ldi	r25, 0x09	; 9
 68e:	21 50       	subi	r18, 0x01	; 1
 690:	80 40       	sbci	r24, 0x00	; 0
 692:	90 40       	sbci	r25, 0x00	; 0
 694:	e1 f7       	brne	.-8      	; 0x68e <LCD_MensajeConexion+0x26>
 696:	00 c0       	rjmp	.+0      	; 0x698 <LCD_MensajeConexion+0x30>
 698:	00 00       	nop
 69a:	08 95       	ret

0000069c <I2C_Init>:
Returns:  none
*************************************************************************/
void I2C_Init(void)
{
	/* Set SCL to 50 kHz. Macro definition */
	TWSR = 0x00;			// Prescaler = 1
 69c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = MYTWBR;			// Macro 72
 6a0:	8a e2       	ldi	r24, 0x2A	; 42
 6a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	/* Enable TWI */
	TWCR = (1 << TWEN);
 6a6:	84 e0       	ldi	r24, 0x04	; 4
 6a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6ac:	08 95       	ret

000006ae <I2C_Start>:
Returns:  none
*************************************************************************/
void I2C_Start(uint8_t address)
{
	/* Send Start Condition*/
	TWCR |= (1 << TWINT) | (1 << TWSTA);
 6ae:	ec eb       	ldi	r30, 0xBC	; 188
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	90 81       	ld	r25, Z
 6b4:	90 6a       	ori	r25, 0xA0	; 160
 6b6:	90 83       	st	Z, r25
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 6b8:	90 81       	ld	r25, Z
 6ba:	99 23       	and	r25, r25
 6bc:	ec f7       	brge	.-6      	; 0x6b8 <I2C_Start+0xa>
	
	/* Send the address and W/R condition */
	TWDR = address;
 6be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT) | (1 << TWEA);
 6c2:	ec eb       	ldi	r30, 0xBC	; 188
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	80 6c       	ori	r24, 0xC0	; 192
 6ca:	80 83       	st	Z, r24
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 6cc:	80 81       	ld	r24, Z
 6ce:	88 23       	and	r24, r24
 6d0:	ec f7       	brge	.-6      	; 0x6cc <I2C_Start+0x1e>
}
 6d2:	08 95       	ret

000006d4 <I2C_Stop>:
Returns:  none
*************************************************************************/
void I2C_Stop(void)
{
	/* Send Stop Condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO);
 6d4:	ec eb       	ldi	r30, 0xBC	; 188
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	80 69       	ori	r24, 0x90	; 144
 6dc:	80 83       	st	Z, r24
 6de:	08 95       	ret

000006e0 <I2C_Transmit>:
Returns:  none
*************************************************************************/
void I2C_Transmit(uint8_t data)
{
	/* Send the Data */
	TWDR = data;
 6e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 6e4:	84 ec       	ldi	r24, 0xC4	; 196
 6e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 6ea:	ec eb       	ldi	r30, 0xBC	; 188
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	88 23       	and	r24, r24
 6f2:	ec f7       	brge	.-6      	; 0x6ee <I2C_Transmit+0xe>
}
 6f4:	08 95       	ret

000006f6 <sendCMD>:
Allows to write new commands to the LCD 
Input:    CMD	Command to be send
Returns:  none
*************************************************************************/
void sendCMD(uint8_t CMD)
{
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	c8 2f       	mov	r28, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 6fe:	8e e4       	ldi	r24, 0x4E	; 78
 700:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_Start>
	
	/* Send commands. MS Nibble*/
	I2C_Transmit(bitmask = (CMD & 0xF0) | 0x08);
 704:	1c 2f       	mov	r17, r28
 706:	10 7f       	andi	r17, 0xF0	; 240
 708:	d1 2f       	mov	r29, r17
 70a:	d8 60       	ori	r29, 0x08	; 8
 70c:	8d 2f       	mov	r24, r29
 70e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 712:	81 2f       	mov	r24, r17
 714:	8c 60       	ori	r24, 0x0C	; 12
 716:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 71a:	8d 2f       	mov	r24, r29
 71c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	
	/* Send commands. LS Nibble*/
	I2C_Transmit(bitmask = ((CMD << 4) & 0xF0) | 0x08);
 720:	80 e1       	ldi	r24, 0x10	; 16
 722:	c8 9f       	mul	r28, r24
 724:	e0 01       	movw	r28, r0
 726:	11 24       	eor	r1, r1
 728:	dc 2f       	mov	r29, r28
 72a:	d8 60       	ori	r29, 0x08	; 8
 72c:	8d 2f       	mov	r24, r29
 72e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 732:	8c 2f       	mov	r24, r28
 734:	8c 60       	ori	r24, 0x0C	; 12
 736:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 73a:	8d 2f       	mov	r24, r29
 73c:	8b 7f       	andi	r24, 0xFB	; 251
 73e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 742:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <I2C_Stop>
}
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	1f 91       	pop	r17
 74c:	08 95       	ret

0000074e <LCD_Init>:
Returns:  none
*************************************************************************/
void LCD_Init(void)
{
	/* Initialize LCD */
	sendCMD(LCD_8BIT);
 74e:	83 e3       	ldi	r24, 0x33	; 51
 750:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
	sendCMD(LCD_4BIT);
 754:	82 e3       	ldi	r24, 0x32	; 50
 756:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
	sendCMD(LCD_FUNCTION_4BIT_2LINES);
 75a:	88 e2       	ldi	r24, 0x28	; 40
 75c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
	sendCMD(LCD_DISP_ON);
 760:	8c e0       	ldi	r24, 0x0C	; 12
 762:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
	sendCMD(LCD_CLR);
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
 76c:	08 95       	ret

0000076e <LCD_GotoXY>:
Returns:  none
*************************************************************************/
void LCD_GotoXY (uint8_t row, uint8_t col)
{
	/* Change the cursor*/
	if (row == 0)
 76e:	81 11       	cpse	r24, r1
 770:	05 c0       	rjmp	.+10     	; 0x77c <LCD_GotoXY+0xe>
	sendCMD(LCD_ROW1 + col);
 772:	80 e8       	ldi	r24, 0x80	; 128
 774:	86 0f       	add	r24, r22
 776:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
 77a:	08 95       	ret
	if (row == 1)
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	21 f4       	brne	.+8      	; 0x788 <LCD_GotoXY+0x1a>
	sendCMD(LCD_ROW2 + col);
 780:	80 ec       	ldi	r24, 0xC0	; 192
 782:	86 0f       	add	r24, r22
 784:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendCMD>
 788:	08 95       	ret

0000078a <sendData>:
Put a char on the LCD Display. 
Input:    data	char to be shown
Returns:  none
*************************************************************************/
void sendData(uint8_t data)
{
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	c8 2f       	mov	r28, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 792:	8e e4       	ldi	r24, 0x4E	; 78
 794:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_Start>
	
	/* Send Data. MS Nibble*/
	I2C_Transmit(bitmask = (data & 0xF0) | 0x08 | (1 << RS));
 798:	1c 2f       	mov	r17, r28
 79a:	10 7f       	andi	r17, 0xF0	; 240
 79c:	d1 2f       	mov	r29, r17
 79e:	d9 60       	ori	r29, 0x09	; 9
 7a0:	8d 2f       	mov	r24, r29
 7a2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 7a6:	81 2f       	mov	r24, r17
 7a8:	8d 60       	ori	r24, 0x0D	; 13
 7aa:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 7ae:	8d 2f       	mov	r24, r29
 7b0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	
	/* Send Data. LS Nibble*/
	I2C_Transmit(bitmask = ((data << 4) & 0xF0) | 0x08 | (1 << RS));
 7b4:	80 e1       	ldi	r24, 0x10	; 16
 7b6:	c8 9f       	mul	r28, r24
 7b8:	e0 01       	movw	r28, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	dc 2f       	mov	r29, r28
 7be:	d9 60       	ori	r29, 0x09	; 9
 7c0:	8d 2f       	mov	r24, r29
 7c2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 7c6:	8c 2f       	mov	r24, r28
 7c8:	8d 60       	ori	r24, 0x0D	; 13
 7ca:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 7ce:	8d 2f       	mov	r24, r29
 7d0:	8b 7f       	andi	r24, 0xFB	; 251
 7d2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 7d6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <I2C_Stop>
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	08 95       	ret

000007e2 <LCD_String>:
Put a String on the LCD Display. 
Input:    arr1	String to be shown
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	ec 01       	movw	r28, r24
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 7e8:	88 81       	ld	r24, Y
 7ea:	88 23       	and	r24, r24
 7ec:	31 f0       	breq	.+12     	; 0x7fa <LCD_String+0x18>
 7ee:	21 96       	adiw	r28, 0x01	; 1
	{
		sendData(*arr1);		// Send 1 char at the time
 7f0:	0e 94 c5 03 	call	0x78a	; 0x78a <sendData>
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 7f4:	89 91       	ld	r24, Y+
 7f6:	81 11       	cpse	r24, r1
 7f8:	fb cf       	rjmp	.-10     	; 0x7f0 <LCD_String+0xe>
	{
		sendData(*arr1);		// Send 1 char at the time
		arr1++;					// Increment the index
	}
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <LCD_Number>:
Put a Number on the LCD Display. 
Input:    numb	number to be shown
Returns:  none
*************************************************************************/
void LCD_Number(uint16_t numb)
{
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	00 d0       	rcall	.+0      	; 0x806 <LCD_Number+0x6>
 806:	00 d0       	rcall	.+0      	; 0x808 <LCD_Number+0x8>
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 80c:	4a e0       	ldi	r20, 0x0A	; 10
 80e:	be 01       	movw	r22, r28
 810:	6f 5f       	subi	r22, 0xFF	; 255
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	0e 94 a4 05 	call	0xb48	; 0xb48 <__itoa_ncheck>
	char array[4];				// 4 digits of the number. Change if needed
	itoa(numb, array, 10);		// Radix for the conversion: 10
	LCD_String(array);			// Send the ASCII codes obtained from data
 818:	ce 01       	movw	r24, r28
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
	
}
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	08 95       	ret

0000082e <RGBLed_Init>:
Input:    none
Returns:  none
*************************************************************************/
void RGBLed_Init(void)
{
	RGB_CLEAR();										// Turn off the pins
 82e:	88 b1       	in	r24, 0x08	; 8
 830:	8e 60       	ori	r24, 0x0E	; 14
 832:	88 b9       	out	0x08, r24	; 8
	DDR_RGB |= (1<<PIN_R)|(1<<PIN_G)|(1<<PIN_B);		// Pins as output
 834:	87 b1       	in	r24, 0x07	; 7
 836:	8e 60       	ori	r24, 0x0E	; 14
 838:	87 b9       	out	0x07, r24	; 7
 83a:	08 95       	ret

0000083c <RGBLed_Color>:
Input:    color 	color the led will shown
Returns:  none
*************************************************************************/
void RGBLed_Color(uint8_t color)
{
	RGB_CLEAR();
 83c:	98 b1       	in	r25, 0x08	; 8
 83e:	9e 60       	ori	r25, 0x0E	; 14
 840:	98 b9       	out	0x08, r25	; 8
	switch(color)
 842:	82 30       	cpi	r24, 0x02	; 2
 844:	81 f0       	breq	.+32     	; 0x866 <RGBLed_Color+0x2a>
 846:	28 f4       	brcc	.+10     	; 0x852 <RGBLed_Color+0x16>
 848:	88 23       	and	r24, r24
 84a:	49 f0       	breq	.+18     	; 0x85e <RGBLed_Color+0x22>
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	49 f0       	breq	.+18     	; 0x862 <RGBLed_Color+0x26>
 850:	08 95       	ret
 852:	84 30       	cpi	r24, 0x04	; 4
 854:	69 f0       	breq	.+26     	; 0x870 <RGBLed_Color+0x34>
 856:	48 f0       	brcs	.+18     	; 0x86a <RGBLed_Color+0x2e>
 858:	85 30       	cpi	r24, 0x05	; 5
 85a:	69 f0       	breq	.+26     	; 0x876 <RGBLed_Color+0x3a>
 85c:	08 95       	ret
	{
		case RED:
			RGB_RED();
 85e:	41 98       	cbi	0x08, 1	; 8
			break;
 860:	08 95       	ret
		case GREEN:
			RGB_GREEN();
 862:	42 98       	cbi	0x08, 2	; 8
			break;
 864:	08 95       	ret
		case BLUE:
			RGB_BLUE();
 866:	43 98       	cbi	0x08, 3	; 8
			break;
 868:	08 95       	ret
		case YELLOW:
			RGB_GREEN();
 86a:	42 98       	cbi	0x08, 2	; 8
			RGB_RED();
 86c:	41 98       	cbi	0x08, 1	; 8
			break;
 86e:	08 95       	ret
		case CYAN:
			RGB_BLUE();
 870:	43 98       	cbi	0x08, 3	; 8
			RGB_GREEN();
 872:	42 98       	cbi	0x08, 2	; 8
			break;
 874:	08 95       	ret
		case MAGENTA:
			RGB_BLUE();
 876:	43 98       	cbi	0x08, 3	; 8
			RGB_RED();
 878:	41 98       	cbi	0x08, 1	; 8
 87a:	08 95       	ret

0000087c <RGBLed_Blink>:
Blink the led every 250ms. The value can be modified if needed.
Input:    none
Returns:  none
*************************************************************************/
void RGBLed_Blink(void)
{
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
	uint8_t rgb_temp;
	rgb_temp = PORT_RGB;				// Guarda pines del puerto
 880:	d8 b1       	in	r29, 0x08	; 8
 882:	c3 e0       	ldi	r28, 0x03	; 3
	for (uint8_t i = 0; i < 3; i++)		// Parpadea 3 veces
	{
		RGB_CLEAR();
 884:	88 b1       	in	r24, 0x08	; 8
 886:	8e 60       	ori	r24, 0x0E	; 14
 888:	88 b9       	out	0x08, r24	; 8
 88a:	83 e2       	ldi	r24, 0x23	; 35
 88c:	94 ef       	ldi	r25, 0xF4	; 244
 88e:	01 97       	sbiw	r24, 0x01	; 1
 890:	f1 f7       	brne	.-4      	; 0x88e <RGBLed_Blink+0x12>
 892:	00 c0       	rjmp	.+0      	; 0x894 <RGBLed_Blink+0x18>
 894:	00 00       	nop
		_delay_ms(250);
		RGBLed_Color(BLUE);
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	0e 94 1e 04 	call	0x83c	; 0x83c <RGBLed_Color>
 89c:	83 e2       	ldi	r24, 0x23	; 35
 89e:	94 ef       	ldi	r25, 0xF4	; 244
 8a0:	01 97       	sbiw	r24, 0x01	; 1
 8a2:	f1 f7       	brne	.-4      	; 0x8a0 <RGBLed_Blink+0x24>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <RGBLed_Blink+0x2a>
 8a6:	00 00       	nop
 8a8:	c1 50       	subi	r28, 0x01	; 1
*************************************************************************/
void RGBLed_Blink(void)
{
	uint8_t rgb_temp;
	rgb_temp = PORT_RGB;				// Guarda pines del puerto
	for (uint8_t i = 0; i < 3; i++)		// Parpadea 3 veces
 8aa:	61 f7       	brne	.-40     	; 0x884 <RGBLed_Blink+0x8>
		RGB_CLEAR();
		_delay_ms(250);
		RGBLed_Color(BLUE);
		_delay_ms(250);
	}
	PORT_RGB = rgb_temp;				// Regresa pines de puerto
 8ac:	d8 b9       	out	0x08, r29	; 8
}
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <CO2getData>:
#include "UART.h"				// UART-HW
#include "comps.h"				// MUX 
#include <util/delay.h>			// Delay

uint16_t CO2getData()
{
 8b4:	ef 92       	push	r14
 8b6:	ff 92       	push	r15
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	62 97       	sbiw	r28, 0x12	; 18
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	de bf       	out	0x3e, r29	; 62
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	cd bf       	out	0x3d, r28	; 61
	/* Declaracion de variables */
	uint8_t gasCommand[9] = {GASCOMMAND1, GASCOMMAND2, GASCOMMAND3, GASCOMMAND4, GASCOMMAND5, GASCOMMAND6, GASCOMMAND7, GASCOMMAND8, GASCOMMAND9};
 8d0:	89 e0       	ldi	r24, 0x09	; 9
 8d2:	e0 e0       	ldi	r30, 0x00	; 0
 8d4:	f1 e0       	ldi	r31, 0x01	; 1
 8d6:	de 01       	movw	r26, r28
 8d8:	11 96       	adiw	r26, 0x01	; 1
 8da:	01 90       	ld	r0, Z+
 8dc:	0d 92       	st	X+, r0
 8de:	8a 95       	dec	r24
 8e0:	e1 f7       	brne	.-8      	; 0x8da <CO2getData+0x26>
	uint8_t data[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8e2:	7e 01       	movw	r14, r28
 8e4:	8a e0       	ldi	r24, 0x0A	; 10
 8e6:	e8 0e       	add	r14, r24
 8e8:	f1 1c       	adc	r15, r1
 8ea:	89 e0       	ldi	r24, 0x09	; 9
 8ec:	f7 01       	movw	r30, r14
 8ee:	11 92       	st	Z+, r1
 8f0:	8a 95       	dec	r24
 8f2:	e9 f7       	brne	.-6      	; 0x8ee <CO2getData+0x3a>
	uint16_t gasC = 0;
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	0e 94 b9 01 	call	0x372	; 0x372 <Mux_Channel>
 8fa:	8e 01       	movw	r16, r28
 8fc:	0f 5f       	subi	r16, 0xFF	; 255
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
	{
		USART_Transmit(gasCommand[i]);
 900:	f8 01       	movw	r30, r16
 902:	81 91       	ld	r24, Z+
 904:	8f 01       	movw	r16, r30
 906:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
 90a:	0e 15       	cp	r16, r14
 90c:	1f 05       	cpc	r17, r15
 90e:	c1 f7       	brne	.-16     	; 0x900 <__stack+0x1>
 910:	8e 01       	movw	r16, r28
 912:	06 5f       	subi	r16, 0xF6	; 246
 914:	1f 4f       	sbci	r17, 0xFF	; 255
 916:	7e 01       	movw	r14, r28
 918:	f3 e1       	ldi	r31, 0x13	; 19
 91a:	ef 0e       	add	r14, r31
 91c:	f1 1c       	adc	r15, r1
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
	{
		data[i] = USART_Receive();
 91e:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Receive>
 922:	f8 01       	movw	r30, r16
 924:	81 93       	st	Z+, r24
 926:	8f 01       	movw	r16, r30
	{
		USART_Transmit(gasCommand[i]);
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
 928:	ee 15       	cp	r30, r14
 92a:	ff 05       	cpc	r31, r15
 92c:	c1 f7       	brne	.-16     	; 0x91e <__stack+0x1f>
	{
		data[i] = USART_Receive();
	}

	/* Mascara para concetración de CO2 */
	gasC = (data[2]<<8) | (data[3]);
 92e:	8c 85       	ldd	r24, Y+12	; 0x0c
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	98 2f       	mov	r25, r24
 934:	88 27       	eor	r24, r24
 936:	2d 85       	ldd	r18, Y+13	; 0x0d
	
	/* Regresa la concentración de CO2*/
	return gasC;
}
 938:	82 2b       	or	r24, r18
 93a:	62 96       	adiw	r28, 0x12	; 18
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	f8 94       	cli
 940:	de bf       	out	0x3e, r29	; 62
 942:	0f be       	out	0x3f, r0	; 63
 944:	cd bf       	out	0x3d, r28	; 61
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	ff 90       	pop	r15
 950:	ef 90       	pop	r14
 952:	08 95       	ret

00000954 <MPswitchMode>:


void MPswitchMode(uint8_t t)
{
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
 95a:	18 2f       	mov	r17, r24
	/* Declaración de variables */
	uint16_t temp = START_BYTE1+START_BYTE2 +CHANGE_MODE +t;
 95c:	c8 2f       	mov	r28, r24
 95e:	d0 e0       	ldi	r29, 0x00	; 0
 960:	c0 59       	subi	r28, 0x90	; 144
 962:	de 4f       	sbci	r29, 0xFE	; 254
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 964:	82 e0       	ldi	r24, 0x02	; 2
 966:	0e 94 b9 01 	call	0x372	; 0x372 <Mux_Channel>
		
	/* Solicitud para cambiar de modo */
	USART_Transmit(START_BYTE1);
 96a:	82 e4       	ldi	r24, 0x42	; 66
 96c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(START_BYTE2);
 970:	8d e4       	ldi	r24, 0x4D	; 77
 972:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(CHANGE_MODE);
 976:	81 ee       	ldi	r24, 0xE1	; 225
 978:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(0x00);
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(t);
 982:	81 2f       	mov	r24, r17
 984:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(LRCH);
 988:	8d 2f       	mov	r24, r29
 98a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(LRCL);
 98e:	8c 2f       	mov	r24, r28
 990:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
}
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	08 95       	ret

0000099c <MPgetData>:


void MPgetData(uint8_t *array)
{
 99c:	cf 92       	push	r12
 99e:	df 92       	push	r13
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	6f 97       	sbiw	r28, 0x1f	; 31
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	6c 01       	movw	r12, r24
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	uint8_t Buff_MP[31];
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 9be:	82 e0       	ldi	r24, 0x02	; 2
 9c0:	0e 94 b9 01 	call	0x372	; 0x372 <Mux_Channel>
		
	/* Solicitud para recibir datos */
	USART_Transmit(START_BYTE1);
 9c4:	82 e4       	ldi	r24, 0x42	; 66
 9c6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(START_BYTE2);
 9ca:	8d e4       	ldi	r24, 0x4D	; 77
 9cc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(READ_DATA);
 9d0:	82 ee       	ldi	r24, 0xE2	; 226
 9d2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(0x00);
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(0x00);
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(LRCH);
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	USART_Transmit(LRCL);
 9e8:	81 e7       	ldi	r24, 0x71	; 113
 9ea:	0e 94 8f 05 	call	0xb1e	; 0xb1e <USART_Transmit>
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
 9ee:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Receive>
 9f2:	82 34       	cpi	r24, 0x42	; 66
 9f4:	e1 f7       	brne	.-8      	; 0x9ee <MPgetData+0x52>
 9f6:	8e 01       	movw	r16, r28
 9f8:	0f 5f       	subi	r16, 0xFF	; 255
 9fa:	1f 4f       	sbci	r17, 0xFF	; 255
 9fc:	7e 01       	movw	r14, r28
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	e8 0e       	add	r14, r24
 a02:	f1 1c       	adc	r15, r1
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
	{
		Buff_MP[i] = USART_Receive();
 a04:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Receive>
 a08:	f8 01       	movw	r30, r16
 a0a:	81 93       	st	Z+, r24
 a0c:	8f 01       	movw	r16, r30
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
 a0e:	ee 15       	cp	r30, r14
 a10:	ff 05       	cpc	r31, r15
 a12:	c1 f7       	brne	.-16     	; 0xa04 <MPgetData+0x68>
	{
		Buff_MP[i] = USART_Receive();
	}
	/* MP 2.5 */
	array[0] = Buff_MP[6];
 a14:	8f 81       	ldd	r24, Y+7	; 0x07
 a16:	f6 01       	movw	r30, r12
 a18:	80 83       	st	Z, r24
	array[1] = Buff_MP[7];
 a1a:	88 85       	ldd	r24, Y+8	; 0x08
 a1c:	81 83       	std	Z+1, r24	; 0x01
	/* MP 10 */
	array[2] = Buff_MP[8];
 a1e:	89 85       	ldd	r24, Y+9	; 0x09
 a20:	82 83       	std	Z+2, r24	; 0x02
	array[3] = Buff_MP[9];
 a22:	8a 85       	ldd	r24, Y+10	; 0x0a
 a24:	83 83       	std	Z+3, r24	; 0x03
}
 a26:	6f 96       	adiw	r28, 0x1f	; 31
 a28:	0f b6       	in	r0, 0x3f	; 63
 a2a:	f8 94       	cli
 a2c:	de bf       	out	0x3e, r29	; 62
 a2e:	0f be       	out	0x3f, r0	; 63
 a30:	cd bf       	out	0x3d, r28	; 61
 a32:	df 91       	pop	r29
 a34:	cf 91       	pop	r28
 a36:	1f 91       	pop	r17
 a38:	0f 91       	pop	r16
 a3a:	ff 90       	pop	r15
 a3c:	ef 90       	pop	r14
 a3e:	df 90       	pop	r13
 a40:	cf 90       	pop	r12
 a42:	08 95       	ret

00000a44 <USART_Init>:
	}
	else
	{
		return 0;
	}
}
 a44:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 a48:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 a4c:	82 e0       	ldi	r24, 0x02	; 2
 a4e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 a52:	88 e9       	ldi	r24, 0x98	; 152
 a54:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a58:	86 e0       	ldi	r24, 0x06	; 6
 a5a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 a5e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <USART_RxTail>
 a62:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <USART_RxHead>
 a66:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <USART_TxTail>
 a6a:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <USART_TxHead>
 a6e:	08 95       	ret

00000a70 <__vector_18>:
 a70:	1f 92       	push	r1
 a72:	0f 92       	push	r0
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	0f 92       	push	r0
 a78:	11 24       	eor	r1, r1
 a7a:	8f 93       	push	r24
 a7c:	ef 93       	push	r30
 a7e:	ff 93       	push	r31
 a80:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a84:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <USART_RxHead>
 a88:	ef 5f       	subi	r30, 0xFF	; 255
 a8a:	e7 70       	andi	r30, 0x07	; 7
 a8c:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <USART_RxHead>
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	ed 5f       	subi	r30, 0xFD	; 253
 a94:	fd 4f       	sbci	r31, 0xFD	; 253
 a96:	80 83       	st	Z, r24
 a98:	ff 91       	pop	r31
 a9a:	ef 91       	pop	r30
 a9c:	8f 91       	pop	r24
 a9e:	0f 90       	pop	r0
 aa0:	0f be       	out	0x3f, r0	; 63
 aa2:	0f 90       	pop	r0
 aa4:	1f 90       	pop	r1
 aa6:	18 95       	reti

00000aa8 <__vector_19>:
 aa8:	1f 92       	push	r1
 aaa:	0f 92       	push	r0
 aac:	0f b6       	in	r0, 0x3f	; 63
 aae:	0f 92       	push	r0
 ab0:	11 24       	eor	r1, r1
 ab2:	8f 93       	push	r24
 ab4:	9f 93       	push	r25
 ab6:	ef 93       	push	r30
 ab8:	ff 93       	push	r31
 aba:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <USART_TxHead>
 abe:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USART_TxTail>
 ac2:	98 17       	cp	r25, r24
 ac4:	69 f0       	breq	.+26     	; 0xae0 <__vector_19+0x38>
 ac6:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <USART_TxTail>
 aca:	ef 5f       	subi	r30, 0xFF	; 255
 acc:	e7 70       	andi	r30, 0x07	; 7
 ace:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <USART_TxTail>
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	e7 50       	subi	r30, 0x07	; 7
 ad6:	fe 4f       	sbci	r31, 0xFE	; 254
 ad8:	80 81       	ld	r24, Z
 ada:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 ade:	05 c0       	rjmp	.+10     	; 0xaea <__vector_19+0x42>
 ae0:	e1 ec       	ldi	r30, 0xC1	; 193
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	8f 7d       	andi	r24, 0xDF	; 223
 ae8:	80 83       	st	Z, r24
 aea:	ff 91       	pop	r31
 aec:	ef 91       	pop	r30
 aee:	9f 91       	pop	r25
 af0:	8f 91       	pop	r24
 af2:	0f 90       	pop	r0
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	0f 90       	pop	r0
 af8:	1f 90       	pop	r1
 afa:	18 95       	reti

00000afc <USART_Receive>:
 afc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <USART_RxHead>
 b00:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USART_RxTail>
 b04:	98 17       	cp	r25, r24
 b06:	d1 f3       	breq	.-12     	; 0xafc <USART_Receive>
 b08:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <USART_RxTail>
 b0c:	ef 5f       	subi	r30, 0xFF	; 255
 b0e:	e7 70       	andi	r30, 0x07	; 7
 b10:	e0 93 01 02 	sts	0x0201, r30	; 0x800201 <USART_RxTail>
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	ed 5f       	subi	r30, 0xFD	; 253
 b18:	fd 4f       	sbci	r31, 0xFD	; 253
 b1a:	80 81       	ld	r24, Z
 b1c:	08 95       	ret

00000b1e <USART_Transmit>:
void USART_Transmit(uint8_t data)
{
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 b1e:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <USART_TxHead>
 b22:	2f 5f       	subi	r18, 0xFF	; 255
 b24:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (tmphead == USART_TxTail);
 b26:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <USART_TxTail>
 b2a:	29 17       	cp	r18, r25
 b2c:	e1 f3       	breq	.-8      	; 0xb26 <USART_Transmit+0x8>
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
 b2e:	e2 2f       	mov	r30, r18
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	e7 50       	subi	r30, 0x07	; 7
 b34:	fe 4f       	sbci	r31, 0xFE	; 254
 b36:	80 83       	st	Z, r24
	/* Store new index */
	USART_TxHead = tmphead;               
 b38:	20 93 f8 01 	sts	0x01F8, r18	; 0x8001f8 <USART_TxHead>
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);                    
 b3c:	e1 ec       	ldi	r30, 0xC1	; 193
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	80 81       	ld	r24, Z
 b42:	80 62       	ori	r24, 0x20	; 32
 b44:	80 83       	st	Z, r24
 b46:	08 95       	ret

00000b48 <__itoa_ncheck>:
 b48:	bb 27       	eor	r27, r27
 b4a:	4a 30       	cpi	r20, 0x0A	; 10
 b4c:	31 f4       	brne	.+12     	; 0xb5a <__itoa_ncheck+0x12>
 b4e:	99 23       	and	r25, r25
 b50:	22 f4       	brpl	.+8      	; 0xb5a <__itoa_ncheck+0x12>
 b52:	bd e2       	ldi	r27, 0x2D	; 45
 b54:	90 95       	com	r25
 b56:	81 95       	neg	r24
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__utoa_common>

00000b5e <__utoa_ncheck>:
 b5e:	bb 27       	eor	r27, r27

00000b60 <__utoa_common>:
 b60:	fb 01       	movw	r30, r22
 b62:	55 27       	eor	r21, r21
 b64:	aa 27       	eor	r26, r26
 b66:	88 0f       	add	r24, r24
 b68:	99 1f       	adc	r25, r25
 b6a:	aa 1f       	adc	r26, r26
 b6c:	a4 17       	cp	r26, r20
 b6e:	10 f0       	brcs	.+4      	; 0xb74 <__utoa_common+0x14>
 b70:	a4 1b       	sub	r26, r20
 b72:	83 95       	inc	r24
 b74:	50 51       	subi	r21, 0x10	; 16
 b76:	b9 f7       	brne	.-18     	; 0xb66 <__utoa_common+0x6>
 b78:	a0 5d       	subi	r26, 0xD0	; 208
 b7a:	aa 33       	cpi	r26, 0x3A	; 58
 b7c:	08 f0       	brcs	.+2      	; 0xb80 <__utoa_common+0x20>
 b7e:	a9 5d       	subi	r26, 0xD9	; 217
 b80:	a1 93       	st	Z+, r26
 b82:	00 97       	sbiw	r24, 0x00	; 0
 b84:	79 f7       	brne	.-34     	; 0xb64 <__utoa_common+0x4>
 b86:	b1 11       	cpse	r27, r1
 b88:	b1 93       	st	Z+, r27
 b8a:	11 92       	st	Z+, r1
 b8c:	cb 01       	movw	r24, r22
 b8e:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <strrev>

00000b92 <strrev>:
 b92:	dc 01       	movw	r26, r24
 b94:	fc 01       	movw	r30, r24
 b96:	67 2f       	mov	r22, r23
 b98:	71 91       	ld	r23, Z+
 b9a:	77 23       	and	r23, r23
 b9c:	e1 f7       	brne	.-8      	; 0xb96 <strrev+0x4>
 b9e:	32 97       	sbiw	r30, 0x02	; 2
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <strrev+0x18>
 ba2:	7c 91       	ld	r23, X
 ba4:	6d 93       	st	X+, r22
 ba6:	70 83       	st	Z, r23
 ba8:	62 91       	ld	r22, -Z
 baa:	ae 17       	cp	r26, r30
 bac:	bf 07       	cpc	r27, r31
 bae:	c8 f3       	brcs	.-14     	; 0xba2 <strrev+0x10>
 bb0:	08 95       	ret

00000bb2 <_exit>:
 bb2:	f8 94       	cli

00000bb4 <__stop_program>:
 bb4:	ff cf       	rjmp	.-2      	; 0xbb4 <__stop_program>
