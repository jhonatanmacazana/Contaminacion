
v4_CO2_MP_BT_MUX_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800100  00000b48  00000bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  008001f6  008001f6  00000cd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ac  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eed  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001230  00000000  00000000  000043dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00005610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  00005af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e6  00000000  00000000  0000631c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_18>
  4c:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3f       	cpi	r26, 0xF6	; 246
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 ef       	ldi	r26, 0xF6	; 246
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

/* Nivel de bateria */
uint16_t bateria;

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	key = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <key>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:


int main(void)
{
	/* Comunicación con sensores y BT */
	USART_Init(MYUBRR);		// Configura UART
  c4:	8c e0       	ldi	r24, 0x0C	; 12
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <USART_Init>
	MUX_INIT();				// Pines del Mux como salida
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	80 66       	ori	r24, 0x60	; 96
  d0:	8a b9       	out	0x0a, r24	; 10
	
	/* Interfaz: LCD & boton */
	I2C_Init();				// 10 kHz
  d2:	0e 94 33 03 	call	0x666	; 0x666 <I2C_Init>
	LCD_Init();				// LCD On. Cursor off
  d6:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_Init>
	button_Init();			// Int0. Boton como salida
  da:	0e 94 86 01 	call	0x30c	; 0x30c <button_Init>
	
	/* Nivel de Batería */
	ADC_Init();				// Conversion ADC
  de:	0e 94 37 01 	call	0x26e	; 0x26e <ADC_Init>
	RGBLed_Init();			// Indicador
  e2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <RGBLed_Init>
	
	/* Control de tiempos */
	Timer_Init();
  e6:	0e 94 9d 01 	call	0x33a	; 0x33a <Timer_Init>
	/* Debug */
	LED_INIT();				// Led como salida
  ea:	21 9a       	sbi	0x04, 1	; 4
	
	sei();					// Habilita IRQs
  ec:	78 94       	sei

	/* Cambio de modo */
	MPswitchMode(PASSIVE_MODE);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <MPswitchMode>
	//COswitchMode(QA_MODE);
	
	/* Mensajes iniciales por LCD */
	LCD_MensajeInicial();		// Inicializando...
  f4:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_MensajeInicial>
	LCD_MensajeTiempo(4);		// Calentando. Tiempo restante en segundos
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_MensajeTiempo>
	
	/* Reinicia el control de timers para los dispositivos */
	setTime(TIMER_LCD, 0);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 b1 01 	call	0x362	; 0x362 <setTime>
	setTime(TIMER_ADC, 0);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 b1 01 	call	0x362	; 0x362 <setTime>
	setTime(TIMER_BT, 0);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 b1 01 	call	0x362	; 0x362 <setTime>
	setTime(TIMER_GLOBAL, 0);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 b1 01 	call	0x362	; 0x362 <setTime>

	key = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <key>
	DATA_CO = 0;
 12e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <DATA_CO+0x1>
 132:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DATA_CO>
	conexion_bt = 1;
 136:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <conexion_bt>
			if (conexion_bt == 1)
			{
				Flag_Ack = 1;
				Mux_Channel(CHANNEL_BT);
				USART_Transmit(DATA_CO2>>8);
				USART_Transmit(DATA_CO2);
 13a:	0f 2e       	mov	r0, r31
 13c:	fd e2       	ldi	r31, 0x2D	; 45
 13e:	ef 2e       	mov	r14, r31
 140:	f2 e0       	ldi	r31, 0x02	; 2
 142:	ff 2e       	mov	r15, r31
 144:	f0 2d       	mov	r31, r0
			//DATA_CO = COgetData();

			/* Bluetooth */
			if (conexion_bt == 1)
			{
				Flag_Ack = 1;
 146:	11 e0       	ldi	r17, 0x01	; 1
	DATA_CO = 0;
	conexion_bt = 1;
	while (1) 
	{
		/* Sensores */
		if(key == 1)
 148:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <key>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	49 f5       	brne	.+82     	; 0x1a2 <main+0xde>
		{
			//key = 0;
	
			/* CO2 */
			DATA_CO2 = CO2getData();
 150:	0e 94 23 04 	call	0x846	; 0x846 <CO2getData>
 154:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <DATA_CO2+0x1>
 158:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <DATA_CO2>
			
			/* MP */
			MPgetData(DATA_MP);
 15c:	89 e2       	ldi	r24, 0x29	; 41
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	0e 94 97 04 	call	0x92e	; 0x92e <MPgetData>
			
			/* CO */
			//DATA_CO = COgetData();

			/* Bluetooth */
			if (conexion_bt == 1)
 164:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <conexion_bt>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	d9 f4       	brne	.+54     	; 0x1a2 <main+0xde>
			{
				Flag_Ack = 1;
 16c:	10 93 28 02 	sts	0x0228, r17	; 0x800228 <Flag_Ack>
				Mux_Channel(CHANNEL_BT);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 8d 01 	call	0x31a	; 0x31a <Mux_Channel>
				USART_Transmit(DATA_CO2>>8);
 176:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <DATA_CO2+0x1>
 17a:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
				USART_Transmit(DATA_CO2);
 17e:	f7 01       	movw	r30, r14
 180:	80 81       	ld	r24, Z
 182:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
				USART_Transmit(DATA_MP[0]);
 186:	c9 e2       	ldi	r28, 0x29	; 41
 188:	d2 e0       	ldi	r29, 0x02	; 2
 18a:	88 81       	ld	r24, Y
 18c:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
				USART_Transmit(DATA_MP[1]);
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
				USART_Transmit(DATA_MP[2]);
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
				USART_Transmit(DATA_MP[3]);
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>

		}
		
		
		/* Bateria */
		time_adc = getTime(TIMER_ADC);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 cd 01 	call	0x39a	; 0x39a <getTime>
 1a8:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <time_adc+0x1>
 1ac:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <time_adc>
		if (time_adc >= 60)
 1b0:	cc 97       	sbiw	r24, 0x3c	; 60
 1b2:	48 f1       	brcs	.+82     	; 0x206 <main+0x142>
		{
			ADC_Start();
 1b4:	0e 94 42 01 	call	0x284	; 0x284 <ADC_Start>
			setTime(TIMER_ADC, 0);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 b1 01 	call	0x362	; 0x362 <setTime>
			bateria = ADC_GetValue();
 1c2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_GetValue>
 1c6:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <bateria+0x1>
 1ca:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <bateria>
			if (bateria >=850){ RGBLed_Color(GREEN);}
 1ce:	82 35       	cpi	r24, 0x52	; 82
 1d0:	93 40       	sbci	r25, 0x03	; 3
 1d2:	18 f0       	brcs	.+6      	; 0x1da <main+0x116>
 1d4:	81 2f       	mov	r24, r17
 1d6:	0e 94 03 04 	call	0x806	; 0x806 <RGBLed_Color>
			if ((bateria >=200)&(bateria<850)){ RGBLed_Color(YELLOW);}
 1da:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <bateria>
 1de:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <bateria+0x1>
 1e2:	88 5c       	subi	r24, 0xC8	; 200
 1e4:	91 09       	sbc	r25, r1
 1e6:	8a 38       	cpi	r24, 0x8A	; 138
 1e8:	92 40       	sbci	r25, 0x02	; 2
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <main+0x12e>
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 03 04 	call	0x806	; 0x806 <RGBLed_Color>
			if (bateria <200){ RGBLed_Color(RED);}
 1f2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <bateria>
 1f6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <bateria+0x1>
 1fa:	88 3c       	cpi	r24, 0xC8	; 200
 1fc:	91 05       	cpc	r25, r1
 1fe:	18 f4       	brcc	.+6      	; 0x206 <main+0x142>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 03 04 	call	0x806	; 0x806 <RGBLed_Color>
		}
		
		/* LCD */
		DATA_MP25 = (DATA_MP[0]<<8) | (DATA_MP[1]);
 206:	e9 e2       	ldi	r30, 0x29	; 41
 208:	f2 e0       	ldi	r31, 0x02	; 2
 20a:	60 81       	ld	r22, Z
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	76 2f       	mov	r23, r22
 210:	66 27       	eor	r22, r22
 212:	81 81       	ldd	r24, Z+1	; 0x01
 214:	68 2b       	or	r22, r24
 216:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <DATA_MP25+0x1>
 21a:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <DATA_MP25>
		DATA_MP10 = (DATA_MP[2]<<8) | (DATA_MP[3]);
 21e:	42 81       	ldd	r20, Z+2	; 0x02
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	54 2f       	mov	r21, r20
 224:	44 27       	eor	r20, r20
 226:	83 81       	ldd	r24, Z+3	; 0x03
 228:	48 2b       	or	r20, r24
 22a:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <DATA_MP10+0x1>
 22e:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <DATA_MP10>
		LCD_MensajePrincipal(DATA_CO2, DATA_MP25, DATA_MP10, DATA_CO);
 232:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <DATA_CO>
 236:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <DATA_CO+0x1>
 23a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <DATA_CO2>
 23e:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <DATA_CO2+0x1>
 242:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_MensajePrincipal>
		
		/* Mensaje por desconexion */
		time_bt = getTime(TIMER_BT);
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 cd 01 	call	0x39a	; 0x39a <getTime>
 24c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <time_bt+0x1>
 250:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <time_bt>
		if (time_bt == 20)
 254:	44 97       	sbiw	r24, 0x14	; 20
 256:	09 f0       	breq	.+2      	; 0x25a <main+0x196>
 258:	77 cf       	rjmp	.-274    	; 0x148 <main+0x84>
		{
			setTime(TIMER_BT, 0);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 b1 01 	call	0x362	; 0x362 <setTime>
			LCD_MensajeConexion(conexion_bt);		// Muestra mensaje por 3 segundos
 264:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <conexion_bt>
 268:	0e 94 08 03 	call	0x610	; 0x610 <LCD_MensajeConexion>
 26c:	6d cf       	rjmp	.-294    	; 0x148 <main+0x84>

0000026e <ADC_Init>:
Returns:  none
*************************************************************************/
void ADC_Init(void)
{
	/* Voltage Reference = AVCC */
	ADMUX |= (1<<REFS0)|(ADC_CHANNEL<<MUX0);
 26e:	ec e7       	ldi	r30, 0x7C	; 124
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 64       	ori	r24, 0x40	; 64
 276:	80 83       	st	Z, r24
	#if ADC_MODE == EIGHTBIT
	ADMUX |= (1<<ADLAR); 	// Adjust the bits to the left
	#endif

	/* ADC Enable, ADC Interrupt Enable, Prescaler predefined to work at 125 KHz */
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(ADC_PRESC<<ADPS0);
 278:	ea e7       	ldi	r30, 0x7A	; 122
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8e 68       	ori	r24, 0x8E	; 142
 280:	80 83       	st	Z, r24
 282:	08 95       	ret

00000284 <ADC_Start>:
}

void ADC_Start()
{
	/* Activa ADC */
	ADCSRA |= (1<<ADSC);
 284:	ea e7       	ldi	r30, 0x7A	; 122
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	80 83       	st	Z, r24
	/* Cambia de estadp*/
	ADC_status = ADC_WAIT;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ADC_status>
 294:	08 95       	ret

00000296 <__vector_21>:
Interrupt Vector for the ADC.
If the conversion is ready this ISR will execute. Saves the data and
change the index of the ADC Buffer.
*************************************************************************/
ISR(ADC_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	/* ADC Value */
	#if ADC_MODE == TENBIT
	uint16_t temp;
	temp = ADC;
 2a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	#endif
	
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (ADC_Head + 1) & ADC_BUFFER_MASK;
 2b0:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <ADC_Head>
 2b4:	ef 5f       	subi	r30, 0xFF	; 255
 2b6:	e7 70       	andi	r30, 0x07	; 7
	
	/* Store new index */
	ADC_Head = tmphead;
 2b8:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <ADC_Head>
	
	/* Store the data in the buffer */
	ADC_Buffer[tmphead] = temp;
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e8 50       	subi	r30, 0x08	; 8
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	91 83       	std	Z+1, r25	; 0x01
 2c8:	80 83       	st	Z, r24

	/* Change the current state */
	ADC_status = ADC_RDY;
 2ca:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ADC_status>
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <ADC_GetValue>:
*************************************************************************/
#if ADC_MODE == TENBIT
uint16_t ADC_GetValue(void)
{
	/*Espera a nueva data*/
	while(ADC_Head == ADC_Tail){}
 2e0:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <ADC_Head>
 2e4:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
 2e8:	98 17       	cp	r25, r24
 2ea:	d1 f3       	breq	.-12     	; 0x2e0 <ADC_GetValue>
	uint8_t tmptail;
	
	/* Calcula el indice */
	tmptail = (ADC_Tail + 1) & ADC_BUFFER_MASK;
 2ec:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	87 70       	andi	r24, 0x07	; 7
	/* Almacena nuevo indice */
	ADC_Tail = tmptail;
 2f4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <__data_end>
	/* Devuelve el valor */
	return ADC_Buffer[ADC_Tail];
 2f8:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <__data_end>
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	e8 50       	subi	r30, 0x08	; 8
 304:	fe 4f       	sbci	r31, 0xFE	; 254
}
 306:	80 81       	ld	r24, Z
 308:	91 81       	ldd	r25, Z+1	; 0x01
 30a:	08 95       	ret

0000030c <button_Init>:
/**************************************/
void led_debug(void)
{
	LED_ON();
	_delay_ms(3000);
	LED_OFF();
 30c:	e9 e6       	ldi	r30, 0x69	; 105
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	82 60       	ori	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
 316:	e8 9a       	sbi	0x1d, 0	; 29
 318:	08 95       	ret

0000031a <Mux_Channel>:
/*  			  Mux 		 		  */
/**************************************/
void Mux_Channel( uint8_t channel)
{
	//MUX_ENABLE();
	MUX_CLEAR();
 31a:	9b b1       	in	r25, 0x0b	; 11
 31c:	9f 79       	andi	r25, 0x9F	; 159
 31e:	9b b9       	out	0x0b, r25	; 11
	switch (channel)
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	31 f0       	breq	.+12     	; 0x330 <Mux_Channel+0x16>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	31 f0       	breq	.+12     	; 0x334 <Mux_Channel+0x1a>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	31 f4       	brne	.+12     	; 0x338 <Mux_Channel+0x1e>
	{
	case 0:
		break;
	case 1:
		MUX_SEL0();
 32c:	5d 9a       	sbi	0x0b, 5	; 11
		break;
 32e:	08 95       	ret
	case 2:
		MUX_SEL1();
 330:	5e 9a       	sbi	0x0b, 6	; 11
		break;
 332:	08 95       	ret
	case 3:
		MUX_SEL0();
 334:	5d 9a       	sbi	0x0b, 5	; 11
		MUX_SEL1();
 336:	5e 9a       	sbi	0x0b, 6	; 11
 338:	08 95       	ret

0000033a <Timer_Init>:
uint16_t segundos, segundosLCD, segundosADC, segundosBT;

void Timer_Init(void)
{
	/* Modo CTC. Prescaler = 1024 */
	TCCR1B = (1 << WGM12) | (5 << CS10);
 33a:	8d e0       	ldi	r24, 0x0D	; 13
 33c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	/* Reinicia la cuenta */
	TCNT1 = 0;
 340:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 344:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* Comparador = 1 seg */
	OCR1A = 976;
 348:	80 ed       	ldi	r24, 0xD0	; 208
 34a:	93 e0       	ldi	r25, 0x03	; 3
 34c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 350:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* Habilita la interrupciÃ³n por comparaciÃ³n*/
	TIMSK1 |= (1 << OCIE1A);
 354:	ef e6       	ldi	r30, 0x6F	; 111
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	82 60       	ori	r24, 0x02	; 2
 35c:	80 83       	st	Z, r24

	/* Limpia banderas de interrupcion*/
	TIFR1 |= (1 << OCF1A);
 35e:	b1 9a       	sbi	0x16, 1	; 22
 360:	08 95       	ret

00000362 <setTime>:

}

void setTime(uint8_t type, uint16_t newtime)
{
	switch (type)
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	59 f0       	breq	.+22     	; 0x37c <setTime+0x1a>
 366:	28 f0       	brcs	.+10     	; 0x372 <setTime+0x10>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	69 f0       	breq	.+26     	; 0x386 <setTime+0x24>
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	81 f0       	breq	.+32     	; 0x390 <setTime+0x2e>
 370:	08 95       	ret
	{
	case TIMER_GLOBAL:
		segundos = newtime;
 372:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <segundos+0x1>
 376:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <segundos>
		break;
 37a:	08 95       	ret

	case TIMER_LCD:
		segundosLCD = newtime;
 37c:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <segundosLCD+0x1>
 380:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <segundosLCD>
		break;
 384:	08 95       	ret

	case TIMER_ADC:
		segundosADC = newtime;
 386:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <segundosADC+0x1>
 38a:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <segundosADC>
		break;
 38e:	08 95       	ret

	case TIMER_BT:
		segundosBT = newtime;
 390:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <segundosBT+0x1>
 394:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <segundosBT>
 398:	08 95       	ret

0000039a <getTime>:
	}
}

uint16_t getTime(uint8_t type)
{
	switch (type)
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	59 f0       	breq	.+22     	; 0x3b4 <getTime+0x1a>
 39e:	28 f0       	brcs	.+10     	; 0x3aa <getTime+0x10>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	69 f0       	breq	.+26     	; 0x3be <getTime+0x24>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	81 f0       	breq	.+32     	; 0x3c8 <getTime+0x2e>
 3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <getTime+0x38>
	{
	case TIMER_GLOBAL:
		return segundos;
 3aa:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <segundos>
 3ae:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <segundos+0x1>
 3b2:	08 95       	ret
		break;

	case TIMER_LCD:
		return segundosLCD;
 3b4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <segundosLCD>
 3b8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <segundosLCD+0x1>
 3bc:	08 95       	ret
		break;

	case TIMER_ADC:
		return segundosADC;
 3be:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <segundosADC>
 3c2:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <segundosADC+0x1>
 3c6:	08 95       	ret
		break;

	case TIMER_BT:
		return segundosBT;
 3c8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <segundosBT>
 3cc:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <segundosBT+0x1>
 3d0:	08 95       	ret
		break;

	default:
		return 0;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
}
 3d6:	08 95       	ret

000003d8 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
	segundos++;
 3e6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <segundos>
 3ea:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <segundos+0x1>
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <segundos+0x1>
 3f4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <segundos>
	segundosLCD++;
 3f8:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <segundosLCD>
 3fc:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <segundosLCD+0x1>
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <segundosLCD+0x1>
 406:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <segundosLCD>
	segundosADC++;
 40a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <segundosADC>
 40e:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <segundosADC+0x1>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <segundosADC+0x1>
 418:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <segundosADC>
	segundosBT++;
 41c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <segundosBT>
 420:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <segundosBT+0x1>
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <segundosBT+0x1>
 42a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <segundosBT>
}
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <LCD_MensajeInicial>:

/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
 43c:	cf 93       	push	r28
 43e:	c4 e0       	ldi	r28, 0x04	; 4
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Up();
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("Inicializando   ");
 446:	89 e0       	ldi	r24, 0x09	; 9
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_GotoXY(0, 13);
 44e:	6d e0       	ldi	r22, 0x0D	; 13
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_GotoXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	8f e4       	ldi	r24, 0x4F	; 79
 458:	93 ec       	ldi	r25, 0xC3	; 195
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_MensajeInicial+0x1e>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_MensajeInicial+0x24>
 460:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 462:	86 e3       	ldi	r24, 0x36	; 54
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 46a:	8f e4       	ldi	r24, 0x4F	; 79
 46c:	93 ec       	ldi	r25, 0xC3	; 195
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_MensajeInicial+0x32>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_MensajeInicial+0x38>
 474:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 476:	86 e3       	ldi	r24, 0x36	; 54
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 47e:	8f e4       	ldi	r24, 0x4F	; 79
 480:	93 ec       	ldi	r25, 0xC3	; 195
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_MensajeInicial+0x46>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_MensajeInicial+0x4c>
 488:	00 00       	nop
		_delay_ms(200);
		LCD_String(".");
 48a:	86 e3       	ldi	r24, 0x36	; 54
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 492:	8f e4       	ldi	r24, 0x4F	; 79
 494:	93 ec       	ldi	r25, 0xC3	; 195
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_MensajeInicial+0x5a>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_MensajeInicial+0x60>
 49c:	00 00       	nop
 49e:	c1 50       	subi	r28, 0x01	; 1
/**************************************/
/*  		 Mensajes LCD 	 		  */
/**************************************/
void LCD_MensajeInicial(void)
{
	for (uint8_t i = 0; i < 4; i++)
 4a0:	79 f6       	brne	.-98     	; 0x440 <LCD_MensajeInicial+0x4>
		_delay_ms(200);
		LCD_String(".");
		_delay_ms(200);
	}

}
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <LCD_MensajeTiempo>:

void LCD_MensajeTiempo(uint16_t cuenta)
{
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	8c 01       	movw	r16, r24
	case TIMER_GLOBAL:
		segundos = newtime;
		break;

	case TIMER_LCD:
		segundosLCD = newtime;
 4b0:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <segundosLCD+0x1>
 4b4:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <segundosLCD>
void LCD_MensajeTiempo(uint16_t cuenta)
{
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);

	LCD_Up();
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
	LCD_String("Calentando       ");
 4be:	8a e1       	ldi	r24, 0x1A	; 26
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
	while (tiempo != cuenta)
 4c6:	01 15       	cp	r16, r1
 4c8:	11 05       	cpc	r17, r1
 4ca:	d9 f0       	breq	.+54     	; 0x502 <LCD_MensajeTiempo+0x5c>
	case TIMER_GLOBAL:
		return segundos;
		break;

	case TIMER_LCD:
		return segundosLCD;
 4cc:	c0 91 36 02 	lds	r28, 0x0236	; 0x800236 <segundosLCD>
 4d0:	d0 91 37 02 	lds	r29, 0x0237	; 0x800237 <segundosLCD+0x1>
	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
	{
		tiempo = getTime(TIMER_LCD);
		LCD_Down();
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_Number(cuenta - tiempo);
 4da:	c8 01       	movw	r24, r16
 4dc:	8c 1b       	sub	r24, r28
 4de:	9d 0b       	sbc	r25, r29
 4e0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Number>
		LCD_String("        ");
 4e4:	84 e6       	ldi	r24, 0x64	; 100
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_GotoXY(1, 3);
 4ec:	63 e0       	ldi	r22, 0x03	; 3
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_GotoXY>
		LCD_String(" Seg. Rest.");
 4f4:	8c e2       	ldi	r24, 0x2C	; 44
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
	uint16_t tiempo = 0;
	setTime(TIMER_LCD, 0);

	LCD_Up();
	LCD_String("Calentando       ");
	while (tiempo != cuenta)
 4fc:	0c 17       	cp	r16, r28
 4fe:	1d 07       	cpc	r17, r29
 500:	29 f7       	brne	.-54     	; 0x4cc <LCD_MensajeTiempo+0x26>
		LCD_String("        ");
		LCD_GotoXY(1, 3);
		LCD_String(" Seg. Rest.");
	}

}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	08 95       	ret

0000050c <LCD_MensajePrincipal>:


void LCD_MensajePrincipal(uint16_t co2data, uint16_t mp25data, uint16_t mp10data, uint16_t codata)
{
 50c:	cf 92       	push	r12
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
 51e:	7b 01       	movw	r14, r22
 520:	6a 01       	movw	r12, r20
 522:	89 01       	movw	r16, r18
	case TIMER_GLOBAL:
		return segundos;
		break;

	case TIMER_LCD:
		return segundosLCD;
 524:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <segundosLCD>
 528:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <segundosLCD+0x1>


void LCD_MensajePrincipal(uint16_t co2data, uint16_t mp25data, uint16_t mp10data, uint16_t codata)
{
	uint16_t tiempo = getTime(TIMER_LCD);
	if (tiempo < TIEMPO_SENSORES)
 52c:	85 30       	cpi	r24, 0x05	; 5
 52e:	91 05       	cpc	r25, r1
 530:	78 f4       	brcc	.+30     	; 0x550 <LCD_MensajePrincipal+0x44>
	{
		LCD_Up();
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("   Medidor de    ");
 538:	88 e3       	ldi	r24, 0x38	; 56
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_Down();
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("calidad del aire ");
 546:	8a e4       	ldi	r24, 0x4A	; 74
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 54e:	57 c0       	rjmp	.+174    	; 0x5fe <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (2 * TIEMPO_SENSORES) )
 550:	8a 30       	cpi	r24, 0x0A	; 10
 552:	91 05       	cpc	r25, r1
 554:	90 f4       	brcc	.+36     	; 0x57a <LCD_MensajePrincipal+0x6e>
	{
		LCD_Up();
 556:	80 e8       	ldi	r24, 0x80	; 128
 558:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("CO2             ");
 55c:	8c e5       	ldi	r24, 0x5C	; 92
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_Down();
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_Number(co2data);
 56a:	ce 01       	movw	r24, r28
 56c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Number>
		LCD_String(" ppm             ");
 570:	8d e6       	ldi	r24, 0x6D	; 109
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 578:	42 c0       	rjmp	.+132    	; 0x5fe <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (3 * TIEMPO_SENSORES) )
 57a:	8f 30       	cpi	r24, 0x0F	; 15
 57c:	91 05       	cpc	r25, r1
 57e:	90 f4       	brcc	.+36     	; 0x5a4 <LCD_MensajePrincipal+0x98>
	{
		LCD_Up();
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("PM 2.5          ");
 586:	8f e7       	ldi	r24, 0x7F	; 127
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_Down();
 58e:	80 ec       	ldi	r24, 0xC0	; 192
 590:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_Number(mp25data);
 594:	c7 01       	movw	r24, r14
 596:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Number>
		LCD_String(" ppm            ");
 59a:	80 e9       	ldi	r24, 0x90	; 144
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 5a2:	2d c0       	rjmp	.+90     	; 0x5fe <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (4 * TIEMPO_SENSORES))
 5a4:	84 31       	cpi	r24, 0x14	; 20
 5a6:	91 05       	cpc	r25, r1
 5a8:	90 f4       	brcc	.+36     	; 0x5ce <LCD_MensajePrincipal+0xc2>
	{
		LCD_Up();
 5aa:	80 e8       	ldi	r24, 0x80	; 128
 5ac:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("PM 10           ");
 5b0:	81 ea       	ldi	r24, 0xA1	; 161
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_Down();
 5b8:	80 ec       	ldi	r24, 0xC0	; 192
 5ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_Number(mp10data);
 5be:	c6 01       	movw	r24, r12
 5c0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Number>
		LCD_String(" ppm            ");
 5c4:	80 e9       	ldi	r24, 0x90	; 144
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 5cc:	18 c0       	rjmp	.+48     	; 0x5fe <LCD_MensajePrincipal+0xf2>
	}
	else if (tiempo < (5 * TIEMPO_SENSORES) )
 5ce:	49 97       	sbiw	r24, 0x19	; 25
 5d0:	90 f4       	brcc	.+36     	; 0x5f6 <LCD_MensajePrincipal+0xea>
	{
		LCD_Up();
 5d2:	80 e8       	ldi	r24, 0x80	; 128
 5d4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("CO             ");
 5d8:	82 eb       	ldi	r24, 0xB2	; 178
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_Down();
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_Number(codata);
 5e6:	c8 01       	movw	r24, r16
 5e8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Number>
		LCD_String(" ppm            ");
 5ec:	80 e9       	ldi	r24, 0x90	; 144
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 5f4:	04 c0       	rjmp	.+8      	; 0x5fe <LCD_MensajePrincipal+0xf2>
	case TIMER_GLOBAL:
		segundos = newtime;
		break;

	case TIMER_LCD:
		segundosLCD = newtime;
 5f6:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <segundosLCD+0x1>
 5fa:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <segundosLCD>
	}
	else
	{
		setTime(TIMER_LCD, 0);
	}
}
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	df 90       	pop	r13
 60c:	cf 90       	pop	r12
 60e:	08 95       	ret

00000610 <LCD_MensajeConexion>:

void LCD_MensajeConexion(uint8_t conexion)
{
	if (conexion == 0)
 610:	81 11       	cpse	r24, r1
 612:	0f c0       	rjmp	.+30     	; 0x632 <LCD_MensajeConexion+0x22>
	{
		/* Si no hay conexion */
		LCD_Up();
 614:	80 e8       	ldi	r24, 0x80	; 128
 616:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("Estado:         ");
 61a:	82 ec       	ldi	r24, 0xC2	; 194
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_Down();
 622:	80 ec       	ldi	r24, 0xC0	; 192
 624:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("Desconectado    ");
 628:	83 ed       	ldi	r24, 0xD3	; 211
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 630:	10 c0       	rjmp	.+32     	; 0x652 <LCD_MensajeConexion+0x42>
	}
	else if (conexion == 1)
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	71 f4       	brne	.+28     	; 0x652 <LCD_MensajeConexion+0x42>
	{
		/* Si hay conexion */
		LCD_Up();
 636:	80 e8       	ldi	r24, 0x80	; 128
 638:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("Estado:         ");
 63c:	82 ec       	ldi	r24, 0xC2	; 194
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
		LCD_Down();
 644:	80 ec       	ldi	r24, 0xC0	; 192
 646:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
		LCD_String("Conectado       ");
 64a:	84 ee       	ldi	r24, 0xE4	; 228
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
 652:	2f eb       	ldi	r18, 0xBF	; 191
 654:	87 e2       	ldi	r24, 0x27	; 39
 656:	99 e0       	ldi	r25, 0x09	; 9
 658:	21 50       	subi	r18, 0x01	; 1
 65a:	80 40       	sbci	r24, 0x00	; 0
 65c:	90 40       	sbci	r25, 0x00	; 0
 65e:	e1 f7       	brne	.-8      	; 0x658 <LCD_MensajeConexion+0x48>
 660:	00 c0       	rjmp	.+0      	; 0x662 <LCD_MensajeConexion+0x52>
 662:	00 00       	nop
 664:	08 95       	ret

00000666 <I2C_Init>:
Returns:  none
*************************************************************************/
void I2C_Init(void)
{
	/* Set SCL to 50 kHz. Macro definition */
	TWSR = 0x00;			// Prescaler = 1
 666:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = MYTWBR;			// Macro 72
 66a:	8a e2       	ldi	r24, 0x2A	; 42
 66c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	/* Enable TWI */
	TWCR = (1 << TWEN);
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 676:	08 95       	ret

00000678 <I2C_Start>:
Returns:  none
*************************************************************************/
void I2C_Start(uint8_t address)
{
	/* Send Start Condition*/
	TWCR |= (1 << TWINT) | (1 << TWSTA);
 678:	ec eb       	ldi	r30, 0xBC	; 188
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	90 81       	ld	r25, Z
 67e:	90 6a       	ori	r25, 0xA0	; 160
 680:	90 83       	st	Z, r25
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 682:	90 81       	ld	r25, Z
 684:	99 23       	and	r25, r25
 686:	ec f7       	brge	.-6      	; 0x682 <I2C_Start+0xa>
	
	/* Send the address and W/R condition */
	TWDR = address;
 688:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT) | (1 << TWEA);
 68c:	ec eb       	ldi	r30, 0xBC	; 188
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	80 6c       	ori	r24, 0xC0	; 192
 694:	80 83       	st	Z, r24
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 696:	80 81       	ld	r24, Z
 698:	88 23       	and	r24, r24
 69a:	ec f7       	brge	.-6      	; 0x696 <I2C_Start+0x1e>
}
 69c:	08 95       	ret

0000069e <I2C_Stop>:
Returns:  none
*************************************************************************/
void I2C_Stop(void)
{
	/* Send Stop Condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO);
 69e:	ec eb       	ldi	r30, 0xBC	; 188
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	80 69       	ori	r24, 0x90	; 144
 6a6:	80 83       	st	Z, r24
 6a8:	08 95       	ret

000006aa <I2C_Transmit>:
Returns:  none
*************************************************************************/
void I2C_Transmit(uint8_t data)
{
	/* Send the Data */
	TWDR = data;
 6aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 6ae:	84 ec       	ldi	r24, 0xC4	; 196
 6b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	/* Wait for the acknowledge bit */
	while (!(TWCR & (1 << TWINT)));
 6b4:	ec eb       	ldi	r30, 0xBC	; 188
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	88 23       	and	r24, r24
 6bc:	ec f7       	brge	.-6      	; 0x6b8 <I2C_Transmit+0xe>
}
 6be:	08 95       	ret

000006c0 <sendCMD>:
Allows to write new commands to the LCD 
Input:    CMD	Command to be send
Returns:  none
*************************************************************************/
void sendCMD(uint8_t CMD)
{
 6c0:	1f 93       	push	r17
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	c8 2f       	mov	r28, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 6c8:	8e e4       	ldi	r24, 0x4E	; 78
 6ca:	0e 94 3c 03 	call	0x678	; 0x678 <I2C_Start>
	
	/* Send commands. MS Nibble*/
	I2C_Transmit(bitmask = (CMD & 0xF0) | 0x08);
 6ce:	1c 2f       	mov	r17, r28
 6d0:	10 7f       	andi	r17, 0xF0	; 240
 6d2:	d1 2f       	mov	r29, r17
 6d4:	d8 60       	ori	r29, 0x08	; 8
 6d6:	8d 2f       	mov	r24, r29
 6d8:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 6dc:	81 2f       	mov	r24, r17
 6de:	8c 60       	ori	r24, 0x0C	; 12
 6e0:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 6e4:	8d 2f       	mov	r24, r29
 6e6:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	
	/* Send commands. LS Nibble*/
	I2C_Transmit(bitmask = ((CMD << 4) & 0xF0) | 0x08);
 6ea:	80 e1       	ldi	r24, 0x10	; 16
 6ec:	c8 9f       	mul	r28, r24
 6ee:	e0 01       	movw	r28, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	dc 2f       	mov	r29, r28
 6f4:	d8 60       	ori	r29, 0x08	; 8
 6f6:	8d 2f       	mov	r24, r29
 6f8:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 6fc:	8c 2f       	mov	r24, r28
 6fe:	8c 60       	ori	r24, 0x0C	; 12
 700:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 704:	8d 2f       	mov	r24, r29
 706:	8b 7f       	andi	r24, 0xFB	; 251
 708:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 70c:	0e 94 4f 03 	call	0x69e	; 0x69e <I2C_Stop>
}
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	1f 91       	pop	r17
 716:	08 95       	ret

00000718 <LCD_Init>:
Returns:  none
*************************************************************************/
void LCD_Init(void)
{
	/* Initialize LCD */
	sendCMD(LCD_8BIT);
 718:	83 e3       	ldi	r24, 0x33	; 51
 71a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
	sendCMD(LCD_4BIT);
 71e:	82 e3       	ldi	r24, 0x32	; 50
 720:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
	sendCMD(LCD_FUNCTION_4BIT_2LINES);
 724:	88 e2       	ldi	r24, 0x28	; 40
 726:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
	sendCMD(LCD_DISP_ON);
 72a:	8c e0       	ldi	r24, 0x0C	; 12
 72c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
	sendCMD(LCD_CLR);
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
 736:	08 95       	ret

00000738 <LCD_GotoXY>:
Returns:  none
*************************************************************************/
void LCD_GotoXY (uint8_t row, uint8_t col)
{
	/* Change the cursor*/
	if (row == 1)
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	29 f4       	brne	.+10     	; 0x746 <LCD_GotoXY+0xe>
	sendCMD(LCD_ROW1 + col);
 73c:	80 e8       	ldi	r24, 0x80	; 128
 73e:	86 0f       	add	r24, r22
 740:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
 744:	08 95       	ret
	if (row == 2)
 746:	82 30       	cpi	r24, 0x02	; 2
 748:	21 f4       	brne	.+8      	; 0x752 <LCD_GotoXY+0x1a>
	sendCMD(LCD_ROW2 + col);
 74a:	80 ec       	ldi	r24, 0xC0	; 192
 74c:	86 0f       	add	r24, r22
 74e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sendCMD>
 752:	08 95       	ret

00000754 <sendData>:
Put a char on the LCD Display. 
Input:    data	char to be shown
Returns:  none
*************************************************************************/
void sendData(uint8_t data)
{
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	c8 2f       	mov	r28, r24
	uint8_t bitmask;
	/* Send Address - Write Condition */
	I2C_Start(LCD_Add_WR);
 75c:	8e e4       	ldi	r24, 0x4E	; 78
 75e:	0e 94 3c 03 	call	0x678	; 0x678 <I2C_Start>
	
	/* Send Data. MS Nibble*/
	I2C_Transmit(bitmask = (data & 0xF0) | 0x08 | (1 << RS));
 762:	1c 2f       	mov	r17, r28
 764:	10 7f       	andi	r17, 0xF0	; 240
 766:	d1 2f       	mov	r29, r17
 768:	d9 60       	ori	r29, 0x09	; 9
 76a:	8d 2f       	mov	r24, r29
 76c:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 770:	81 2f       	mov	r24, r17
 772:	8d 60       	ori	r24, 0x0D	; 13
 774:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 778:	8d 2f       	mov	r24, r29
 77a:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	
	/* Send Data. LS Nibble*/
	I2C_Transmit(bitmask = ((data << 4) & 0xF0) | 0x08 | (1 << RS));
 77e:	80 e1       	ldi	r24, 0x10	; 16
 780:	c8 9f       	mul	r28, r24
 782:	e0 01       	movw	r28, r0
 784:	11 24       	eor	r1, r1
 786:	dc 2f       	mov	r29, r28
 788:	d9 60       	ori	r29, 0x09	; 9
 78a:	8d 2f       	mov	r24, r29
 78c:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask |= (1 << E));
 790:	8c 2f       	mov	r24, r28
 792:	8d 60       	ori	r24, 0x0D	; 13
 794:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	I2C_Transmit(bitmask &= ~(1 << E));
 798:	8d 2f       	mov	r24, r29
 79a:	8b 7f       	andi	r24, 0xFB	; 251
 79c:	0e 94 55 03 	call	0x6aa	; 0x6aa <I2C_Transmit>
	
	/* Stop Condition */
	I2C_Stop();
 7a0:	0e 94 4f 03 	call	0x69e	; 0x69e <I2C_Stop>
}
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	1f 91       	pop	r17
 7aa:	08 95       	ret

000007ac <LCD_String>:
Put a String on the LCD Display. 
Input:    arr1	String to be shown
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	ec 01       	movw	r28, r24
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 7b2:	88 81       	ld	r24, Y
 7b4:	88 23       	and	r24, r24
 7b6:	31 f0       	breq	.+12     	; 0x7c4 <LCD_String+0x18>
 7b8:	21 96       	adiw	r28, 0x01	; 1
	{
		sendData(*arr1);		// Send 1 char at the time
 7ba:	0e 94 aa 03 	call	0x754	; 0x754 <sendData>
Returns:  none
*************************************************************************/
void LCD_String(char* arr1)
{
	/* Last char will be null. Check for characters to send*/
	while(*arr1 != 0x00)
 7be:	89 91       	ld	r24, Y+
 7c0:	81 11       	cpse	r24, r1
 7c2:	fb cf       	rjmp	.-10     	; 0x7ba <LCD_String+0xe>
	{
		sendData(*arr1);		// Send 1 char at the time
		arr1++;					// Increment the index
	}
}
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <LCD_Number>:
Put a Number on the LCD Display. 
Input:    numb	number to be shown
Returns:  none
*************************************************************************/
void LCD_Number(uint16_t numb)
{
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <LCD_Number+0x6>
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <LCD_Number+0x8>
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7d6:	4a e0       	ldi	r20, 0x0A	; 10
 7d8:	be 01       	movw	r22, r28
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	0e 94 6d 05 	call	0xada	; 0xada <__itoa_ncheck>
	char array[4];				// 4 digits of the number. Change if needed
	itoa(numb, array, 10);		// Radix for the conversion: 10
	LCD_String(array);			// Send the ASCII codes obtained from data
 7e2:	ce 01       	movw	r24, r28
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_String>
	
}
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	0f 90       	pop	r0
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <RGBLed_Init>:
Input:    none
Returns:  none
*************************************************************************/
void RGBLed_Init(void)
{
	RGB_CLEAR();										// Turn off the pins
 7f8:	88 b1       	in	r24, 0x08	; 8
 7fa:	8e 60       	ori	r24, 0x0E	; 14
 7fc:	88 b9       	out	0x08, r24	; 8
	DDR_RGB |= (1<<PIN_R)|(1<<PIN_G)|(1<<PIN_B);		// Pins as output
 7fe:	87 b1       	in	r24, 0x07	; 7
 800:	8e 60       	ori	r24, 0x0E	; 14
 802:	87 b9       	out	0x07, r24	; 7
 804:	08 95       	ret

00000806 <RGBLed_Color>:
Input:    color 	color the led will shown
Returns:  none
*************************************************************************/
void RGBLed_Color(uint8_t color)
{
	RGB_CLEAR();
 806:	98 b1       	in	r25, 0x08	; 8
 808:	9e 60       	ori	r25, 0x0E	; 14
 80a:	98 b9       	out	0x08, r25	; 8
	switch(color)
 80c:	82 30       	cpi	r24, 0x02	; 2
 80e:	81 f0       	breq	.+32     	; 0x830 <RGBLed_Color+0x2a>
 810:	28 f4       	brcc	.+10     	; 0x81c <RGBLed_Color+0x16>
 812:	88 23       	and	r24, r24
 814:	49 f0       	breq	.+18     	; 0x828 <RGBLed_Color+0x22>
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	49 f0       	breq	.+18     	; 0x82c <RGBLed_Color+0x26>
 81a:	08 95       	ret
 81c:	84 30       	cpi	r24, 0x04	; 4
 81e:	69 f0       	breq	.+26     	; 0x83a <RGBLed_Color+0x34>
 820:	48 f0       	brcs	.+18     	; 0x834 <RGBLed_Color+0x2e>
 822:	85 30       	cpi	r24, 0x05	; 5
 824:	69 f0       	breq	.+26     	; 0x840 <RGBLed_Color+0x3a>
 826:	08 95       	ret
	{
		case RED:
			RGB_RED();
 828:	41 98       	cbi	0x08, 1	; 8
			break;
 82a:	08 95       	ret
		case GREEN:
			RGB_GREEN();
 82c:	42 98       	cbi	0x08, 2	; 8
			break;
 82e:	08 95       	ret
		case BLUE:
			RGB_BLUE();
 830:	43 98       	cbi	0x08, 3	; 8
			break;
 832:	08 95       	ret
		case YELLOW:
			RGB_GREEN();
 834:	42 98       	cbi	0x08, 2	; 8
			RGB_RED();
 836:	41 98       	cbi	0x08, 1	; 8
			break;
 838:	08 95       	ret
		case CYAN:
			RGB_BLUE();
 83a:	43 98       	cbi	0x08, 3	; 8
			RGB_GREEN();
 83c:	42 98       	cbi	0x08, 2	; 8
			break;
 83e:	08 95       	ret
		case MAGENTA:
			RGB_BLUE();
 840:	43 98       	cbi	0x08, 3	; 8
			RGB_RED();
 842:	41 98       	cbi	0x08, 1	; 8
 844:	08 95       	ret

00000846 <CO2getData>:
#include "UART.h"				// UART-HW
#include "comps.h"				// MUX 
#include <util/delay.h>			// Delay

uint16_t CO2getData()
{
 846:	ef 92       	push	r14
 848:	ff 92       	push	r15
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	62 97       	sbiw	r28, 0x12	; 18
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	f8 94       	cli
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	0f be       	out	0x3f, r0	; 63
 860:	cd bf       	out	0x3d, r28	; 61
	/* Declaracion de variables */
	uint8_t gasCommand[9] = {GASCOMMAND1, GASCOMMAND2, GASCOMMAND3, GASCOMMAND4, GASCOMMAND5, GASCOMMAND6, GASCOMMAND7, GASCOMMAND8, GASCOMMAND9};
 862:	89 e0       	ldi	r24, 0x09	; 9
 864:	e0 e0       	ldi	r30, 0x00	; 0
 866:	f1 e0       	ldi	r31, 0x01	; 1
 868:	de 01       	movw	r26, r28
 86a:	11 96       	adiw	r26, 0x01	; 1
 86c:	01 90       	ld	r0, Z+
 86e:	0d 92       	st	X+, r0
 870:	8a 95       	dec	r24
 872:	e1 f7       	brne	.-8      	; 0x86c <CO2getData+0x26>
	uint8_t data[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 874:	7e 01       	movw	r14, r28
 876:	8a e0       	ldi	r24, 0x0A	; 10
 878:	e8 0e       	add	r14, r24
 87a:	f1 1c       	adc	r15, r1
 87c:	89 e0       	ldi	r24, 0x09	; 9
 87e:	f7 01       	movw	r30, r14
 880:	11 92       	st	Z+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <CO2getData+0x3a>
	uint16_t gasC = 0;
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	0e 94 8d 01 	call	0x31a	; 0x31a <Mux_Channel>
 88c:	8e 01       	movw	r16, r28
 88e:	0f 5f       	subi	r16, 0xFF	; 255
 890:	1f 4f       	sbci	r17, 0xFF	; 255
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
	{
		USART_Transmit(gasCommand[i]);
 892:	f8 01       	movw	r30, r16
 894:	81 91       	ld	r24, Z+
 896:	8f 01       	movw	r16, r30
 898:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	
	/* Habilita el mux para el CO2 */
	Mux_Channel(CHANNEL_CO2);
		
	/* Envia solicitud para recibir datos */
	for(int i = 0; i<9; i++)
 89c:	0e 15       	cp	r16, r14
 89e:	1f 05       	cpc	r17, r15
 8a0:	c1 f7       	brne	.-16     	; 0x892 <CO2getData+0x4c>
 8a2:	8e 01       	movw	r16, r28
 8a4:	06 5f       	subi	r16, 0xF6	; 246
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	7e 01       	movw	r14, r28
 8aa:	f3 e1       	ldi	r31, 0x13	; 19
 8ac:	ef 0e       	add	r14, r31
 8ae:	f1 1c       	adc	r15, r1
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
	{
		data[i] = USART_Receive();
 8b0:	0e 94 47 05 	call	0xa8e	; 0xa8e <USART_Receive>
 8b4:	f8 01       	movw	r30, r16
 8b6:	81 93       	st	Z+, r24
 8b8:	8f 01       	movw	r16, r30
	{
		USART_Transmit(gasCommand[i]);
	}
	
	/* Recibe datos*/
	for(int i = 0; i<9; i++)
 8ba:	ee 15       	cp	r30, r14
 8bc:	ff 05       	cpc	r31, r15
 8be:	c1 f7       	brne	.-16     	; 0x8b0 <CO2getData+0x6a>
	{
		data[i] = USART_Receive();
	}

	/* Mascara para concetración de CO2 */
	gasC = (data[2]<<8) | (data[3]);
 8c0:	8c 85       	ldd	r24, Y+12	; 0x0c
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	98 2f       	mov	r25, r24
 8c6:	88 27       	eor	r24, r24
 8c8:	2d 85       	ldd	r18, Y+13	; 0x0d
	
	/* Regresa la concentración de CO2*/
	return gasC;
}
 8ca:	82 2b       	or	r24, r18
 8cc:	62 96       	adiw	r28, 0x12	; 18
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	08 95       	ret

000008e6 <MPswitchMode>:


void MPswitchMode(uint8_t t)
{
 8e6:	1f 93       	push	r17
 8e8:	cf 93       	push	r28
 8ea:	df 93       	push	r29
 8ec:	18 2f       	mov	r17, r24
	/* Declaración de variables */
	uint16_t temp = START_BYTE1+START_BYTE2 +CHANGE_MODE +t;
 8ee:	c8 2f       	mov	r28, r24
 8f0:	d0 e0       	ldi	r29, 0x00	; 0
 8f2:	c0 59       	subi	r28, 0x90	; 144
 8f4:	de 4f       	sbci	r29, 0xFE	; 254
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 8f6:	82 e0       	ldi	r24, 0x02	; 2
 8f8:	0e 94 8d 01 	call	0x31a	; 0x31a <Mux_Channel>
		
	/* Solicitud para cambiar de modo */
	USART_Transmit(START_BYTE1);
 8fc:	82 e4       	ldi	r24, 0x42	; 66
 8fe:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(START_BYTE2);
 902:	8d e4       	ldi	r24, 0x4D	; 77
 904:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(CHANGE_MODE);
 908:	81 ee       	ldi	r24, 0xE1	; 225
 90a:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(0x00);
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(t);
 914:	81 2f       	mov	r24, r17
 916:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(LRCH);
 91a:	8d 2f       	mov	r24, r29
 91c:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(LRCL);
 920:	8c 2f       	mov	r24, r28
 922:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
}
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	08 95       	ret

0000092e <MPgetData>:


void MPgetData(uint8_t *array)
{
 92e:	cf 92       	push	r12
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
 942:	6f 97       	sbiw	r28, 0x1f	; 31
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	f8 94       	cli
 948:	de bf       	out	0x3e, r29	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	cd bf       	out	0x3d, r28	; 61
 94e:	6c 01       	movw	r12, r24
	uint8_t LRCH = (temp>>8);
	uint8_t LRCL = temp;
	uint8_t Buff_MP[31];
	
	/* Habilita el mux para el MP */
	Mux_Channel(CHANNEL_MP);
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	0e 94 8d 01 	call	0x31a	; 0x31a <Mux_Channel>
		
	/* Solicitud para recibir datos */
	USART_Transmit(START_BYTE1);
 956:	82 e4       	ldi	r24, 0x42	; 66
 958:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(START_BYTE2);
 95c:	8d e4       	ldi	r24, 0x4D	; 77
 95e:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(READ_DATA);
 962:	82 ee       	ldi	r24, 0xE2	; 226
 964:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(0x00);
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(0x00);
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(LRCH);
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	USART_Transmit(LRCL);
 97a:	81 e7       	ldi	r24, 0x71	; 113
 97c:	0e 94 58 05 	call	0xab0	; 0xab0 <USART_Transmit>
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
 980:	0e 94 47 05 	call	0xa8e	; 0xa8e <USART_Receive>
 984:	82 34       	cpi	r24, 0x42	; 66
 986:	e1 f7       	brne	.-8      	; 0x980 <MPgetData+0x52>
 988:	8e 01       	movw	r16, r28
 98a:	0f 5f       	subi	r16, 0xFF	; 255
 98c:	1f 4f       	sbci	r17, 0xFF	; 255
 98e:	7e 01       	movw	r14, r28
 990:	80 e2       	ldi	r24, 0x20	; 32
 992:	e8 0e       	add	r14, r24
 994:	f1 1c       	adc	r15, r1
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
	{
		Buff_MP[i] = USART_Receive();
 996:	0e 94 47 05 	call	0xa8e	; 0xa8e <USART_Receive>
 99a:	f8 01       	movw	r30, r16
 99c:	81 93       	st	Z+, r24
 99e:	8f 01       	movw	r16, r30
	
	/* Espera el bit de inicio */
	while (USART_Receive() != START_BYTE1){}
	
	/* Recibe datos */
	for (uint8_t i= 0; i<31; i++)
 9a0:	ee 15       	cp	r30, r14
 9a2:	ff 05       	cpc	r31, r15
 9a4:	c1 f7       	brne	.-16     	; 0x996 <MPgetData+0x68>
	{
		Buff_MP[i] = USART_Receive();
	}
	/* MP 2.5 */
	array[0] = Buff_MP[6];
 9a6:	8f 81       	ldd	r24, Y+7	; 0x07
 9a8:	f6 01       	movw	r30, r12
 9aa:	80 83       	st	Z, r24
	array[1] = Buff_MP[7];
 9ac:	88 85       	ldd	r24, Y+8	; 0x08
 9ae:	81 83       	std	Z+1, r24	; 0x01
	/* MP 10 */
	array[2] = Buff_MP[8];
 9b0:	89 85       	ldd	r24, Y+9	; 0x09
 9b2:	82 83       	std	Z+2, r24	; 0x02
	array[3] = Buff_MP[9];
 9b4:	8a 85       	ldd	r24, Y+10	; 0x0a
 9b6:	83 83       	std	Z+3, r24	; 0x03
}
 9b8:	6f 96       	adiw	r28, 0x1f	; 31
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	df 90       	pop	r13
 9d2:	cf 90       	pop	r12
 9d4:	08 95       	ret

000009d6 <USART_Init>:
Returns:  none
*************************************************************************/
void USART_Init(unsigned int ubrr_val)
{
	/* Set the baud rate */
	UBRR0H = (uint8_t) (ubrr_val>>8);                  
 9d6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t) ubrr_val;
 9da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable 2X Mode */ 
	UCSR0A = (1<<U2X0);
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	/* Enable USART receiver and transmitter */
	UCSR0B = ((1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)); 
 9e4:	88 e9       	ldi	r24, 0x98	; 152
 9e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	/* Set frame format: 8 data 1stop */
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 9ea:	86 e0       	ldi	r24, 0x06	; 6
 9ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	/* Flush buffers */    
	USART_RxTail = 0;
 9f0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <USART_RxTail>
	USART_RxHead = 0;
 9f4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <USART_RxHead>
	USART_TxTail = 0;
 9f8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <USART_TxTail>
	USART_TxHead = 0;
 9fc:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <USART_TxHead>
 a00:	08 95       	ret

00000a02 <__vector_18>:
Interrupt Vector for the RX Mode.
If there are new unread data this ISR will execute. Saves the data and
change the index of the RX Buffer.
*************************************************************************/
ISR(USART_RX_vect)
{
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	8f 93       	push	r24
 a0e:	ef 93       	push	r30
 a10:	ff 93       	push	r31
	uint8_t data;
	uint8_t tmphead;

	/* Read the received data */
	data = UDR0;                 
 a12:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/* Calculate buffer index */
	tmphead = (USART_RxHead + 1) & USART_RX_BUFFER_MASK;
 a16:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <USART_RxHead>
 a1a:	ef 5f       	subi	r30, 0xFF	; 255
 a1c:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_RxHead = tmphead;
 a1e:	e0 93 14 02 	sts	0x0214, r30	; 0x800214 <USART_RxHead>
	/* Store received data in buffer */
	USART_RxBuf[tmphead] = data; 
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	eb 5e       	subi	r30, 0xEB	; 235
 a26:	fd 4f       	sbci	r31, 0xFD	; 253
 a28:	80 83       	st	Z, r24
}
 a2a:	ff 91       	pop	r31
 a2c:	ef 91       	pop	r30
 a2e:	8f 91       	pop	r24
 a30:	0f 90       	pop	r0
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	0f 90       	pop	r0
 a36:	1f 90       	pop	r1
 a38:	18 95       	reti

00000a3a <__vector_19>:
If the buffer of the UART is empty this ISR will execute. Check for new 
data to be sent and puts that into the buffer . Change the index of the 
TX Buffer.
*************************************************************************/
ISR(USART_UDRE_vect)
{
 a3a:	1f 92       	push	r1
 a3c:	0f 92       	push	r0
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	0f 92       	push	r0
 a42:	11 24       	eor	r1, r1
 a44:	8f 93       	push	r24
 a46:	9f 93       	push	r25
 a48:	ef 93       	push	r30
 a4a:	ff 93       	push	r31
	uint8_t tmptail;

	/* Check if all data is transmitted */
	if (USART_TxHead != USART_TxTail) 
 a4c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <USART_TxHead>
 a50:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <USART_TxTail>
 a54:	98 17       	cp	r25, r24
 a56:	69 f0       	breq	.+26     	; 0xa72 <__vector_19+0x38>
	{
		/* Calculate buffer index */
		tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
 a58:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <USART_TxTail>
 a5c:	ef 5f       	subi	r30, 0xFF	; 255
 a5e:	e7 70       	andi	r30, 0x07	; 7
		/* Store new index */
		USART_TxTail = tmptail;      
 a60:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <USART_TxTail>
		/* Start transmission */
		UDR0 = USART_TxBuf[tmptail];  
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	e5 5f       	subi	r30, 0xF5	; 245
 a68:	fd 4f       	sbci	r31, 0xFD	; 253
 a6a:	80 81       	ld	r24, Z
 a6c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a70:	05 c0       	rjmp	.+10     	; 0xa7c <__vector_19+0x42>
	} else 
	{       
		/* Disable UDRE interrupt */
		UCSR0B &= ~(1<<UDRIE0);         
 a72:	e1 ec       	ldi	r30, 0xC1	; 193
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	80 81       	ld	r24, Z
 a78:	8f 7d       	andi	r24, 0xDF	; 223
 a7a:	80 83       	st	Z, r24
	}
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	9f 91       	pop	r25
 a82:	8f 91       	pop	r24
 a84:	0f 90       	pop	r0
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	0f 90       	pop	r0
 a8a:	1f 90       	pop	r1
 a8c:	18 95       	reti

00000a8e <USART_Receive>:
uint8_t USART_Receive(void)
{
	uint8_t tmptail;
	
	/* Wait for incoming data */
	while (USART_RxHead == USART_RxTail);
 a8e:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <USART_RxHead>
 a92:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <USART_RxTail>
 a96:	98 17       	cp	r25, r24
 a98:	d1 f3       	breq	.-12     	; 0xa8e <USART_Receive>
	/* Calculate buffer index */
	tmptail = (USART_RxTail + 1) & USART_RX_BUFFER_MASK;
 a9a:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <USART_RxTail>
 a9e:	ef 5f       	subi	r30, 0xFF	; 255
 aa0:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_RxTail = tmptail;                
 aa2:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <USART_RxTail>
	/* Return data */
	return USART_RxBuf[tmptail];          
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	eb 5e       	subi	r30, 0xEB	; 235
 aaa:	fd 4f       	sbci	r31, 0xFD	; 253
}
 aac:	80 81       	ld	r24, Z
 aae:	08 95       	ret

00000ab0 <USART_Transmit>:
void USART_Transmit(uint8_t data)
{
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 ab0:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <USART_TxHead>
 ab4:	2f 5f       	subi	r18, 0xFF	; 255
 ab6:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (tmphead == USART_TxTail);
 ab8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <USART_TxTail>
 abc:	29 17       	cp	r18, r25
 abe:	e1 f3       	breq	.-8      	; 0xab8 <USART_Transmit+0x8>
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
 ac0:	e2 2f       	mov	r30, r18
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	e5 5f       	subi	r30, 0xF5	; 245
 ac6:	fd 4f       	sbci	r31, 0xFD	; 253
 ac8:	80 83       	st	Z, r24
	/* Store new index */
	USART_TxHead = tmphead;               
 aca:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <USART_TxHead>
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);                    
 ace:	e1 ec       	ldi	r30, 0xC1	; 193
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	80 81       	ld	r24, Z
 ad4:	80 62       	ori	r24, 0x20	; 32
 ad6:	80 83       	st	Z, r24
 ad8:	08 95       	ret

00000ada <__itoa_ncheck>:
 ada:	bb 27       	eor	r27, r27
 adc:	4a 30       	cpi	r20, 0x0A	; 10
 ade:	31 f4       	brne	.+12     	; 0xaec <__itoa_ncheck+0x12>
 ae0:	99 23       	and	r25, r25
 ae2:	22 f4       	brpl	.+8      	; 0xaec <__itoa_ncheck+0x12>
 ae4:	bd e2       	ldi	r27, 0x2D	; 45
 ae6:	90 95       	com	r25
 ae8:	81 95       	neg	r24
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__utoa_common>

00000af0 <__utoa_ncheck>:
 af0:	bb 27       	eor	r27, r27

00000af2 <__utoa_common>:
 af2:	fb 01       	movw	r30, r22
 af4:	55 27       	eor	r21, r21
 af6:	aa 27       	eor	r26, r26
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	aa 1f       	adc	r26, r26
 afe:	a4 17       	cp	r26, r20
 b00:	10 f0       	brcs	.+4      	; 0xb06 <__utoa_common+0x14>
 b02:	a4 1b       	sub	r26, r20
 b04:	83 95       	inc	r24
 b06:	50 51       	subi	r21, 0x10	; 16
 b08:	b9 f7       	brne	.-18     	; 0xaf8 <__utoa_common+0x6>
 b0a:	a0 5d       	subi	r26, 0xD0	; 208
 b0c:	aa 33       	cpi	r26, 0x3A	; 58
 b0e:	08 f0       	brcs	.+2      	; 0xb12 <__utoa_common+0x20>
 b10:	a9 5d       	subi	r26, 0xD9	; 217
 b12:	a1 93       	st	Z+, r26
 b14:	00 97       	sbiw	r24, 0x00	; 0
 b16:	79 f7       	brne	.-34     	; 0xaf6 <__utoa_common+0x4>
 b18:	b1 11       	cpse	r27, r1
 b1a:	b1 93       	st	Z+, r27
 b1c:	11 92       	st	Z+, r1
 b1e:	cb 01       	movw	r24, r22
 b20:	0c 94 92 05 	jmp	0xb24	; 0xb24 <strrev>

00000b24 <strrev>:
 b24:	dc 01       	movw	r26, r24
 b26:	fc 01       	movw	r30, r24
 b28:	67 2f       	mov	r22, r23
 b2a:	71 91       	ld	r23, Z+
 b2c:	77 23       	and	r23, r23
 b2e:	e1 f7       	brne	.-8      	; 0xb28 <strrev+0x4>
 b30:	32 97       	sbiw	r30, 0x02	; 2
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <strrev+0x18>
 b34:	7c 91       	ld	r23, X
 b36:	6d 93       	st	X+, r22
 b38:	70 83       	st	Z, r23
 b3a:	62 91       	ld	r22, -Z
 b3c:	ae 17       	cp	r26, r30
 b3e:	bf 07       	cpc	r27, r31
 b40:	c8 f3       	brcs	.-14     	; 0xb34 <strrev+0x10>
 b42:	08 95       	ret

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
